{"ast":null,"code":"import React, { memo, useRef, useMemo, createContext, useState, useCallback, useContext } from 'react';\nimport { useSpring, animated } from 'react-spring';\nimport { useTheme, useMotionConfig, useMeasure, useValueFormatter } from '@nivo/core';\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread2(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n\n  return arr2;\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(n);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\n\nvar TOOLTIP_OFFSET = 14;\nvar tooltipStyle = {\n  pointerEvents: 'none',\n  position: 'absolute',\n  zIndex: 10,\n  top: 0,\n  left: 0\n};\n\nvar translate = function translate(x, y) {\n  return \"translate(\".concat(x, \"px, \").concat(y, \"px)\");\n};\n\nvar TooltipWrapper = memo(function (_ref) {\n  var _animatedProps$transf;\n\n  var position = _ref.position,\n      anchor = _ref.anchor,\n      children = _ref.children;\n  var theme = useTheme();\n\n  var _useMotionConfig = useMotionConfig(),\n      animate = _useMotionConfig.animate,\n      springConfig = _useMotionConfig.config;\n\n  var _useMeasure = useMeasure(),\n      _useMeasure2 = _slicedToArray(_useMeasure, 2),\n      measureRef = _useMeasure2[0],\n      bounds = _useMeasure2[1];\n\n  var previousPosition = useRef(false);\n  var to = undefined;\n  var immediate = false;\n  var hasDimension = bounds.width > 0 && bounds.height > 0;\n  var x = Math.round(position[0]);\n  var y = Math.round(position[1]);\n\n  if (hasDimension) {\n    if (anchor === 'top') {\n      x -= bounds.width / 2;\n      y -= bounds.height + TOOLTIP_OFFSET;\n    } else if (anchor === 'right') {\n      x += TOOLTIP_OFFSET;\n      y -= bounds.height / 2;\n    } else if (anchor === 'bottom') {\n      x -= bounds.width / 2;\n      y += TOOLTIP_OFFSET;\n    } else if (anchor === 'left') {\n      x -= bounds.width + TOOLTIP_OFFSET;\n      y -= bounds.height / 2;\n    } else if (anchor === 'center') {\n      x -= bounds.width / 2;\n      y -= bounds.height / 2;\n    }\n\n    to = {\n      transform: translate(x, y)\n    };\n\n    if (!previousPosition.current) {\n      immediate = true;\n    }\n\n    previousPosition.current = [x, y];\n  }\n\n  var animatedProps = useSpring({\n    to: to,\n    config: springConfig,\n    immediate: !animate || immediate\n  });\n\n  var style = _objectSpread2(_objectSpread2(_objectSpread2({}, tooltipStyle), theme.tooltip), {}, {\n    transform: (_animatedProps$transf = animatedProps.transform) !== null && _animatedProps$transf !== void 0 ? _animatedProps$transf : translate(x, y)\n  });\n\n  return React.createElement(animated.div, {\n    ref: measureRef,\n    style: style\n  }, children);\n});\nTooltipWrapper.displayName = 'TooltipWrapper';\nvar Chip = memo(function (_ref) {\n  var _ref$size = _ref.size,\n      size = _ref$size === void 0 ? 12 : _ref$size,\n      color = _ref.color,\n      _ref$style = _ref.style,\n      style = _ref$style === void 0 ? {} : _ref$style;\n  return React.createElement(\"span\", {\n    style: _objectSpread2({\n      display: 'block',\n      width: size,\n      height: size,\n      background: color\n    }, style)\n  });\n});\nvar BasicTooltip = memo(function (_ref) {\n  var id = _ref.id,\n      _value = _ref.value,\n      format = _ref.format,\n      _ref$enableChip = _ref.enableChip,\n      enableChip = _ref$enableChip === void 0 ? false : _ref$enableChip,\n      color = _ref.color,\n      renderContent = _ref.renderContent;\n  var theme = useTheme();\n  var formatValue = useValueFormatter(format);\n  var content;\n\n  if (typeof renderContent === 'function') {\n    content = renderContent();\n  } else {\n    var value = _value;\n\n    if (formatValue !== undefined && value !== undefined) {\n      value = formatValue(value);\n    }\n\n    content = React.createElement(\"div\", {\n      style: theme.tooltip.basic\n    }, enableChip && React.createElement(Chip, {\n      color: color,\n      style: theme.tooltip.chip\n    }), value !== undefined ? React.createElement(\"span\", null, id, \": \", React.createElement(\"strong\", null, \"\".concat(value))) : id);\n  }\n\n  return React.createElement(\"div\", {\n    style: theme.tooltip.container\n  }, content);\n});\nvar tableStyle = {\n  width: '100%',\n  borderCollapse: 'collapse'\n};\nvar TableTooltip = memo(function (_ref) {\n  var title = _ref.title,\n      _ref$rows = _ref.rows,\n      rows = _ref$rows === void 0 ? [] : _ref$rows,\n      renderContent = _ref.renderContent;\n  var theme = useTheme();\n  if (!rows.length) return null;\n  var content;\n\n  if (typeof renderContent === 'function') {\n    content = renderContent();\n  } else {\n    content = React.createElement(\"div\", null, title && title, React.createElement(\"table\", {\n      style: _objectSpread2(_objectSpread2({}, tableStyle), theme.tooltip.table)\n    }, React.createElement(\"tbody\", null, rows.map(function (row, i) {\n      return React.createElement(\"tr\", {\n        key: i\n      }, row.map(function (column, j) {\n        return React.createElement(\"td\", {\n          key: j,\n          style: theme.tooltip.tableCell\n        }, column);\n      }));\n    }))));\n  }\n\n  return React.createElement(\"div\", {\n    style: theme.tooltip.container\n  }, content);\n});\nTableTooltip.displayName = 'TableTooltip';\nvar CrosshairLine = memo(function (_ref) {\n  var x0 = _ref.x0,\n      x1 = _ref.x1,\n      y0 = _ref.y0,\n      y1 = _ref.y1;\n  var theme = useTheme();\n\n  var _useMotionConfig = useMotionConfig(),\n      animate = _useMotionConfig.animate,\n      springConfig = _useMotionConfig.config;\n\n  var style = useMemo(function () {\n    return _objectSpread2(_objectSpread2({}, theme.crosshair.line), {}, {\n      pointerEvents: 'none'\n    });\n  }, [theme.crosshair.line]);\n  var animatedProps = useSpring({\n    x1: x0,\n    x2: x1,\n    y1: y0,\n    y2: y1,\n    config: springConfig,\n    immediate: !animate\n  });\n  return React.createElement(animated.line, Object.assign({}, animatedProps, {\n    fill: \"none\",\n    style: style\n  }));\n});\nCrosshairLine.displayName = 'CrosshairLine';\nvar Crosshair = memo(function (_ref) {\n  var width = _ref.width,\n      height = _ref.height,\n      type = _ref.type,\n      x = _ref.x,\n      y = _ref.y;\n  var xLine;\n  var yLine;\n\n  if (type === 'cross') {\n    xLine = {\n      x0: x,\n      x1: x,\n      y0: 0,\n      y1: height\n    };\n    yLine = {\n      x0: 0,\n      x1: width,\n      y0: y,\n      y1: y\n    };\n  } else if (type === 'top-left') {\n    xLine = {\n      x0: x,\n      x1: x,\n      y0: 0,\n      y1: y\n    };\n    yLine = {\n      x0: 0,\n      x1: x,\n      y0: y,\n      y1: y\n    };\n  } else if (type === 'top') {\n    xLine = {\n      x0: x,\n      x1: x,\n      y0: 0,\n      y1: y\n    };\n  } else if (type === 'top-right') {\n    xLine = {\n      x0: x,\n      x1: x,\n      y0: 0,\n      y1: y\n    };\n    yLine = {\n      x0: x,\n      x1: width,\n      y0: y,\n      y1: y\n    };\n  } else if (type === 'right') {\n    yLine = {\n      x0: x,\n      x1: width,\n      y0: y,\n      y1: y\n    };\n  } else if (type === 'bottom-right') {\n    xLine = {\n      x0: x,\n      x1: x,\n      y0: y,\n      y1: height\n    };\n    yLine = {\n      x0: x,\n      x1: width,\n      y0: y,\n      y1: y\n    };\n  } else if (type === 'bottom') {\n    xLine = {\n      x0: x,\n      x1: x,\n      y0: y,\n      y1: height\n    };\n  } else if (type === 'bottom-left') {\n    xLine = {\n      x0: x,\n      x1: x,\n      y0: y,\n      y1: height\n    };\n    yLine = {\n      x0: 0,\n      x1: x,\n      y0: y,\n      y1: y\n    };\n  } else if (type === 'left') {\n    yLine = {\n      x0: 0,\n      x1: x,\n      y0: y,\n      y1: y\n    };\n  } else if (type === 'x') {\n    xLine = {\n      x0: x,\n      x1: x,\n      y0: 0,\n      y1: height\n    };\n  } else if (type === 'y') {\n    yLine = {\n      x0: 0,\n      x1: width,\n      y0: y,\n      y1: y\n    };\n  }\n\n  return React.createElement(React.Fragment, null, xLine && React.createElement(CrosshairLine, {\n    x0: xLine.x0,\n    x1: xLine.x1,\n    y0: xLine.y0,\n    y1: xLine.y1\n  }), yLine && React.createElement(CrosshairLine, {\n    x0: yLine.x0,\n    x1: yLine.x1,\n    y0: yLine.y0,\n    y1: yLine.y1\n  }));\n});\nCrosshair.displayName = 'Crosshair';\nvar defaultActions = {\n  showTooltipAt: function showTooltipAt() {},\n  showTooltipFromEvent: function showTooltipFromEvent() {},\n  hideTooltip: function hideTooltip() {}\n};\nvar TooltipActionsContext = createContext(defaultActions);\nvar hiddenTooltipState = {\n  isVisible: false,\n  position: [null, null],\n  content: null,\n  anchor: null\n};\nvar TooltipStateContext = createContext(hiddenTooltipState);\n\nvar useTooltipHandlers = function useTooltipHandlers(container) {\n  var _useState = useState(hiddenTooltipState),\n      _useState2 = _slicedToArray(_useState, 2),\n      state = _useState2[0],\n      setState = _useState2[1];\n\n  var showTooltipAt = useCallback(function (content, _ref) {\n    var _ref2 = _slicedToArray(_ref, 2),\n        x = _ref2[0],\n        y = _ref2[1];\n\n    var anchor = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'top';\n    setState({\n      isVisible: true,\n      position: [x, y],\n      anchor: anchor,\n      content: content\n    });\n  }, [setState]);\n  var showTooltipFromEvent = useCallback(function (content, event) {\n    var anchor = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'top';\n    var bounds = container.current.getBoundingClientRect();\n    var x = event.clientX - bounds.left;\n    var y = event.clientY - bounds.top;\n\n    if (anchor === 'left' || anchor === 'right') {\n      if (x < bounds.width / 2) anchor = 'right';else anchor = 'left';\n    }\n\n    setState({\n      isVisible: true,\n      position: [x, y],\n      anchor: anchor,\n      content: content\n    });\n  }, [container, setState]);\n  var hideTooltip = useCallback(function () {\n    setState(hiddenTooltipState);\n  }, [setState]);\n  var actions = useMemo(function () {\n    return {\n      showTooltipAt: showTooltipAt,\n      showTooltipFromEvent: showTooltipFromEvent,\n      hideTooltip: hideTooltip\n    };\n  }, [showTooltipAt, showTooltipFromEvent, hideTooltip]);\n  return {\n    actions: actions,\n    state: state\n  };\n};\n\nvar useTooltip = function useTooltip() {\n  var context = useContext(TooltipActionsContext);\n\n  if (context === undefined) {\n    throw new Error('useTooltip must be used within a TooltipProvider');\n  }\n\n  return context;\n};\n\nvar useTooltipState = function useTooltipState() {\n  var context = useContext(TooltipStateContext);\n\n  if (context === undefined) {\n    throw new Error('useTooltipState must be used within a TooltipProvider');\n  }\n\n  return context;\n};\n\nvar isVisibleTooltipState = function isVisibleTooltipState(state) {\n  return state.isVisible === true;\n};\n\nvar Tooltip = function Tooltip() {\n  var state = useTooltipState();\n\n  if (!isVisibleTooltipState(state)) {\n    return null;\n  }\n\n  return React.createElement(TooltipWrapper, {\n    position: state.position,\n    anchor: state.anchor\n  }, state.content);\n};\n\nvar TooltipProvider = function TooltipProvider(_ref) {\n  var container = _ref.container,\n      children = _ref.children;\n\n  var _useTooltipHandlers = useTooltipHandlers(container),\n      actions = _useTooltipHandlers.actions,\n      state = _useTooltipHandlers.state;\n\n  return React.createElement(TooltipActionsContext.Provider, {\n    value: actions\n  }, React.createElement(TooltipStateContext.Provider, {\n    value: state\n  }, children));\n};\n\nexport { BasicTooltip, Chip, Crosshair, TableTooltip, Tooltip, TooltipActionsContext, TooltipProvider, TooltipStateContext, TooltipWrapper, hiddenTooltipState, isVisibleTooltipState, useTooltip, useTooltipHandlers, useTooltipState };","map":null,"metadata":{},"sourceType":"module"}
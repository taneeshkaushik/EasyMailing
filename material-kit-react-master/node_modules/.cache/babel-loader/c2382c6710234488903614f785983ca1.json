{"ast":null,"code":"var _jsxFileName = \"/home/taneesh/Projects/EasyMailing/material-kit-react-master/src/@fuse/components/FuseHighlight/FuseHighlight.js\";\nimport React, { useEffect, useRef } from 'react';\nimport * as Prism from 'prismjs';\nimport './prism-languages';\nimport PropTypes from 'prop-types';\n\nfunction FuseHighlight(props) {\n  var domNode = useRef(null);\n  var source = useRef(trimCode());\n  useEffect(function () {\n    function highlight() {\n      Prism.highlightElement(domNode.current, props.async);\n    }\n\n    highlight();\n  }, [props.async]);\n\n  function trimCode() {\n    // Split the source into lines\n    var sourceLines = props.children.split('\\n'); // Remove the first and the last line of the source\n    // code if they are blank lines. This way, the html\n    // can be formatted properly while using fuse-highlight\n    // component\n\n    if (!sourceLines[0].trim()) {\n      sourceLines.shift();\n    }\n\n    if (!sourceLines[sourceLines.length - 1].trim()) {\n      sourceLines.pop();\n    } // Find the first non-whitespace char index in\n    // the first line of the source code\n\n\n    var indexOfFirstChar = sourceLines[0].search(/\\S|$/); // Generate the trimmed source\n\n    var sourceRaw = ''; // Iterate through all the lines\n\n    sourceLines.forEach(function (line, index) {\n      // Trim the beginning white space depending on the index\n      // and concat the source code\n      sourceRaw = sourceRaw + line.substr(indexOfFirstChar, line.length); // If it's not the last line...\n\n      if (index !== sourceLines.length - 1) {\n        // Add a line break at the end\n        sourceRaw = sourceRaw + '\\n';\n      }\n    });\n    return sourceRaw;\n  }\n\n  var className = props.className,\n      Wrapper = props.component;\n  return React.createElement(Wrapper, {\n    ref: domNode,\n    className: className,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }, source.current);\n}\n\nFuseHighlight.propTypes = {\n  component: PropTypes.node\n};\nFuseHighlight.defaultProps = {\n  component: \"code\"\n};\nexport default React.memo(FuseHighlight);","map":{"version":3,"sources":["/home/taneesh/Projects/EasyMailing/material-kit-react-master/src/@fuse/components/FuseHighlight/FuseHighlight.js"],"names":["React","useEffect","useRef","Prism","PropTypes","FuseHighlight","props","domNode","source","trimCode","highlight","highlightElement","current","async","sourceLines","children","split","trim","shift","length","pop","indexOfFirstChar","search","sourceRaw","forEach","line","index","substr","className","Wrapper","component","propTypes","node","defaultProps","memo"],"mappings":";AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,MAA1B,QAAuC,OAAvC;AACA,OAAO,KAAKC,KAAZ,MAAuB,SAAvB;AACA,OAAO,mBAAP;AACA,OAAOC,SAAP,MAAsB,YAAtB;;AAEA,SAASC,aAAT,CAAuBC,KAAvB,EACA;AACI,MAAMC,OAAO,GAAGL,MAAM,CAAC,IAAD,CAAtB;AACA,MAAMM,MAAM,GAAGN,MAAM,CAACO,QAAQ,EAAT,CAArB;AAEAR,EAAAA,SAAS,CAAC,YAAM;AACZ,aAASS,SAAT,GACA;AACIP,MAAAA,KAAK,CAACQ,gBAAN,CAAuBJ,OAAO,CAACK,OAA/B,EAAwCN,KAAK,CAACO,KAA9C;AACH;;AAEDH,IAAAA,SAAS;AACZ,GAPQ,EAON,CAACJ,KAAK,CAACO,KAAP,CAPM,CAAT;;AASA,WAASJ,QAAT,GACA;AACI;AACA,QAAMK,WAAW,GAAGR,KAAK,CAACS,QAAN,CAAeC,KAAf,CAAqB,IAArB,CAApB,CAFJ,CAII;AACA;AACA;AACA;;AACA,QAAK,CAACF,WAAW,CAAC,CAAD,CAAX,CAAeG,IAAf,EAAN,EACA;AACIH,MAAAA,WAAW,CAACI,KAAZ;AACH;;AAED,QAAK,CAACJ,WAAW,CAACA,WAAW,CAACK,MAAZ,GAAqB,CAAtB,CAAX,CAAoCF,IAApC,EAAN,EACA;AACIH,MAAAA,WAAW,CAACM,GAAZ;AACH,KAhBL,CAkBI;AACA;;;AACA,QAAMC,gBAAgB,GAAGP,WAAW,CAAC,CAAD,CAAX,CAAeQ,MAAf,CAAsB,MAAtB,CAAzB,CApBJ,CAsBI;;AACA,QAAIC,SAAS,GAAG,EAAhB,CAvBJ,CAyBI;;AACAT,IAAAA,WAAW,CAACU,OAAZ,CAAoB,UAACC,IAAD,EAAOC,KAAP,EAAiB;AAEjC;AACA;AACAH,MAAAA,SAAS,GAAGA,SAAS,GAAGE,IAAI,CAACE,MAAL,CAAYN,gBAAZ,EAA8BI,IAAI,CAACN,MAAnC,CAAxB,CAJiC,CAMjC;;AACA,UAAKO,KAAK,KAAKZ,WAAW,CAACK,MAAZ,GAAqB,CAApC,EACA;AACI;AACAI,QAAAA,SAAS,GAAGA,SAAS,GAAG,IAAxB;AACH;AACJ,KAZD;AAaA,WAAOA,SAAP;AACH;;AAtDL,MAwDWK,SAxDX,GAwD4CtB,KAxD5C,CAwDWsB,SAxDX;AAAA,MAwDiCC,OAxDjC,GAwD4CvB,KAxD5C,CAwDsBwB,SAxDtB;AA0DI,SACI,oBAAC,OAAD;AAAS,IAAA,GAAG,EAAEvB,OAAd;AAAuB,IAAA,SAAS,EAAEqB,SAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKpB,MAAM,CAACI,OADZ,CADJ;AAKH;;AAEDP,aAAa,CAAC0B,SAAd,GAA0B;AACtBD,EAAAA,SAAS,EAAE1B,SAAS,CAAC4B;AADC,CAA1B;AAGA3B,aAAa,CAAC4B,YAAd,GAA6B;AACzBH,EAAAA,SAAS;AADgB,CAA7B;AAIA,eAAe9B,KAAK,CAACkC,IAAN,CAAW7B,aAAX,CAAf","sourcesContent":["import React, {useEffect, useRef} from 'react';\nimport * as Prism from 'prismjs';\nimport './prism-languages';\nimport PropTypes from 'prop-types';\n\nfunction FuseHighlight(props)\n{\n    const domNode = useRef(null);\n    const source = useRef(trimCode());\n\n    useEffect(() => {\n        function highlight()\n        {\n            Prism.highlightElement(domNode.current, props.async)\n        }\n\n        highlight();\n    }, [props.async]);\n\n    function trimCode()\n    {\n        // Split the source into lines\n        const sourceLines = props.children.split('\\n');\n\n        // Remove the first and the last line of the source\n        // code if they are blank lines. This way, the html\n        // can be formatted properly while using fuse-highlight\n        // component\n        if ( !sourceLines[0].trim() )\n        {\n            sourceLines.shift();\n        }\n\n        if ( !sourceLines[sourceLines.length - 1].trim() )\n        {\n            sourceLines.pop();\n        }\n\n        // Find the first non-whitespace char index in\n        // the first line of the source code\n        const indexOfFirstChar = sourceLines[0].search(/\\S|$/);\n\n        // Generate the trimmed source\n        let sourceRaw = '';\n\n        // Iterate through all the lines\n        sourceLines.forEach((line, index) => {\n\n            // Trim the beginning white space depending on the index\n            // and concat the source code\n            sourceRaw = sourceRaw + line.substr(indexOfFirstChar, line.length);\n\n            // If it's not the last line...\n            if ( index !== sourceLines.length - 1 )\n            {\n                // Add a line break at the end\n                sourceRaw = sourceRaw + '\\n';\n            }\n        });\n        return sourceRaw;\n    }\n\n    const {className, component: Wrapper} = props;\n\n    return (\n        <Wrapper ref={domNode} className={className}>\n            {source.current}\n        </Wrapper>\n    )\n}\n\nFuseHighlight.propTypes = {\n    component: PropTypes.node\n};\nFuseHighlight.defaultProps = {\n    component: `code`\n};\n\nexport default React.memo(FuseHighlight);\n"]},"metadata":{},"sourceType":"module"}
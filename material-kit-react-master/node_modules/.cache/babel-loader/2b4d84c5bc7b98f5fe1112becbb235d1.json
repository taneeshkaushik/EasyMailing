{"ast":null,"code":"var _jsxFileName = \"/home/abhishek/Projects/Stp-II/Fuse-React-v3.0.0-skeleton/src/app/auth/Auth.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport * as userActions from 'app/auth/store/actions';\nimport { bindActionCreators } from 'redux';\nimport * as Actions from 'app/store/actions';\nimport * as authActions from 'app/auth/store/actions';\nimport jwtService from 'app/services/jwtService';\nimport { useDispatch, useSelector } from 'react-redux';\n\nfunction Auth(props) {\n  /*eslint-disable-next-line no-useless-constructor*/\n  var dispatch = useDispatch();\n  /**\n   * Comment the line if you do not use JWt\n   */\n\n  /**\n   * Comment the line if you do not use Auth0\n   */\n  //auth0Check();\n\n  /**\n   * Comment the line if you do not use Firebase\n   */\n  //firebaseCheck();\n\n  var jwtCheck = function jwtCheck() {\n    jwtService.on('onAutoLogin', function () {\n      props.showMessage({\n        message: 'Logging in with JWT'\n      });\n      /**\n       * Sign in and retrieve user data from Api\n       */\n\n      if (jwtService.signInWithToken()) {\n        dispatch(authActions.submitautologin());\n        props.showMessage({\n          message: 'Logged in with JWT'\n        });\n      } else {\n        props.showMessage({\n          message: 'Credentials Invalid'\n        });\n      }\n    });\n    jwtService.on('onAutoLogout', function (message) {\n      if (message) {\n        props.showMessage({\n          message: message\n        });\n      }\n\n      props.logout();\n    });\n    jwtService.init();\n  };\n\n  jwtCheck();\n  var children = props.children;\n  return React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  }, children);\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return bindActionCreators({\n    logout: userActions.logoutUser,\n    setUserData: userActions.setUserData,\n    showMessage: Actions.showMessage,\n    hideMessage: Actions.hideMessage\n  }, dispatch);\n}\n\nexport default connect(null, mapDispatchToProps)(Auth);","map":{"version":3,"sources":["/home/abhishek/Projects/Stp-II/Fuse-React-v3.0.0-skeleton/src/app/auth/Auth.js"],"names":["React","Component","connect","userActions","bindActionCreators","Actions","authActions","jwtService","useDispatch","useSelector","Auth","props","dispatch","jwtCheck","on","showMessage","message","signInWithToken","submitautologin","logout","init","children","mapDispatchToProps","logoutUser","setUserData","hideMessage"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAO,KAAKC,WAAZ,MAA6B,wBAA7B;AACA,SAASC,kBAAT,QAAmC,OAAnC;AACA,OAAO,KAAKC,OAAZ,MAAyB,mBAAzB;AACA,OAAO,KAAKC,WAAZ,MAA6B,wBAA7B;AACA,OAAOC,UAAP,MAAuB,yBAAvB;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;;AAEA,SAASC,IAAT,CAAcC,KAAd,EAAqB;AACjB;AACA,MAAMC,QAAQ,GAAGJ,WAAW,EAA5B;AACA;;;;AAIA;;;AAGA;;AAEA;;;AAGA;;AAEA,MAAMK,QAAQ,GAAG,SAAXA,QAAW,GAAM;AACnBN,IAAAA,UAAU,CAACO,EAAX,CAAc,aAAd,EAA6B,YAAM;AAE/BH,MAAAA,KAAK,CAACI,WAAN,CAAkB;AAAEC,QAAAA,OAAO,EAAE;AAAX,OAAlB;AAEA;;;;AAGA,UAAIT,UAAU,CAACU,eAAX,EAAJ,EAAkC;AAC9BL,QAAAA,QAAQ,CAACN,WAAW,CAACY,eAAZ,EAAD,CAAR;AACAP,QAAAA,KAAK,CAACI,WAAN,CAAkB;AAAEC,UAAAA,OAAO,EAAE;AAAX,SAAlB;AACH,OAHD,MAIK;AACDL,QAAAA,KAAK,CAACI,WAAN,CAAkB;AAAEC,UAAAA,OAAO,EAAE;AAAX,SAAlB;AACH;AACJ,KAdD;AAgBAT,IAAAA,UAAU,CAACO,EAAX,CAAc,cAAd,EAA8B,UAACE,OAAD,EAAa;AACvC,UAAIA,OAAJ,EAAa;AACTL,QAAAA,KAAK,CAACI,WAAN,CAAkB;AAAEC,UAAAA,OAAO,EAAPA;AAAF,SAAlB;AACH;;AACDL,MAAAA,KAAK,CAACQ,MAAN;AACH,KALD;AAOAZ,IAAAA,UAAU,CAACa,IAAX;AACH,GAzBD;;AA0BAP,EAAAA,QAAQ;AA3CS,MA4CTQ,QA5CS,GA4CIV,KA5CJ,CA4CTU,QA5CS;AA6CjB,SACI,oBAAC,KAAD,CAAO,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKA,QADL,CADJ;AAKH;;AAED,SAASC,kBAAT,CAA4BV,QAA5B,EAAsC;AAClC,SAAOR,kBAAkB,CAAC;AACtBe,IAAAA,MAAM,EAAEhB,WAAW,CAACoB,UADE;AAEtBC,IAAAA,WAAW,EAAErB,WAAW,CAACqB,WAFH;AAGtBT,IAAAA,WAAW,EAAEV,OAAO,CAACU,WAHC;AAItBU,IAAAA,WAAW,EAAEpB,OAAO,CAACoB;AAJC,GAAD,EAMrBb,QANqB,CAAzB;AAOH;;AAED,eAAeV,OAAO,CAAC,IAAD,EAAOoB,kBAAP,CAAP,CAAkCZ,IAAlC,CAAf","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport * as userActions from 'app/auth/store/actions';\nimport { bindActionCreators } from 'redux';\nimport * as Actions from 'app/store/actions';\nimport * as authActions from 'app/auth/store/actions';\nimport jwtService from 'app/services/jwtService';\nimport { useDispatch, useSelector } from 'react-redux';\n\nfunction Auth(props) {\n    /*eslint-disable-next-line no-useless-constructor*/\n    const dispatch = useDispatch();\n    /**\n     * Comment the line if you do not use JWt\n     */\n\n    /**\n     * Comment the line if you do not use Auth0\n     */\n    //auth0Check();\n\n    /**\n     * Comment the line if you do not use Firebase\n     */\n    //firebaseCheck();\n\n    const jwtCheck = () => {\n        jwtService.on('onAutoLogin', () => {\n\n            props.showMessage({ message: 'Logging in with JWT' });\n\n            /**\n             * Sign in and retrieve user data from Api\n             */\n            if (jwtService.signInWithToken()) {\n                dispatch(authActions.submitautologin());\n                props.showMessage({ message: 'Logged in with JWT' });\n            }\n            else {\n                props.showMessage({ message: 'Credentials Invalid' });\n            }\n        });\n\n        jwtService.on('onAutoLogout', (message) => {\n            if (message) {\n                props.showMessage({ message });\n            }\n            props.logout();\n        });\n\n        jwtService.init();\n    };\n    jwtCheck();\n    const { children } = props;\n    return (\n        <React.Fragment>\n            {children}\n        </React.Fragment>\n    );\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return bindActionCreators({\n        logout: userActions.logoutUser,\n        setUserData: userActions.setUserData,\n        showMessage: Actions.showMessage,\n        hideMessage: Actions.hideMessage\n    },\n        dispatch);\n}\n\nexport default connect(null, mapDispatchToProps)(Auth);\n"]},"metadata":{},"sourceType":"module"}
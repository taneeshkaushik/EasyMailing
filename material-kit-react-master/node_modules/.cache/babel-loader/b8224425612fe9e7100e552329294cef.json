{"ast":null,"code":"export default function superset(values, other) {\n  var iterator = values[Symbol.iterator](),\n      set = new Set();\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = other[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var o = _step.value;\n      if (set.has(o)) continue;\n      var value = void 0,\n          done = void 0;\n\n      while (_iterator$next = iterator.next(), value = _iterator$next.value, done = _iterator$next.done, _iterator$next) {\n        var _iterator$next;\n\n        if (done) return false;\n        set.add(value);\n        if (Object.is(o, value)) break;\n      }\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return != null) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  return true;\n}","map":null,"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import * as G from './globals';\nexport var noop = function noop() {};\nexport var defineHidden = function defineHidden(obj, key, value) {\n  return Object.defineProperty(obj, key, {\n    value: value,\n    writable: true,\n    configurable: true\n  });\n};\nexport var is = {\n  arr: Array.isArray,\n  obj: function obj(a) {\n    return !!a && a.constructor.name === 'Object';\n  },\n  fun: function fun(a) {\n    return typeof a === 'function';\n  },\n  str: function str(a) {\n    return typeof a === 'string';\n  },\n  num: function num(a) {\n    return typeof a === 'number';\n  },\n  und: function und(a) {\n    return a === undefined;\n  }\n};\n/** Compare animatable values */\n\nexport function isEqual(a, b) {\n  if (is.arr(a)) {\n    if (!is.arr(b) || a.length !== b.length) return false;\n\n    for (var i = 0; i < a.length; i++) {\n      if (a[i] !== b[i]) return false;\n    }\n\n    return true;\n  }\n\n  return a === b;\n} // Not all strings can be animated (eg: {display: \"none\"})\n\nexport var isAnimatedString = function isAnimatedString(value) {\n  return is.str(value) && (value[0] == '#' || /\\d/.test(value) || !!(G.colorNames && G.colorNames[value]));\n};\n/** An unsafe object/array/set iterator that allows for better minification */\n\nexport var each = function each(obj, cb, ctx) {\n  if (is.fun(obj.forEach)) {\n    obj.forEach(cb, ctx);\n  } else {\n    Object.keys(obj).forEach(function (key) {\n      return cb.call(ctx, obj[key], key);\n    });\n  }\n};\nexport var toArray = function toArray(a) {\n  return is.und(a) ? [] : is.arr(a) ? a : [a];\n};\nexport function flush(queue, iterator) {\n  if (queue.size) {\n    var items = Array.from(queue);\n    queue.clear();\n    each(items, iterator);\n  }\n}","map":null,"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _assertThisInitialized from \"/home/abhishek/Projects/stp/frotend/Fuse-React-v3.0.0-skeleton/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _slicedToArray from \"/home/abhishek/Projects/stp/frotend/Fuse-React-v3.0.0-skeleton/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _regeneratorRuntime from \"/home/abhishek/Projects/stp/frotend/Fuse-React-v3.0.0-skeleton/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _get from \"/home/abhishek/Projects/stp/frotend/Fuse-React-v3.0.0-skeleton/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get\";\nimport _createClass from \"/home/abhishek/Projects/stp/frotend/Fuse-React-v3.0.0-skeleton/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/abhishek/Projects/stp/frotend/Fuse-React-v3.0.0-skeleton/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/abhishek/Projects/stp/frotend/Fuse-React-v3.0.0-skeleton/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/abhishek/Projects/stp/frotend/Fuse-React-v3.0.0-skeleton/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _wrapNativeSuper from \"/home/abhishek/Projects/stp/frotend/Fuse-React-v3.0.0-skeleton/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/wrapNativeSuper\";\nimport _asyncToGenerator from \"/home/abhishek/Projects/stp/frotend/Fuse-React-v3.0.0-skeleton/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/home/abhishek/Projects/stp/frotend/Fuse-React-v3.0.0-skeleton/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _toConsumableArray from \"/home/abhishek/Projects/stp/frotend/Fuse-React-v3.0.0-skeleton/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport { useLayoutEffect } from 'react-layout-effect';\nimport { each as _each, is, toArray, isAnimatedString, getFluidConfig, Globals, FluidValue, getFluidValue, flush, isEqual, noop, useForceUpdate, usePrev, useOnce, createInterpolator } from '@react-spring/shared';\nexport { FrameLoop, Globals, createInterpolator } from '@react-spring/shared';\nimport _extends from '@babel/runtime/helpers/esm/extends';\nimport { createContext, useContext, createElement, useRef, useState, useMemo as useMemo$1, useImperativeHandle, Fragment } from 'react';\nimport { getAnimated, AnimatedValue, getPayload, setAnimated, AnimatedArray, AnimatedString } from '@react-spring/animated';\nimport { createStringInterpolator, batchedUpdates, to as to$1, frameLoop, skipAnimation } from '@react-spring/shared/globals';\nimport { useMemoOne, useCallbackOne } from 'use-memo-one';\nimport { deprecateInterpolate } from '@react-spring/shared/deprecations';\nimport _objectWithoutPropertiesLoose from '@babel/runtime/helpers/esm/objectWithoutPropertiesLoose';\nimport { createStringInterpolator as createStringInterpolator$1 } from '@react-spring/shared/stringInterpolation';\nexport * from '@react-spring/shared/types';\n/** API\n *  useChain(references, timeSteps, timeFrame)\n */\n\nfunction useChain(refs, timeSteps) {\n  var timeFrame = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1000;\n  useLayoutEffect(function () {\n    if (timeSteps) {\n      var prevDelay = 0;\n\n      _each(refs, function (ref, i) {\n        if (!ref.current) return;\n        var controllers = ref.current.controllers;\n\n        if (controllers.length) {\n          var delay = timeFrame * timeSteps[i]; // Use the previous delay if none exists.\n\n          if (isNaN(delay)) delay = prevDelay;else prevDelay = delay;\n\n          _each(controllers, function (ctrl) {\n            _each(ctrl.queue, function (props) {\n              props.delay = delay + (props.delay || 0);\n            });\n\n            ctrl.start();\n          });\n        }\n      });\n    } else {\n      var p = Promise.resolve();\n\n      _each(refs, function (ref) {\n        var _ref2 = ref.current || {},\n            controllers = _ref2.controllers,\n            start = _ref2.start;\n\n        if (controllers && controllers.length) {\n          // Take the queue of each controller\n          var updates = controllers.map(function (ctrl) {\n            var q = ctrl.queue;\n            ctrl.queue = [];\n            return q;\n          }); // Apply the queue when the previous ref stops animating\n\n          p = p.then(function () {\n            _each(controllers, function (ctrl, i) {\n              var _ctrl$queue;\n\n              return (_ctrl$queue = ctrl.queue).push.apply(_ctrl$queue, _toConsumableArray(updates[i]));\n            });\n\n            return start();\n          });\n        }\n      });\n    }\n  });\n} // The `mass` prop defaults to 1\n\n\nvar config = {\n  default: {\n    tension: 170,\n    friction: 26\n  },\n  gentle: {\n    tension: 120,\n    friction: 14\n  },\n  wobbly: {\n    tension: 180,\n    friction: 12\n  },\n  stiff: {\n    tension: 210,\n    friction: 20\n  },\n  slow: {\n    tension: 280,\n    friction: 60\n  },\n  molasses: {\n    tension: 280,\n    friction: 120\n  }\n};\n\nvar linear = function linear(t) {\n  return t;\n};\n\nvar defaults = _extends(_extends({}, config.default), {}, {\n  mass: 1,\n  damping: 1,\n  easing: linear,\n  clamp: false\n});\n\nvar AnimationConfig =\n/**\n * With higher tension, the spring will resist bouncing and try harder to stop at its end value.\n *\n * When tension is zero, no animation occurs.\n */\n\n/**\n * The damping ratio coefficient, or just the damping ratio when `speed` is defined.\n *\n * When `speed` is defined, this value should be between 0 and 1.\n *\n * Higher friction means the spring will slow down faster.\n */\n\n/**\n * The natural frequency (in seconds), which dictates the number of bounces\n * per second when no damping exists.\n *\n * When defined, `tension` is derived from this, and `friction` is derived\n * from `tension` and `damping`.\n */\n\n/**\n * The damping ratio, which dictates how the spring slows down.\n *\n * Set to `0` to never slow down. Set to `1` to slow down without bouncing.\n * Between `0` and `1` is for you to explore.\n *\n * Only works when `frequency` is defined.\n *\n * Defaults to 1\n */\n\n/**\n * Higher mass means more friction is required to slow down.\n *\n * Defaults to 1, which works fine most of the time.\n */\n\n/**\n * The initial velocity of one or more values.\n */\n\n/**\n * The smallest velocity before the animation is considered \"not moving\".\n *\n * When undefined, `precision` is used instead.\n */\n\n/**\n * The smallest distance from a value before that distance is essentially zero.\n *\n * This helps in deciding when a spring is \"at rest\". The spring must be within\n * this distance from its final value, and its velocity must be lower than this\n * value too (unless `restVelocity` is defined).\n */\n\n/**\n * For `duration` animations only. Note: The `duration` is not affected\n * by this property.\n *\n * Defaults to `0`, which means \"start from the beginning\".\n *\n * Setting to `1+` makes an immediate animation.\n *\n * Setting to `0.5` means \"start from the middle of the easing function\".\n *\n * Any number `>= 0` and `<= 1` makes sense here.\n */\n\n/**\n * Animation length in number of milliseconds.\n */\n\n/**\n * The animation curve. Only used when `duration` is defined.\n *\n * Defaults to quadratic ease-in-out.\n */\n\n/**\n * Avoid overshooting by ending abruptly at the goal value.\n */\n\n/**\n * When above zero, the spring will bounce instead of overshooting when\n * exceeding its goal value. Its velocity is multiplied by `-1 + bounce`\n * whenever its current value equals or exceeds its goal. For example,\n * setting `bounce` to `0.5` chops the velocity in half on each bounce,\n * in addition to any friction.\n */\n\n/**\n * \"Decay animations\" decelerate without an explicit goal value.\n * Useful for scrolling animations.\n *\n * Use `true` for the default exponential decay factor (`0.998`).\n *\n * When a `number` between `0` and `1` is given, a lower number makes the\n * animation slow down faster. And setting to `1` would make an unending\n * animation.\n */\n\n/**\n * While animating, round to the nearest multiple of this number.\n * The `from` and `to` values are never rounded, as well as any value\n * passed to the `set` method of an animated value.\n */\nfunction AnimationConfig() {\n  _classCallCheck(this, AnimationConfig);\n\n  this.tension = void 0;\n  this.friction = void 0;\n  this.frequency = void 0;\n  this.damping = void 0;\n  this.mass = void 0;\n  this.velocity = 0;\n  this.restVelocity = void 0;\n  this.precision = void 0;\n  this.progress = void 0;\n  this.duration = void 0;\n  this.easing = void 0;\n  this.clamp = void 0;\n  this.bounce = void 0;\n  this.decay = void 0;\n  this.round = void 0;\n  Object.assign(this, defaults);\n};\n\nfunction mergeConfig(config, newConfig, defaultConfig) {\n  if (defaultConfig) {\n    defaultConfig = _extends({}, defaultConfig);\n    sanitizeConfig(defaultConfig, newConfig);\n    newConfig = _extends(_extends({}, defaultConfig), newConfig);\n  }\n\n  sanitizeConfig(config, newConfig);\n  Object.assign(config, newConfig);\n\n  for (var key in defaults) {\n    if (config[key] == null) {\n      config[key] = defaults[key];\n    }\n  }\n\n  var mass = config.mass,\n      frequency = config.frequency,\n      damping = config.damping;\n\n  if (!is.und(frequency)) {\n    if (frequency < 0.01) frequency = 0.01;\n    if (damping < 0) damping = 0;\n    config.tension = Math.pow(2 * Math.PI / frequency, 2) * mass;\n    config.friction = 4 * Math.PI * damping * mass / frequency;\n  }\n\n  return config;\n} // Prevent a config from accidentally overriding new props.\n// This depends on which \"config\" props take precedence when defined.\n\n\nfunction sanitizeConfig(config, props) {\n  if (!is.und(props.decay)) {\n    config.duration = undefined;\n  } else {\n    var isTensionConfig = !is.und(props.tension) || !is.und(props.friction);\n\n    if (isTensionConfig || !is.und(props.frequency) || !is.und(props.damping) || !is.und(props.mass)) {\n      config.duration = undefined;\n      config.decay = undefined;\n    }\n\n    if (isTensionConfig) {\n      config.frequency = undefined;\n    }\n  }\n}\n\nvar emptyArray = [];\n/** @internal */\n\n/** An animation being executed by the frameloop */\n\nvar Animation = function Animation() {\n  _classCallCheck(this, Animation);\n\n  this.changed = false;\n  this.values = emptyArray;\n  this.toValues = null;\n  this.fromValues = emptyArray;\n  this.to = void 0;\n  this.from = void 0;\n  this.config = new AnimationConfig();\n  this.immediate = false;\n  this.onStart = void 0;\n  this.onChange = void 0;\n  this.onRest = [];\n}; // @see https://github.com/alexreardon/use-memo-one/pull/10\n\n\nvar useMemo = function useMemo(create, deps) {\n  return useMemoOne(create, deps || [{}]);\n};\n\nfunction callProp(value) {\n  for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    args[_key - 1] = arguments[_key];\n  }\n\n  return is.fun(value) ? value.apply(void 0, args) : value;\n}\n/** Try to coerce the given value into a boolean using the given key */\n\n\nvar matchProp = function matchProp(value, key) {\n  return value === true || !!(key && value && (is.fun(value) ? value(key) : toArray(value).includes(key)));\n};\n\nvar getProps = function getProps(props, i, arg) {\n  return props && (is.fun(props) ? props(i, arg) : is.arr(props) ? props[i] : _extends({}, props));\n};\n/** Returns `true` if the given prop is having its default value set. */\n\n\nvar hasDefaultProp = function hasDefaultProp(props, key) {\n  return !is.und(getDefaultProp(props, key));\n};\n/** Get the default value being set for the given `key` */\n\n\nvar getDefaultProp = function getDefaultProp(props, key) {\n  return props.default === true ? props[key] : props.default ? props.default[key] : undefined;\n};\n/**\n * Extract the default props from an update.\n *\n * When the `default` prop is falsy, this function still behaves as if\n * `default: true` was used. The `default` prop is always respected when\n * truthy.\n */\n\n\nvar getDefaultProps = function getDefaultProps(props) {\n  var omitKeys = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  var defaults = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var keys = DEFAULT_PROPS;\n\n  if (props.default && props.default !== true) {\n    props = props.default;\n    keys = Object.keys(props);\n  }\n\n  for (var _i = 0, _keys = keys; _i < _keys.length; _i++) {\n    var key = _keys[_i];\n    var value = props[key];\n\n    if (!is.und(value) && !omitKeys.includes(key)) {\n      defaults[key] = value;\n    }\n  }\n\n  return defaults;\n};\n/** Merge the default props of an update into a props cache. */\n\n\nvar mergeDefaultProps = function mergeDefaultProps(defaults, props, omitKeys) {\n  return getDefaultProps(props, omitKeys, defaults);\n};\n/** These props can have default values */\n\n\nvar DEFAULT_PROPS = ['pause', 'cancel', 'config', 'immediate', 'onDelayEnd', 'onProps', 'onStart', 'onChange', 'onRest'];\nvar RESERVED_PROPS = {\n  config: 1,\n  from: 1,\n  to: 1,\n  ref: 1,\n  loop: 1,\n  reset: 1,\n  pause: 1,\n  cancel: 1,\n  reverse: 1,\n  immediate: 1,\n  default: 1,\n  delay: 1,\n  onDelayEnd: 1,\n  onProps: 1,\n  onStart: 1,\n  onChange: 1,\n  onRest: 1,\n  // Transition props\n  items: 1,\n  trail: 1,\n  sort: 1,\n  expires: 1,\n  initial: 1,\n  enter: 1,\n  update: 1,\n  leave: 1,\n  children: 1,\n  // Internal props\n  keys: 1,\n  callId: 1,\n  parentId: 1\n};\n/**\n * Extract any properties whose keys are *not* reserved for customizing your\n * animations. All hooks use this function, which means `useTransition` props\n * are reserved for `useSpring` calls, etc.\n */\n\nfunction getForwardProps(props) {\n  var forward = {};\n  var count = 0;\n\n  _each(props, function (value, prop) {\n    if (!RESERVED_PROPS[prop]) {\n      forward[prop] = value;\n      count++;\n    }\n  });\n\n  if (count) {\n    return forward;\n  }\n}\n/**\n * Clone the given `props` and move all non-reserved props\n * into the `to` prop.\n */\n\n\nfunction inferTo(props) {\n  var to = getForwardProps(props);\n\n  if (to) {\n    var out = {\n      to: to\n    };\n\n    _each(props, function (val, key) {\n      return key in to || (out[key] = val);\n    });\n\n    return out;\n  }\n\n  return _extends({}, props);\n} // Compute the goal value, converting \"red\" to \"rgba(255, 0, 0, 1)\" in the process\n\n\nfunction computeGoal(value) {\n  var config = getFluidConfig(value);\n  return config ? computeGoal(config.get()) : is.arr(value) ? value.map(computeGoal) : isAnimatedString(value) ? createStringInterpolator({\n    range: [0, 1],\n    output: [value, value]\n  })(1) : value;\n}\n/**\n * This function sets a timeout if both the `delay` prop exists and\n * the `cancel` prop is not `true`.\n *\n * The `actions.start` function must handle the `cancel` prop itself,\n * but the `pause` prop is taken care of.\n */\n\n\nfunction scheduleProps(callId, _ref3) {\n  var key = _ref3.key,\n      props = _ref3.props,\n      state = _ref3.state,\n      actions = _ref3.actions;\n  return new Promise(function (resolve, reject) {\n    var delay;\n    var timeout;\n    var pause = false;\n    var cancel = matchProp(props.cancel, key);\n\n    if (cancel) {\n      onStart();\n    } else {\n      delay = callProp(props.delay || 0, key);\n      pause = matchProp(props.pause, key);\n\n      if (pause) {\n        state.resumeQueue.add(onResume);\n        actions.pause();\n      } else {\n        actions.resume();\n        onResume();\n      }\n    }\n\n    function onPause() {\n      state.resumeQueue.add(onResume);\n      timeout.cancel(); // Cache the remaining delay.\n\n      delay = timeout.time - Globals.now();\n    }\n\n    function onResume() {\n      if (delay > 0) {\n        state.pauseQueue.add(onPause);\n        timeout = Globals.frameLoop.setTimeout(onStart, delay);\n      } else {\n        onStart();\n      }\n    }\n\n    function onStart() {\n      state.pauseQueue.delete(onPause); // Maybe cancelled during its delay.\n\n      if (callId <= (state.cancelId || 0)) {\n        cancel = true;\n      }\n\n      try {\n        actions.start(_extends(_extends({}, props), {}, {\n          callId: callId,\n          delay: delay,\n          cancel: cancel,\n          pause: pause\n        }), resolve);\n      } catch (err) {\n        reject(err);\n      }\n    }\n  });\n}\n/** @internal */\n\n/** The object given to the `onRest` prop and `start` promise. */\n\n/** The promised result of an animation. */\n\n/** @internal */\n\n\nvar getCombinedResult = function getCombinedResult(target, results) {\n  return results.length == 1 ? results[0] : results.some(function (result) {\n    return result.cancelled;\n  }) ? getCancelledResult(target) : results.every(function (result) {\n    return result.noop;\n  }) ? getNoopResult(target) : getFinishedResult(target, results.every(function (result) {\n    return result.finished;\n  }));\n};\n/** No-op results are for updates that never start an animation. */\n\n\nvar getNoopResult = function getNoopResult(target) {\n  var value = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : target.get();\n  return {\n    value: value,\n    noop: true,\n    finished: true,\n    target: target\n  };\n};\n\nvar getFinishedResult = function getFinishedResult(target, finished) {\n  var value = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : target.get();\n  return {\n    value: value,\n    finished: finished,\n    target: target\n  };\n};\n\nvar getCancelledResult = function getCancelledResult(target) {\n  var value = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : target.get();\n  return {\n    value: value,\n    cancelled: true,\n    target: target\n  };\n};\n/**\n * Start an async chain or an async script.\n *\n * Always call `runAsync` in the action callback of a `scheduleProps` call.\n *\n * The `T` parameter can be a set of animated values (as an object type)\n * or a primitive type for a single animated value.\n */\n\n\nfunction runAsync(_x, _x2, _x3, _x4) {\n  return _runAsync.apply(this, arguments);\n}\n\nfunction _runAsync() {\n  _runAsync = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee6(to, props, state, target) {\n    var callId, parentId, onRest, prevTo, prevPromise;\n    return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n      while (1) {\n        switch (_context6.prev = _context6.next) {\n          case 0:\n            if (!props.pause) {\n              _context6.next = 3;\n              break;\n            }\n\n            _context6.next = 3;\n            return new Promise(function (resume) {\n              state.resumeQueue.add(resume);\n            });\n\n          case 3:\n            callId = props.callId, parentId = props.parentId, onRest = props.onRest;\n            prevTo = state.asyncTo, prevPromise = state.promise;\n\n            if (!(!parentId && to === prevTo && !props.reset)) {\n              _context6.next = 7;\n              break;\n            }\n\n            return _context6.abrupt(\"return\", prevPromise);\n\n          case 7:\n            return _context6.abrupt(\"return\", state.promise = _asyncToGenerator(\n            /*#__PURE__*/\n            _regeneratorRuntime.mark(function _callee5() {\n              var defaultProps, preventBail, bail, bailPromise, withBailHandler, bailIfEnded, animate, result, animating;\n              return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n                while (1) {\n                  switch (_context5.prev = _context5.next) {\n                    case 0:\n                      state.asyncId = callId;\n                      state.asyncTo = to; // The default props of any `animate` calls.\n\n                      defaultProps = getDefaultProps(props, [// The `onRest` prop is only called when the `runAsync` promise is resolved.\n                      'onRest']);\n                      // This promise is rejected when the animation is interrupted.\n                      bailPromise = new Promise(function (resolve, reject) {\n                        return preventBail = resolve, bail = reject;\n                      }); // Stop animating when an error is caught.\n\n                      withBailHandler = function withBailHandler(fn) {\n                        return function () {\n                          var onError = function onError(err) {\n                            if (err instanceof BailSignal) {\n                              bail(err); // Stop animating.\n                            }\n\n                            throw err;\n                          };\n\n                          try {\n                            return fn.apply(void 0, arguments).catch(onError);\n                          } catch (err) {\n                            onError(err);\n                          }\n                        };\n                      };\n\n                      bailIfEnded = function bailIfEnded(bailSignal) {\n                        var bailResult = // The `cancel` prop or `stop` method was used.\n                        callId <= (state.cancelId || 0) && getCancelledResult(target) || // The async `to` prop was replaced.\n                        callId !== state.asyncId && getFinishedResult(target, false);\n\n                        if (bailResult) {\n                          bailSignal.result = bailResult;\n                          throw bailSignal;\n                        }\n                      }; // Note: This function cannot use the `async` keyword, because we want the\n                      // `throw` statements to interrupt the caller.\n\n\n                      animate = withBailHandler(function (arg1, arg2) {\n                        var bailSignal = new BailSignal();\n                        bailIfEnded(bailSignal);\n                        var props = is.obj(arg1) ? _extends({}, arg1) : _extends(_extends({}, arg2), {}, {\n                          to: arg1\n                        });\n                        props.parentId = callId;\n\n                        _each(defaultProps, function (value, key) {\n                          if (is.und(props[key])) {\n                            props[key] = value;\n                          }\n                        });\n\n                        return target.start(props).then(\n                        /*#__PURE__*/\n                        function () {\n                          var _ref15 = _asyncToGenerator(\n                          /*#__PURE__*/\n                          _regeneratorRuntime.mark(function _callee3(result) {\n                            return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n                              while (1) {\n                                switch (_context3.prev = _context3.next) {\n                                  case 0:\n                                    bailIfEnded(bailSignal);\n\n                                    if (!target.is('PAUSED')) {\n                                      _context3.next = 4;\n                                      break;\n                                    }\n\n                                    _context3.next = 4;\n                                    return new Promise(function (resume) {\n                                      state.resumeQueue.add(resume);\n                                    });\n\n                                  case 4:\n                                    return _context3.abrupt(\"return\", result);\n\n                                  case 5:\n                                  case \"end\":\n                                    return _context3.stop();\n                                }\n                              }\n                            }, _callee3);\n                          }));\n\n                          return function (_x8) {\n                            return _ref15.apply(this, arguments);\n                          };\n                        }());\n                      });\n                      _context5.prev = 7;\n\n                      // Async sequence\n                      if (is.arr(to)) {\n                        animating = function () {\n                          var _ref16 = _asyncToGenerator(\n                          /*#__PURE__*/\n                          _regeneratorRuntime.mark(function _callee4(queue) {\n                            var _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _props2;\n\n                            return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n                              while (1) {\n                                switch (_context4.prev = _context4.next) {\n                                  case 0:\n                                    _iteratorNormalCompletion = true;\n                                    _didIteratorError = false;\n                                    _iteratorError = undefined;\n                                    _context4.prev = 3;\n                                    _iterator = queue[Symbol.iterator]();\n\n                                  case 5:\n                                    if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {\n                                      _context4.next = 12;\n                                      break;\n                                    }\n\n                                    _props2 = _step.value;\n                                    _context4.next = 9;\n                                    return animate(_props2);\n\n                                  case 9:\n                                    _iteratorNormalCompletion = true;\n                                    _context4.next = 5;\n                                    break;\n\n                                  case 12:\n                                    _context4.next = 18;\n                                    break;\n\n                                  case 14:\n                                    _context4.prev = 14;\n                                    _context4.t0 = _context4[\"catch\"](3);\n                                    _didIteratorError = true;\n                                    _iteratorError = _context4.t0;\n\n                                  case 18:\n                                    _context4.prev = 18;\n                                    _context4.prev = 19;\n\n                                    if (!_iteratorNormalCompletion && _iterator.return != null) {\n                                      _iterator.return();\n                                    }\n\n                                  case 21:\n                                    _context4.prev = 21;\n\n                                    if (!_didIteratorError) {\n                                      _context4.next = 24;\n                                      break;\n                                    }\n\n                                    throw _iteratorError;\n\n                                  case 24:\n                                    return _context4.finish(21);\n\n                                  case 25:\n                                    return _context4.finish(18);\n\n                                  case 26:\n                                  case \"end\":\n                                    return _context4.stop();\n                                }\n                              }\n                            }, _callee4, null, [[3, 14, 18, 26], [19,, 21, 25]]);\n                          }));\n\n                          return function (_x9) {\n                            return _ref16.apply(this, arguments);\n                          };\n                        }()(to);\n                      } // Async script\n                      else if (is.fun(to)) {\n                          animating = Promise.resolve(to(animate, target.stop.bind(target)));\n                        }\n\n                      _context5.next = 11;\n                      return Promise.all([animating.then(preventBail), bailPromise]);\n\n                    case 11:\n                      result = getFinishedResult(target, true); // Bail handling\n\n                      _context5.next = 21;\n                      break;\n\n                    case 14:\n                      _context5.prev = 14;\n                      _context5.t0 = _context5[\"catch\"](7);\n\n                      if (!(_context5.t0 instanceof BailSignal)) {\n                        _context5.next = 20;\n                        break;\n                      }\n\n                      result = _context5.t0.result;\n                      _context5.next = 21;\n                      break;\n\n                    case 20:\n                      throw _context5.t0;\n\n                    case 21:\n                      _context5.prev = 21;\n\n                      if (callId == state.asyncId) {\n                        state.asyncId = parentId;\n                        state.asyncTo = parentId ? prevTo : undefined;\n                        state.promise = parentId ? prevPromise : undefined;\n                      }\n\n                      return _context5.finish(21);\n\n                    case 24:\n                      if (is.fun(onRest)) {\n                        batchedUpdates(function () {\n                          onRest(result);\n                        });\n                      }\n\n                      return _context5.abrupt(\"return\", result);\n\n                    case 26:\n                    case \"end\":\n                      return _context5.stop();\n                  }\n                }\n              }, _callee5, null, [[7, 14, 21, 24]]);\n            }))());\n\n          case 8:\n          case \"end\":\n            return _context6.stop();\n        }\n      }\n    }, _callee6);\n  }));\n  return _runAsync.apply(this, arguments);\n}\n\nfunction cancelAsync(state, callId) {\n  state.cancelId = callId;\n  state.asyncId = state.asyncTo = state.promise = undefined;\n}\n/** This error is thrown to signal an interrupted async animation. */\n\n\nvar BailSignal =\n/*#__PURE__*/\nfunction (_Error) {\n  _inherits(BailSignal, _Error);\n\n  function BailSignal() {\n    var _this;\n\n    _classCallCheck(this, BailSignal);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(BailSignal).call(this, 'An async animation has been interrupted. You see this error because you ' + 'forgot to use `await` or `.catch(...)` on its returned promise.'));\n    _this.result = void 0;\n    return _this;\n  }\n\n  return BailSignal;\n}(_wrapNativeSuper(Error));\n\nvar isFrameValue = function isFrameValue(value) {\n  return value instanceof FrameValue;\n};\n\nvar nextId = 1;\n/**\n * A kind of `FluidValue` that manages an `AnimatedValue` node.\n *\n * Its underlying value can be accessed and even observed.\n */\n\nvar FrameValue =\n/*#__PURE__*/\nfunction (_FluidValue) {\n  _inherits(FrameValue, _FluidValue);\n\n  function FrameValue() {\n    var _getPrototypeOf2;\n\n    var _this2;\n\n    _classCallCheck(this, FrameValue);\n\n    for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      args[_key2] = arguments[_key2];\n    }\n\n    _this2 = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(FrameValue)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this2.id = nextId++;\n    _this2.key = void 0;\n    _this2._priority = 0;\n    _this2._children = new Set();\n    return _this2;\n  }\n\n  _createClass(FrameValue, [{\n    key: \"get\",\n\n    /** Get the current value */\n    value: function get() {\n      var node = getAnimated(this);\n      return node && node.getValue();\n    }\n    /** Create a spring that maps our value to another value */\n\n  }, {\n    key: \"to\",\n    value: function to() {\n      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n        args[_key3] = arguments[_key3];\n      }\n\n      return to$1(this, args);\n    }\n    /** @deprecated Use the `to` method instead. */\n\n  }, {\n    key: \"interpolate\",\n    value: function interpolate() {\n      deprecateInterpolate();\n\n      for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n        args[_key4] = arguments[_key4];\n      }\n\n      return to$1(this, args);\n    }\n    /** @internal */\n\n    /** @internal */\n\n  }, {\n    key: \"addChild\",\n    value: function addChild(child) {\n      if (!this._children.size) this._attach();\n\n      this._children.add(child);\n    }\n    /** @internal */\n\n  }, {\n    key: \"removeChild\",\n    value: function removeChild(child) {\n      this._children.delete(child);\n\n      if (!this._children.size) this._detach();\n    }\n    /** @internal */\n\n  }, {\n    key: \"onParentChange\",\n    value: function onParentChange(_ref4) {\n      var type = _ref4.type;\n\n      if (this.idle) {\n        // Start animating when a parent does.\n        if (type == 'start') {\n          this._reset();\n\n          this._start();\n        }\n      } // Reset our animation state when a parent does, but only when\n      // our animation is active.\n      else if (type == 'reset') {\n          this._reset();\n        }\n    }\n    /** Called when the first child is added. */\n\n  }, {\n    key: \"_attach\",\n    value: function _attach() {}\n    /** Called when the last child is removed. */\n\n  }, {\n    key: \"_detach\",\n    value: function _detach() {}\n    /**\n     * Reset our animation state (eg: start values, velocity, etc)\n     * and tell our children to do the same.\n     *\n     * This is called when our goal value is changed during (or before)\n     * an animation.\n     */\n\n  }, {\n    key: \"_reset\",\n    value: function _reset() {\n      this._emit({\n        type: 'reset',\n        parent: this\n      });\n    }\n    /**\n     * Start animating if possible.\n     *\n     * Note: Be sure to call `_reset` first, or the animation will break.\n     * This method would like to call `_reset` for you, but that would\n     * interfere with paused animations.\n     */\n\n  }, {\n    key: \"_start\",\n    value: function _start() {\n      this._emit({\n        type: 'start',\n        parent: this\n      });\n    }\n    /** Tell our children about our new value */\n\n  }, {\n    key: \"_onChange\",\n    value: function _onChange(value) {\n      var idle = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n      this._emit({\n        type: 'change',\n        parent: this,\n        value: value,\n        idle: idle\n      });\n    }\n    /** Tell our children about our new priority */\n\n  }, {\n    key: \"_onPriorityChange\",\n    value: function _onPriorityChange(priority) {\n      if (!this.idle) {\n        // Make the frameloop aware of our new priority.\n        frameLoop.start(this);\n      }\n\n      this._emit({\n        type: 'priority',\n        parent: this,\n        priority: priority\n      });\n    }\n  }, {\n    key: \"_emit\",\n    value: function _emit(event) {\n      // Clone \"_children\" so it can be safely mutated inside the loop.\n      _each(Array.from(this._children), function (child) {\n        child.onParentChange(event);\n      });\n    }\n  }, {\n    key: \"priority\",\n    get: function get() {\n      return this._priority;\n    },\n    set: function set(priority) {\n      if (this._priority != priority) {\n        this._priority = priority;\n\n        this._onPriorityChange(priority);\n      }\n    }\n  }]);\n\n  return FrameValue;\n}(FluidValue); // TODO: use \"const enum\" when Babel supports it\n\n/** The spring has not animated yet */\n\n\nvar CREATED = 'CREATED';\n/** The spring has animated before */\n\nvar IDLE = 'IDLE';\n/** The spring is animating */\n\nvar ACTIVE = 'ACTIVE';\n/** The spring is frozen in time */\n\nvar PAUSED = 'PAUSED';\n/** The spring cannot be animated */\n\nvar DISPOSED = 'DISPOSED';\n/**\n * Only numbers, strings, and arrays of numbers/strings are supported.\n * Non-animatable strings are also supported.\n */\n\nvar SpringValue =\n/*#__PURE__*/\nfunction (_FrameValue) {\n  _inherits(SpringValue, _FrameValue);\n\n  /** The property name used when `to` or `from` is an object. Useful when debugging too. */\n\n  /** The animation state */\n\n  /** The queue of pending props */\n\n  /** The lifecycle phase of this spring */\n\n  /** The state for `runAsync` calls */\n\n  /** Some props have customizable default values */\n\n  /** The counter for tracking `scheduleProps` calls */\n\n  /** The last `scheduleProps` call that changed the `to` prop */\n  function SpringValue(arg1, arg2) {\n    var _this3;\n\n    _classCallCheck(this, SpringValue);\n\n    _this3 = _possibleConstructorReturn(this, _getPrototypeOf(SpringValue).call(this));\n    _this3.key = void 0;\n    _this3.animation = new Animation();\n    _this3.queue = void 0;\n    _this3._phase = CREATED;\n    _this3._state = {\n      pauseQueue: new Set(),\n      resumeQueue: new Set()\n    };\n    _this3._defaultProps = {};\n    _this3._lastCallId = 0;\n    _this3._lastToId = 0;\n\n    if (!is.und(arg1) || !is.und(arg2)) {\n      var props = is.obj(arg1) ? _extends({}, arg1) : _extends(_extends({}, arg2), {}, {\n        from: arg1\n      });\n      props.default = true;\n\n      _this3.start(props);\n    }\n\n    return _this3;\n  }\n\n  _createClass(SpringValue, [{\n    key: \"advance\",\n\n    /** Advance the current animation by a number of milliseconds */\n    value: function advance(dt) {\n      var _this4 = this;\n\n      var idle = true;\n      var changed = false;\n      var anim = this.animation;\n      var config = anim.config,\n          toValues = anim.toValues;\n      var payload = getPayload(anim.to);\n\n      if (!payload) {\n        var toConfig = getFluidConfig(anim.to);\n\n        if (toConfig) {\n          toValues = toArray(toConfig.get());\n        }\n      }\n\n      anim.values.forEach(function (node, i) {\n        if (node.done) return; // The \"anim.toValues\" array must exist when no parent exists.\n\n        var to = payload ? payload[i].lastPosition : toValues[i];\n        var finished = anim.immediate;\n        var position = to;\n\n        if (!finished) {\n          position = node.lastPosition; // Loose springs never move.\n\n          if (config.tension <= 0) {\n            node.done = true;\n            return;\n          }\n\n          var elapsed = node.elapsedTime += dt;\n          var from = anim.fromValues[i];\n          var v0 = node.v0 != null ? node.v0 : node.v0 = is.arr(config.velocity) ? config.velocity[i] : config.velocity;\n          var velocity; // Duration easing\n\n          if (!is.und(config.duration)) {\n            var p = config.progress || 0;\n            if (config.duration <= 0) p = 1;else p += (1 - p) * Math.min(1, elapsed / config.duration);\n            position = from + config.easing(p) * (to - from);\n            velocity = (position - node.lastPosition) / dt;\n            finished = p == 1;\n          } // Decay easing\n          else if (config.decay) {\n              var decay = config.decay === true ? 0.998 : config.decay;\n              var e = Math.exp(-(1 - decay) * elapsed);\n              position = from + v0 / (1 - decay) * (1 - e);\n              finished = Math.abs(node.lastPosition - position) < 0.1; // derivative of position\n\n              velocity = v0 * e;\n            } // Spring easing\n            else {\n                velocity = node.lastVelocity == null ? v0 : node.lastVelocity;\n                /** The smallest distance from a value before being treated like said value. */\n\n                var precision = config.precision || (from == to ? 0.005 : Math.min(1, Math.abs(to - from) * 0.001));\n                /** The velocity at which movement is essentially none */\n\n                var restVelocity = config.restVelocity || precision / 10; // Bouncing is opt-in (not to be confused with overshooting)\n\n                var bounceFactor = config.clamp ? 0 : config.bounce;\n                var canBounce = !is.und(bounceFactor);\n                /** When `true`, the value is increasing over time */\n\n                var isGrowing = from == to ? node.v0 > 0 : from < to;\n                /** When `true`, the velocity is considered moving */\n\n                var isMoving;\n                /** When `true`, the velocity is being deflected or clamped */\n\n                var isBouncing = false;\n                var step = 1; // 1ms\n\n                var numSteps = Math.ceil(dt / step);\n\n                for (var n = 0; n < numSteps; ++n) {\n                  isMoving = Math.abs(velocity) > restVelocity;\n\n                  if (!isMoving) {\n                    finished = Math.abs(to - position) <= precision;\n\n                    if (finished) {\n                      break;\n                    }\n                  }\n\n                  if (canBounce) {\n                    isBouncing = position == to || position > to == isGrowing; // Invert the velocity with a magnitude, or clamp it.\n\n                    if (isBouncing) {\n                      velocity = -velocity * bounceFactor;\n                      position = to;\n                    }\n                  }\n\n                  var springForce = -config.tension * 0.000001 * (position - to);\n                  var dampingForce = -config.friction * 0.001 * velocity;\n                  var acceleration = (springForce + dampingForce) / config.mass; // pt/ms^2\n\n                  velocity = velocity + acceleration * step; // pt/ms\n\n                  position = position + velocity * step;\n                }\n              }\n\n          node.lastVelocity = velocity;\n\n          if (Number.isNaN(position)) {\n            console.warn(\"Got NaN while animating:\", _this4);\n            finished = true;\n          }\n        } // Parent springs must finish before their children can.\n\n\n        if (payload && !payload[i].done) {\n          finished = false;\n        }\n\n        if (finished) {\n          node.done = true;\n        } else {\n          idle = false;\n        }\n\n        if (node.setValue(position, config.round)) {\n          changed = true;\n        }\n      });\n\n      if (idle) {\n        this.finish();\n      } else if (changed) {\n        this._onChange(this.get());\n      }\n\n      return idle;\n    }\n    /** Check the current phase */\n\n  }, {\n    key: \"is\",\n    value: function is(phase) {\n      return this._phase == phase;\n    }\n    /** Set the current value, while stopping the current animation */\n\n  }, {\n    key: \"set\",\n    value: function set(value) {\n      var _this5 = this;\n\n      batchedUpdates(function () {\n        _this5._focus(value);\n\n        if (_this5._set(value)) {\n          // Ensure change observers are notified. When active,\n          // the \"_stop\" method handles this.\n          if (!_this5.is(ACTIVE)) {\n            return _this5._onChange(_this5.get(), true);\n          }\n        }\n\n        _this5._stop();\n      });\n      return this;\n    }\n    /**\n     * Freeze the active animation in time.\n     * This does nothing when not animating.\n     */\n\n  }, {\n    key: \"pause\",\n    value: function pause() {\n      checkDisposed(this, 'pause');\n\n      if (!this.is(PAUSED)) {\n        this._phase = PAUSED;\n        flush(this._state.pauseQueue, function (onPause) {\n          return onPause();\n        });\n      }\n    }\n    /** Resume the animation if paused. */\n\n  }, {\n    key: \"resume\",\n    value: function resume() {\n      checkDisposed(this, 'resume');\n\n      if (this.is(PAUSED)) {\n        this._start();\n\n        flush(this._state.resumeQueue, function (onResume) {\n          return onResume();\n        });\n      }\n    }\n    /**\n     * Skip to the end of the current animation.\n     *\n     * All `onRest` callbacks are passed `{finished: true}`\n     */\n\n  }, {\n    key: \"finish\",\n    value: function finish(to) {\n      var _this6 = this;\n\n      this.resume();\n\n      if (this.is(ACTIVE)) {\n        var anim = this.animation; // Decay animations have an implicit goal.\n\n        if (!anim.config.decay && is.und(to)) {\n          to = anim.to;\n        } // Set the value if we can.\n\n\n        if (!is.und(to)) {\n          this._set(to);\n        }\n\n        batchedUpdates(function () {\n          // Ensure the \"onStart\" and \"onRest\" props are called.\n          if (!anim.changed) {\n            anim.changed = true;\n\n            if (anim.onStart) {\n              anim.onStart(_this6);\n            }\n          } // Exit the frameloop.\n\n\n          _this6._stop();\n        });\n      }\n\n      return this;\n    }\n    /** Push props into the pending queue. */\n\n  }, {\n    key: \"update\",\n    value: function update(props) {\n      checkDisposed(this, 'update');\n      var queue = this.queue || (this.queue = []);\n      queue.push(props);\n      return this;\n    }\n    /**\n     * Update this value's animation using the queue of pending props,\n     * and unpause the current animation (if one is frozen).\n     *\n     * When arguments are passed, a new animation is created, and the\n     * queued animations are left alone.\n     */\n\n  }, {\n    key: \"start\",\n    value: function () {\n      var _start2 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(to, arg2) {\n        var _this7 = this;\n\n        var queue, results;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                checkDisposed(this, 'start');\n\n                if (!is.und(to)) {\n                  queue = [is.obj(to) ? to : _extends(_extends({}, arg2), {}, {\n                    to: to\n                  })];\n                } else {\n                  queue = this.queue || [];\n                  this.queue = [];\n                }\n\n                _context.next = 4;\n                return Promise.all(queue.map(function (props) {\n                  return _this7._update(props);\n                }));\n\n              case 4:\n                results = _context.sent;\n                return _context.abrupt(\"return\", getCombinedResult(this, results));\n\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function start(_x5, _x6) {\n        return _start2.apply(this, arguments);\n      }\n\n      return start;\n    }()\n    /**\n     * Stop the current animation, and cancel any delayed updates.\n     *\n     * Pass `true` to call `onRest` with `cancelled: true`.\n     */\n\n  }, {\n    key: \"stop\",\n    value: function stop(cancel) {\n      var _this8 = this;\n\n      if (!this.is(DISPOSED)) {\n        cancelAsync(this._state, this._lastCallId); // Ensure the `to` value equals the current value.\n\n        this._focus(this.get()); // Exit the frameloop and notify `onRest` listeners.\n\n\n        batchedUpdates(function () {\n          return _this8._stop(cancel);\n        });\n      }\n\n      return this;\n    }\n    /** Restart the animation. */\n\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      this._update({\n        reset: true\n      });\n    }\n    /** Prevent future animations, and stop the current animation */\n\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      if (!this.is(DISPOSED)) {\n        if (this.animation) {\n          // Prevent \"onRest\" calls when disposed.\n          this.animation.onRest = [];\n        }\n\n        this.stop();\n        this._phase = DISPOSED;\n      }\n    }\n    /** @internal */\n\n  }, {\n    key: \"onParentChange\",\n    value: function onParentChange(event) {\n      _get(_getPrototypeOf(SpringValue.prototype), \"onParentChange\", this).call(this, event);\n\n      if (event.type == 'change') {\n        if (!this.is(ACTIVE)) {\n          this._reset();\n\n          if (!this.is(PAUSED)) {\n            this._start();\n          }\n        }\n      } else if (event.type == 'priority') {\n        this.priority = event.priority + 1;\n      }\n    }\n    /**\n     * Parse the `to` and `from` range from the given `props` object.\n     *\n     * This also ensures the initial value is available to animated components\n     * during the render phase.\n     */\n\n  }, {\n    key: \"_prepareNode\",\n    value: function _prepareNode(_ref5) {\n      var to = _ref5.to,\n          from = _ref5.from,\n          reverse = _ref5.reverse;\n      var key = this.key || '';\n      to = !is.obj(to) || getFluidConfig(to) ? to : to[key];\n      from = !is.obj(from) || getFluidConfig(from) ? from : from[key]; // Create the range now to avoid \"reverse\" logic.\n\n      var range = {\n        to: to,\n        from: from\n      }; // Before ever animating, this method ensures an `Animated` node\n      // exists and keeps its value in sync with the \"from\" prop.\n\n      if (this.is(CREATED)) {\n        if (reverse) {\n          var _ref6 = [from, to];\n          to = _ref6[0];\n          from = _ref6[1];\n        }\n\n        from = getFluidValue(from);\n\n        var node = this._updateNode(is.und(from) ? getFluidValue(to) : from);\n\n        if (node && !is.und(from)) {\n          node.setValue(from);\n        }\n      }\n\n      return range;\n    }\n    /**\n     * Create an `Animated` node if none exists or the given value has an\n     * incompatible type. Do nothing if `value` is undefined.\n     *\n     * The newest `Animated` node is returned.\n     */\n\n  }, {\n    key: \"_updateNode\",\n    value: function _updateNode(value) {\n      var node = getAnimated(this);\n\n      if (!is.und(value)) {\n        var nodeType = this._getNodeType(value);\n\n        if (!node || node.constructor !== nodeType) {\n          setAnimated(this, node = nodeType.create(value));\n        }\n      }\n\n      return node;\n    }\n    /** Return the `Animated` node constructor for a given value */\n\n  }, {\n    key: \"_getNodeType\",\n    value: function _getNodeType(value) {\n      var parentNode = getAnimated(value);\n      return parentNode ? parentNode.constructor : is.arr(value) ? AnimatedArray : isAnimatedString(value) ? AnimatedString : AnimatedValue;\n    }\n    /** Schedule an animation to run after an optional delay */\n\n  }, {\n    key: \"_update\",\n    value: function _update(props, isLoop) {\n      var _this9 = this;\n\n      var defaultProps = this._defaultProps;\n\n      var mergeDefaultProp = function mergeDefaultProp(key) {\n        var value = getDefaultProp(props, key);\n\n        if (!is.und(value)) {\n          defaultProps[key] = value;\n        } // For `cancel` and `pause`, a truthy default always wins.\n\n\n        if (defaultProps[key]) {\n          props[key] = defaultProps[key];\n        }\n      }; // These props are coerced into booleans by the `scheduleProps` function,\n      // so they need their default values processed before then.\n\n\n      mergeDefaultProp('cancel');\n      mergeDefaultProp('pause'); // Ensure the initial value can be accessed by animated components.\n\n      var range = this._prepareNode(props);\n\n      return scheduleProps(++this._lastCallId, {\n        key: this.key,\n        props: props,\n        state: this._state,\n        actions: {\n          pause: this.pause.bind(this),\n          resume: this.resume.bind(this),\n          start: this._merge.bind(this, range)\n        }\n      }).then(function (result) {\n        if (props.loop && result.finished && !(isLoop && result.noop)) {\n          var nextProps = createLoopUpdate(props);\n\n          if (nextProps) {\n            return _this9._update(nextProps, true);\n          }\n        }\n\n        return result;\n      });\n    }\n    /** Merge props into the current animation */\n\n  }, {\n    key: \"_merge\",\n    value: function _merge(range, props, resolve) {\n      // The \"cancel\" prop cancels all pending delays and it forces the\n      // active animation to stop where it is.\n      if (props.cancel) {\n        this.stop(true);\n        return resolve(getCancelledResult(this));\n      }\n\n      var key = this.key,\n          anim = this.animation;\n      var defaultProps = this._defaultProps;\n      /** The \"to\" prop is defined. */\n\n      var hasToProp = !is.und(range.to);\n      /** The \"from\" prop is defined. */\n\n      var hasFromProp = !is.und(range.from); // Avoid merging other props if implicitly prevented, except\n      // when both the \"to\" and \"from\" props are undefined.\n\n      if (hasToProp || hasFromProp) {\n        if (props.callId > this._lastToId) {\n          this._lastToId = props.callId;\n        } else {\n          return resolve(getCancelledResult(this));\n        }\n      }\n      /** Get the value of a prop, or its default value */\n\n\n      var get = function get(prop) {\n        return !is.und(props[prop]) ? props[prop] : defaultProps[prop];\n      }; // Call \"onDelayEnd\" before merging props, but after cancellation checks.\n\n\n      var onDelayEnd = coerceEventProp(get('onDelayEnd'), key);\n\n      if (onDelayEnd) {\n        onDelayEnd(props, this);\n      }\n\n      if (props.default) {\n        mergeDefaultProps(defaultProps, props, ['pause', 'cancel']);\n      }\n\n      var prevTo = anim.to,\n          prevFrom = anim.from;\n      var _range$to = range.to,\n          to = _range$to === void 0 ? prevTo : _range$to,\n          _range$from = range.from,\n          from = _range$from === void 0 ? prevFrom : _range$from; // Focus the \"from\" value if changing without a \"to\" value.\n\n      if (hasFromProp && !hasToProp) {\n        to = from;\n      } // Flip the current range if \"reverse\" is true.\n\n\n      if (props.reverse) {\n        var _ref7 = [from, to];\n        to = _ref7[0];\n        from = _ref7[1];\n      }\n      /** The \"from\" value is changing. */\n\n\n      var hasFromChanged = !isEqual(from, prevFrom);\n\n      if (hasFromChanged) {\n        anim.from = from;\n      }\n      /** The \"to\" value is changing. */\n\n\n      var hasToChanged = !isEqual(to, prevTo);\n\n      if (hasToChanged) {\n        this._focus(to);\n      } // Both \"from\" and \"to\" can use a fluid config (thanks to http://npmjs.org/fluids).\n\n\n      var toConfig = getFluidConfig(to);\n      var fromConfig = getFluidConfig(from);\n\n      if (fromConfig) {\n        from = fromConfig.get();\n      }\n      /** The \"to\" prop is async. */\n\n\n      var hasAsyncTo = is.arr(props.to) || is.fun(props.to);\n      var config = anim.config;\n      var decay = config.decay,\n          velocity = config.velocity; // The \"runAsync\" function treats the \"config\" prop as a default,\n      // so we must avoid merging it when the \"to\" prop is async.\n\n      if (props.config && !hasAsyncTo) {\n        mergeConfig(config, callProp(props.config, key), // Avoid calling the same \"config\" prop twice.\n        props.config !== defaultProps.config ? callProp(defaultProps.config, key) : void 0);\n      } // This instance might not have its Animated node yet. For example,\n      // the constructor can be given props without a \"to\" or \"from\" value.\n\n\n      var node = getAnimated(this);\n\n      if (!node || is.und(to)) {\n        return resolve(getFinishedResult(this, true));\n      }\n      /** When true, start at the \"from\" value. */\n\n\n      var reset = // When `reset` is undefined, the `from` prop implies `reset: true`,\n      // except for declarative updates. When `reset` is defined, there\n      // must exist a value to animate from.\n      is.und(props.reset) ? hasFromProp && !props.default : !is.und(from) && matchProp(props.reset, key); // The current value, where the animation starts from.\n\n      var value = reset ? from : this.get(); // The animation ends at this value, unless \"to\" is fluid.\n\n      var goal = computeGoal(to); // Only specific types can be animated to/from.\n\n      var isAnimatable = is.num(goal) || is.arr(goal) || isAnimatedString(goal); // When true, the value changes instantly on the next frame.\n\n      var immediate = !hasAsyncTo && (!isAnimatable || matchProp(defaultProps.immediate || props.immediate, key));\n\n      if (hasToChanged) {\n        if (immediate) {\n          node = this._updateNode(goal);\n        } else {\n          var nodeType = this._getNodeType(to);\n\n          if (nodeType !== node.constructor) {\n            throw Error(\"Cannot animate between \" + node.constructor.name + \" and \" + nodeType.name + \", as the \\\"to\\\" prop suggests\");\n          }\n        }\n      } // The type of Animated node for the goal value.\n\n\n      var goalType = node.constructor; // When the goal value is fluid, we don't know if its value\n      // will change before the next animation frame, so it always\n      // starts the animation to be safe.\n\n      var started = !!toConfig;\n      var finished = false;\n\n      if (!started) {\n        // When true, the current value has probably changed.\n        var hasValueChanged = reset || this.is(CREATED) && hasFromChanged; // When the \"to\" value or current value are changed,\n        // start animating if not already finished.\n\n        if (hasToChanged || hasValueChanged) {\n          finished = isEqual(computeGoal(value), goal);\n          started = !finished;\n        } // Changing \"decay\" or \"velocity\" starts the animation.\n\n\n        if (!isEqual(config.decay, decay) || !isEqual(config.velocity, velocity)) {\n          started = true;\n        }\n      } // When an active animation changes its goal to its current value:\n\n\n      if (finished && this.is(ACTIVE)) {\n        // Avoid an abrupt stop unless the animation is being reset.\n        if (anim.changed && !reset) {\n          started = true;\n        } // Stop the animation before its first frame.\n        else if (!started) {\n            this._stop();\n          }\n      }\n\n      if (!hasAsyncTo) {\n        // Make sure our \"toValues\" are updated even if our previous\n        // \"to\" prop is a fluid value whose current value is also ours.\n        if (started || getFluidConfig(prevTo)) {\n          anim.values = node.getPayload();\n          anim.toValues = toConfig ? null : goalType == AnimatedString ? [1] : toArray(goal);\n        }\n\n        anim.immediate = immediate;\n        anim.onStart = coerceEventProp(get('onStart'), key);\n        anim.onChange = coerceEventProp(get('onChange'), key); // The \"reset\" prop tries to reuse the old \"onRest\" prop,\n        // unless you defined a new \"onRest\" prop.\n\n        var onRestQueue = anim.onRest;\n        var onRest = reset && !props.onRest ? onRestQueue[0] || noop : checkFinishedOnRest(coerceEventProp(get('onRest'), key), this); // In most cases, the animation after this one won't reuse our\n        // \"onRest\" prop. Instead, the _default_ \"onRest\" prop is used\n        // when the next animation has an undefined \"onRest\" prop.\n\n        if (started) {\n          anim.onRest = [onRest, checkFinishedOnRest(resolve, this)]; // Flush the \"onRest\" queue for the previous animation.\n\n          var onRestIndex = reset ? 0 : 1;\n\n          if (onRestIndex < onRestQueue.length) {\n            batchedUpdates(function () {\n              for (; onRestIndex < onRestQueue.length; onRestIndex++) {\n                onRestQueue[onRestIndex]();\n              }\n            });\n          }\n        } // The \"onRest\" prop is always first, and it can be updated even\n        // if a new animation is not started by this update.\n        else if (reset || props.onRest) {\n            anim.onRest[0] = onRest;\n          }\n      } // By this point, every prop has been merged.\n\n\n      var onProps = coerceEventProp(get('onProps'), key);\n\n      if (onProps) {\n        onProps(props, this);\n      } // Update our node even if the animation is idle.\n\n\n      if (reset) {\n        node.setValue(value);\n      }\n\n      if (hasAsyncTo) {\n        resolve(runAsync(props.to, props, this._state, this));\n      } // Start an animation\n      else if (started) {\n          // Must be idle for \"onStart\" to be called again.\n          if (reset) this._phase = IDLE;\n\n          this._reset();\n\n          this._start();\n        } // Postpone promise resolution until the animation is finished,\n        // so that no-op updates still resolve at the expected time.\n        else if (this.is(ACTIVE) && !hasToChanged) {\n            anim.onRest.push(checkFinishedOnRest(resolve, this));\n          } // Resolve our promise immediately.\n          else {\n              resolve(getNoopResult(this, value));\n            }\n    }\n    /** Update the `animation.to` value, which might be a `FluidValue` */\n\n  }, {\n    key: \"_focus\",\n    value: function _focus(value) {\n      var anim = this.animation;\n\n      if (value !== anim.to) {\n        var _config = getFluidConfig(anim.to);\n\n        if (_config) {\n          _config.removeChild(this);\n        }\n\n        anim.to = value;\n        var priority = 0;\n\n        if (_config = getFluidConfig(value)) {\n          _config.addChild(this);\n\n          if (isFrameValue(value)) {\n            priority = (value.priority || 0) + 1;\n          }\n        }\n\n        this.priority = priority;\n      }\n    }\n    /** Set the current value and our `node` if necessary. The `_onChange` method is *not* called. */\n\n  }, {\n    key: \"_set\",\n    value: function _set(value) {\n      var config = getFluidConfig(value);\n\n      if (config) {\n        value = config.get();\n      }\n\n      var node = getAnimated(this);\n      var oldValue = node && node.getValue();\n\n      if (node) {\n        node.setValue(value);\n      } else {\n        this._updateNode(value);\n      }\n\n      return !isEqual(value, oldValue);\n    }\n  }, {\n    key: \"_onChange\",\n    value: function _onChange(value) {\n      var idle = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var anim = this.animation; // The \"onStart\" prop is called on the first change after entering the\n      // frameloop, but never for immediate animations.\n\n      if (!anim.changed && !idle) {\n        anim.changed = true;\n\n        if (anim.onStart) {\n          anim.onStart(this);\n        }\n      }\n\n      if (anim.onChange) {\n        anim.onChange(value, this);\n      }\n\n      _get(_getPrototypeOf(SpringValue.prototype), \"_onChange\", this).call(this, value, idle);\n    }\n  }, {\n    key: \"_reset\",\n    value: function _reset() {\n      var anim = this.animation; // Reset the state of each Animated node.\n\n      getAnimated(this).reset(anim.to); // Ensure the `onStart` prop will be called.\n\n      if (!this.is(ACTIVE)) {\n        anim.changed = false;\n      } // Use the current values as the from values.\n\n\n      if (!anim.immediate) {\n        anim.fromValues = anim.values.map(function (node) {\n          return node.lastPosition;\n        });\n      }\n\n      _get(_getPrototypeOf(SpringValue.prototype), \"_reset\", this).call(this);\n    }\n  }, {\n    key: \"_start\",\n    value: function _start() {\n      if (!this.is(ACTIVE)) {\n        this._phase = ACTIVE;\n\n        _get(_getPrototypeOf(SpringValue.prototype), \"_start\", this).call(this); // The \"skipAnimation\" global avoids the frameloop.\n\n\n        if (skipAnimation) {\n          this.finish();\n        } else {\n          frameLoop.start(this);\n        }\n      }\n    }\n    /**\n     * Exit the frameloop and notify `onRest` listeners.\n     *\n     * Always wrap `_stop` calls with `batchedUpdates`.\n     */\n\n  }, {\n    key: \"_stop\",\n    value: function _stop(cancel) {\n      this.resume();\n\n      if (this.is(ACTIVE)) {\n        this._phase = IDLE; // Always let change observers know when a spring becomes idle.\n\n        this._onChange(this.get(), true);\n\n        var anim = this.animation;\n\n        _each(anim.values, function (node) {\n          node.done = true;\n        });\n\n        var onRestQueue = anim.onRest;\n\n        if (onRestQueue.length) {\n          // Preserve the \"onRest\" prop when the goal is dynamic.\n          anim.onRest = [anim.toValues ? noop : onRestQueue[0]]; // Never call the \"onRest\" prop for no-op animations.\n\n          if (!anim.changed) {\n            onRestQueue[0] = noop;\n          }\n\n          _each(onRestQueue, function (onRest) {\n            return onRest(cancel);\n          });\n        }\n      }\n    }\n  }, {\n    key: \"idle\",\n    get: function get() {\n      return !this.is(ACTIVE) && !this._state.asyncTo;\n    }\n  }, {\n    key: \"goal\",\n    get: function get() {\n      return getFluidValue(this.animation.to);\n    }\n  }, {\n    key: \"velocity\",\n    get: function get() {\n      var node = getAnimated(this);\n      return node instanceof AnimatedValue ? node.lastVelocity || 0 : node.getPayload().map(function (node) {\n        return node.lastVelocity || 0;\n      });\n    }\n  }]);\n\n  return SpringValue;\n}(FrameValue);\n\nfunction checkDisposed(spring, name) {\n  if (spring.is(DISPOSED)) {\n    throw Error(\"Cannot call \\\"\" + name + \"\\\" of disposed \\\"\" + spring.constructor.name + \"\\\" object\");\n  }\n}\n/** Coerce an event prop to an event handler */\n\n\nfunction coerceEventProp(prop, key) {\n  return is.fun(prop) ? prop : key && prop ? prop[key] : undefined;\n}\n/**\n * The \"finished\" value is determined by each \"onRest\" handler,\n * based on whether the current value equals the goal value that\n * was calculated at the time the \"onRest\" handler was set.\n */\n\n\nvar checkFinishedOnRest = function checkFinishedOnRest(onRest, spring) {\n  var to = spring.animation.to;\n  return onRest ? function (cancel) {\n    if (cancel) {\n      onRest(getCancelledResult(spring));\n    } else {\n      var goal = computeGoal(to);\n      var value = computeGoal(spring.get());\n      var finished = isEqual(value, goal);\n      onRest(getFinishedResult(spring, finished));\n    }\n  } : noop;\n};\n\nfunction createLoopUpdate(props) {\n  var loop = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : props.loop;\n  var to = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : props.to;\n  var loopRet = callProp(loop);\n\n  if (loopRet) {\n    var overrides = loopRet !== true && inferTo(loopRet);\n    var reverse = (overrides || props).reverse;\n    var reset = !overrides || overrides.reset;\n    return createUpdate(_extends(_extends({}, props), {}, {\n      loop: loop,\n      // Avoid updating default props when looping.\n      default: false,\n      // For the \"reverse\" prop to loop as expected, the \"to\" prop\n      // must be undefined. The \"reverse\" prop is ignored when the\n      // \"to\" prop is an array or function.\n      to: !reverse || is.arr(to) || is.fun(to) ? to : undefined,\n      // Avoid defining the \"from\" prop if a reset is unwanted.\n      from: reset ? props.from : undefined,\n      reset: reset\n    }, overrides));\n  }\n}\n/**\n * Return a new object based on the given `props`.\n *\n * - All unreserved props are moved into the `to` prop object.\n * - The `to` and `from` props are deleted when falsy.\n * - The `keys` prop is set to an array of affected keys,\n *   or `null` if all keys are affected.\n */\n\n\nfunction createUpdate(props) {\n  var _props = props = inferTo(props),\n      to = _props.to,\n      from = _props.from; // Collect the keys affected by this update.\n\n\n  var keys = new Set();\n\n  if (from) {\n    findDefined(from, keys);\n  } else {\n    // Falsy values are deleted to avoid merging issues.\n    delete props.from;\n  }\n\n  if (is.obj(to)) {\n    findDefined(to, keys);\n  } else if (!to) {\n    // Falsy values are deleted to avoid merging issues.\n    delete props.to;\n  } // The \"keys\" prop helps in applying updates to affected keys only.\n\n\n  props.keys = keys.size ? Array.from(keys) : null;\n  return props;\n}\n/**\n * A modified version of `createUpdate` meant for declarative APIs.\n */\n\n\nfunction declareUpdate(props) {\n  var update = createUpdate(props);\n\n  if (is.und(update.default)) {\n    update.default = getDefaultProps(update, [// Avoid forcing `immediate: true` onto imperative updates.\n    update.immediate === true && 'immediate']);\n  }\n\n  return update;\n}\n/** Find keys with defined values */\n\n\nfunction findDefined(values, keys) {\n  _each(values, function (value, key) {\n    return value != null && keys.add(key);\n  });\n}\n/** Events batched by the `Controller` class */\n\n\nvar BATCHED_EVENTS = ['onStart', 'onChange', 'onRest'];\nvar nextId$1 = 1;\n/** Queue of pending updates for a `Controller` instance. */\n\nvar Controller =\n/*#__PURE__*/\nfunction () {\n  /** The animated values */\n\n  /** The queue of props passed to the `update` method. */\n\n  /** Custom handler for flushing update queues */\n\n  /** These props are used by all future spring values */\n\n  /** The combined phase of our spring values */\n\n  /** The counter for tracking `scheduleProps` calls */\n\n  /** The values currently being animated */\n\n  /** State used by the `runAsync` function */\n\n  /** The event queues that are flushed once per frame maximum */\n  function Controller(props, flush) {\n    _classCallCheck(this, Controller);\n\n    this.id = nextId$1++;\n    this.springs = {};\n    this.queue = [];\n    this._flush = void 0;\n    this._initialProps = void 0;\n    this._phase = CREATED;\n    this._lastAsyncId = 0;\n    this._active = new Set();\n    this._state = {\n      pauseQueue: new Set(),\n      resumeQueue: new Set()\n    };\n    this._events = {\n      onStart: new Set(),\n      onChange: new Set(),\n      onRest: new Map()\n    };\n    this._onFrame = this._onFrame.bind(this);\n\n    if (flush) {\n      this._flush = flush;\n    }\n\n    if (props) {\n      this.start(props);\n    }\n  }\n  /**\n   * Equals `true` when no spring values are in the frameloop, and\n   * no async animation is currently active.\n   */\n\n\n  _createClass(Controller, [{\n    key: \"is\",\n\n    /** Check the current phase */\n    value: function is(phase) {\n      return this._phase == phase;\n    }\n    /** Get the current values of our springs */\n\n  }, {\n    key: \"get\",\n    value: function get() {\n      var values = {};\n      this.each(function (spring, key) {\n        return values[key] = spring.get();\n      });\n      return values;\n    }\n    /** Push an update onto the queue of each value. */\n\n  }, {\n    key: \"update\",\n    value: function update(props) {\n      if (props) this.queue.push(createUpdate(props));\n      return this;\n    }\n    /**\n     * Start the queued animations for every spring, and resolve the returned\n     * promise once all queued animations have finished or been cancelled.\n     *\n     * When you pass a queue (instead of nothing), that queue is used instead of\n     * the queued animations added with the `update` method, which are left alone.\n     */\n\n  }, {\n    key: \"start\",\n    value: function start(props) {\n      var queue = props ? toArray(props).map(createUpdate) : this.queue;\n\n      if (!props) {\n        this.queue = [];\n      }\n\n      if (this._flush) {\n        return this._flush(this, queue);\n      }\n\n      prepareKeys(this, queue);\n      return flushUpdateQueue(this, queue);\n    }\n    /** Stop one animation, some animations, or all animations */\n\n  }, {\n    key: \"stop\",\n    value: function stop(keys) {\n      if (is.und(keys)) {\n        this.each(function (spring) {\n          return spring.stop();\n        });\n        cancelAsync(this._state, this._lastAsyncId);\n      } else {\n        var springs = this.springs;\n\n        _each(toArray(keys), function (key) {\n          return springs[key].stop();\n        });\n      }\n\n      return this;\n    }\n    /** Freeze the active animation in time */\n\n  }, {\n    key: \"pause\",\n    value: function pause(keys) {\n      if (is.und(keys)) {\n        this.each(function (spring) {\n          return spring.pause();\n        });\n      } else {\n        var springs = this.springs;\n\n        _each(toArray(keys), function (key) {\n          return springs[key].pause();\n        });\n      }\n\n      return this;\n    }\n    /** Resume the animation if paused. */\n\n  }, {\n    key: \"resume\",\n    value: function resume(keys) {\n      if (is.und(keys)) {\n        this.each(function (spring) {\n          return spring.resume();\n        });\n      } else {\n        var springs = this.springs;\n\n        _each(toArray(keys), function (key) {\n          return springs[key].resume();\n        });\n      }\n\n      return this;\n    }\n    /** Restart every animation. */\n\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      this.each(function (spring) {\n        return spring.reset();\n      }); // TODO: restart async \"to\" prop\n\n      return this;\n    }\n    /** Call a function once per spring value */\n\n  }, {\n    key: \"each\",\n    value: function each(iterator) {\n      _each(this.springs, iterator);\n    }\n    /** Destroy every spring in this controller */\n\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      this._state.asyncTo = undefined;\n      this.each(function (spring) {\n        return spring.dispose();\n      });\n      this.springs = {};\n    }\n    /** @internal Called at the end of every animation frame */\n\n  }, {\n    key: \"_onFrame\",\n    value: function _onFrame() {\n      var _this10 = this;\n\n      var _this$_events = this._events,\n          onStart = _this$_events.onStart,\n          onChange = _this$_events.onChange,\n          onRest = _this$_events.onRest;\n      var isActive = this._active.size > 0;\n\n      if (isActive && this._phase != ACTIVE) {\n        this._phase = ACTIVE;\n        flush(onStart, function (onStart) {\n          return onStart(_this10);\n        });\n      }\n\n      var values = (onChange.size || !isActive && onRest.size) && this.get();\n      flush(onChange, function (onChange) {\n        return onChange(values);\n      }); // The \"onRest\" queue is only flushed when all springs are idle.\n\n      if (!isActive) {\n        this._phase = IDLE;\n        flush(onRest, function (_ref8) {\n          var _ref9 = _slicedToArray(_ref8, 2),\n              onRest = _ref9[0],\n              result = _ref9[1];\n\n          result.value = values;\n          onRest(result);\n        });\n      }\n    }\n    /** @internal */\n\n  }, {\n    key: \"onParentChange\",\n    value: function onParentChange(event) {\n      if (event.type == 'change') {\n        this._active[event.idle ? 'delete' : 'add'](event.parent);\n\n        frameLoop.onFrame(this._onFrame);\n      }\n    }\n  }, {\n    key: \"idle\",\n    get: function get() {\n      return !this._state.asyncTo && Object.values(this.springs).every(function (spring) {\n        return spring.idle;\n      });\n    }\n  }]);\n\n  return Controller;\n}();\n/**\n * Warning: Props might be mutated.\n */\n\n\nfunction flushUpdateQueue(ctrl, queue) {\n  return Promise.all(queue.map(function (props) {\n    return flushUpdate(ctrl, props);\n  })).then(function (results) {\n    return getCombinedResult(ctrl, results);\n  });\n}\n/**\n * Warning: Props might be mutated.\n *\n * Process a single set of props using the given controller.\n *\n * The returned promise resolves to `true` once the update is\n * applied and any animations it starts are finished without being\n * stopped or cancelled.\n */\n\n\nfunction flushUpdate(ctrl, props, isLoop) {\n  var to = props.to,\n      loop = props.loop,\n      onRest = props.onRest; // Looping must be handled in this function, or else the values\n  // would end up looping out-of-sync in many common cases.\n\n  if (loop) {\n    props.loop = false;\n  }\n\n  var asyncTo = is.arr(to) || is.fun(to) ? to : undefined;\n\n  if (asyncTo) {\n    props.to = undefined;\n    props.onRest = undefined;\n  } else {\n    // For certain events, use batching to prevent multiple calls per frame.\n    // However, batching is avoided when the `to` prop is async, because any\n    // event props are used as default props instead.\n    _each(BATCHED_EVENTS, function (key) {\n      var handler = props[key];\n\n      if (is.fun(handler)) {\n        var queue = ctrl['_events'][key];\n\n        if (queue instanceof Set) {\n          props[key] = function () {\n            return queue.add(handler);\n          };\n        } else {\n          props[key] = function (_ref10) {\n            var finished = _ref10.finished,\n                cancelled = _ref10.cancelled;\n            var result = queue.get(handler);\n\n            if (result) {\n              if (!finished) result.finished = false;\n              if (cancelled) result.cancelled = true;\n            } else {\n              // The \"value\" is set before the \"handler\" is called.\n              queue.set(handler, {\n                value: null,\n                finished: finished,\n                cancelled: cancelled\n              });\n            }\n          };\n        }\n      }\n    });\n  }\n\n  var keys = props.keys || Object.keys(ctrl.springs);\n  var promises = keys.map(function (key) {\n    return ctrl.springs[key].start(props);\n  }); // Schedule the \"asyncTo\" if defined.\n\n  var state = ctrl['_state'];\n\n  if (asyncTo) {\n    promises.push(scheduleProps(++ctrl['_lastAsyncId'], {\n      props: props,\n      state: state,\n      actions: {\n        pause: noop,\n        resume: noop,\n        start: function start(props, resolve) {\n          props.onRest = onRest;\n\n          if (!props.cancel) {\n            resolve(runAsync(asyncTo, props, state, ctrl));\n          } // Prevent `cancel: true` from ending the current `runAsync` call,\n          // except when the default `cancel` prop is being set.\n          else if (hasDefaultProp(props, 'cancel')) {\n              cancelAsync(state, props.callId);\n            }\n        }\n      }\n    }));\n  } // Respect the `cancel` prop when no keys are affected.\n  else if (!props.keys && props.cancel === true) {\n      cancelAsync(state, ctrl['_lastAsyncId']);\n    }\n\n  return Promise.all(promises).then(function (results) {\n    var result = getCombinedResult(ctrl, results);\n\n    if (loop && result.finished && !(isLoop && result.noop)) {\n      var nextProps = createLoopUpdate(props, loop, to);\n\n      if (nextProps) {\n        prepareKeys(ctrl, [nextProps]);\n        return flushUpdate(ctrl, nextProps, true);\n      }\n    }\n\n    return result;\n  });\n}\n/**\n * From an array of updates, get the map of `SpringValue` objects\n * by their keys. Springs are created when any update wants to\n * animate a new key.\n *\n * Springs created by `getSprings` are neither cached nor observed\n * until they're given to `setSprings`.\n */\n\n\nfunction getSprings(ctrl, props) {\n  var springs = _extends({}, ctrl.springs);\n\n  if (props) {\n    _each(toArray(props), function (props) {\n      if (is.und(props.keys)) {\n        props = createUpdate(props);\n      }\n\n      if (!is.obj(props.to)) {\n        // Avoid passing array/function to each spring.\n        props = _extends(_extends({}, props), {}, {\n          to: undefined\n        });\n      }\n\n      prepareSprings(springs, props, function (key) {\n        return createSpring(key);\n      });\n    });\n  }\n\n  return springs;\n}\n/**\n * Tell a controller to manage the given `SpringValue` objects\n * whose key is not already in use.\n */\n\n\nfunction setSprings(ctrl, springs) {\n  _each(springs, function (spring, key) {\n    if (!ctrl.springs[key]) {\n      ctrl.springs[key] = spring;\n      spring.addChild(ctrl);\n    }\n  });\n}\n\nfunction createSpring(key, observer) {\n  var spring = new SpringValue();\n  spring.key = key;\n\n  if (observer) {\n    spring.addChild(observer);\n  }\n\n  return spring;\n}\n/**\n * Ensure spring objects exist for each defined key.\n *\n * Using the `props`, the `Animated` node of each `SpringValue` may\n * be created or updated.\n */\n\n\nfunction prepareSprings(springs, props, create) {\n  if (props.keys) {\n    _each(props.keys, function (key) {\n      var spring = springs[key] || (springs[key] = create(key));\n      spring['_prepareNode'](props);\n    });\n  }\n}\n/**\n * Ensure spring objects exist for each defined key, and attach the\n * `ctrl` to them for observation.\n *\n * The queue is expected to contain `createUpdate` results.\n */\n\n\nfunction prepareKeys(ctrl, queue) {\n  _each(queue, function (props) {\n    prepareSprings(ctrl.springs, props, function (key) {\n      return createSpring(key, ctrl);\n    });\n  });\n}\n/**\n * This context affects all new and existing `SpringValue` objects\n * created with the hook API or the renderprops API.\n */\n\n\nvar ctx = createContext({});\n\nvar SpringContext = function SpringContext(_ref) {\n  var children = _ref.children,\n      props = _objectWithoutPropertiesLoose(_ref, [\"children\"]);\n\n  var inherited = useContext(ctx); // Memoize the context to avoid unwanted renders.\n\n  props = useMemo(function () {\n    return _extends(_extends({}, inherited), props);\n  }, [inherited, props.pause, props.cancel, props.immediate, props.config]);\n  var Provider = ctx.Provider;\n  return (\n    /*#__PURE__*/\n    createElement(Provider, {\n      value: props\n    }, children)\n  );\n};\n\nSpringContext.Provider = ctx.Provider;\nSpringContext.Consumer = ctx.Consumer;\n/** Get the current values of nearest `SpringContext` component. */\n\nvar useSpringContext = function useSpringContext() {\n  return useContext(ctx);\n};\n/** Create an imperative API for manipulating an array of `Controller` objects. */\n\n\nvar SpringHandle = {\n  create: function create(getControllers) {\n    return {\n      get controllers() {\n        return getControllers();\n      },\n\n      update: function update(props) {\n        _each(getControllers(), function (ctrl, i) {\n          ctrl.update(getProps(props, i, ctrl));\n        });\n\n        return this;\n      },\n      start: function () {\n        var _start3 = _asyncToGenerator(\n        /*#__PURE__*/\n        _regeneratorRuntime.mark(function _callee2(props) {\n          var results;\n          return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n            while (1) {\n              switch (_context2.prev = _context2.next) {\n                case 0:\n                  _context2.next = 2;\n                  return Promise.all(getControllers().map(function (ctrl, i) {\n                    var update = getProps(props, i, ctrl);\n                    return ctrl.start(update);\n                  }));\n\n                case 2:\n                  results = _context2.sent;\n                  return _context2.abrupt(\"return\", {\n                    value: results.map(function (result) {\n                      return result.value;\n                    }),\n                    finished: results.every(function (result) {\n                      return result.finished;\n                    })\n                  });\n\n                case 4:\n                case \"end\":\n                  return _context2.stop();\n              }\n            }\n          }, _callee2);\n        }));\n\n        function start(_x7) {\n          return _start3.apply(this, arguments);\n        }\n\n        return start;\n      }(),\n      stop: function stop(keys) {\n        return _each(getControllers(), function (ctrl) {\n          return ctrl.stop(keys);\n        });\n      },\n      pause: function pause(keys) {\n        return _each(getControllers(), function (ctrl) {\n          return ctrl.pause(keys);\n        });\n      },\n      resume: function resume(keys) {\n        return _each(getControllers(), function (ctrl) {\n          return ctrl.resume(keys);\n        });\n      }\n    };\n  }\n};\n/** @internal */\n\nfunction useSprings(length, props, deps) {\n  var propsFn = is.fun(props) && props;\n  if (propsFn && !deps) deps = []; // Set to 0 to prevent sync flush.\n\n  var layoutId = useRef(0);\n  var forceUpdate = useForceUpdate(); // State is updated on commit.\n\n  var _useState = useState(function () {\n    return {\n      ctrls: [],\n      queue: [],\n      flush: function flush(ctrl, updates) {\n        var springs = getSprings(ctrl, updates); // Flushing is postponed until the component's commit phase\n        // if a spring was created since the last commit.\n\n        var canFlushSync = layoutId.current > 0 && !state.queue.length && !Object.keys(springs).some(function (key) {\n          return !ctrl.springs[key];\n        });\n        return canFlushSync ? flushUpdateQueue(ctrl, updates) : new Promise(function (resolve) {\n          setSprings(ctrl, springs);\n          state.queue.push(function () {\n            resolve(flushUpdateQueue(ctrl, updates));\n          });\n          forceUpdate();\n        });\n      }\n    };\n  }),\n      _useState2 = _slicedToArray(_useState, 1),\n      state = _useState2[0]; // The imperative API ref from the props of the first controller.\n\n\n  var refProp = useRef();\n\n  var ctrls = _toConsumableArray(state.ctrls);\n\n  var updates = []; // Cache old controllers to dispose in the commit phase.\n\n  var prevLength = usePrev(length) || 0;\n  var disposed = ctrls.slice(length, prevLength); // Create new controllers when \"length\" increases, and destroy\n  // the affected controllers when \"length\" decreases.\n\n  useMemo(function () {\n    ctrls.length = length;\n    declareUpdates(prevLength, length);\n  }, [length]); // Update existing controllers when \"deps\" are changed.\n\n  useMemo(function () {\n    declareUpdates(0, Math.min(prevLength, length));\n  }, deps);\n  /** Fill the `updates` array with declarative updates for the given index range. */\n\n  function declareUpdates(startIndex, endIndex) {\n    for (var i = startIndex; i < endIndex; i++) {\n      var ctrl = ctrls[i] || (ctrls[i] = new Controller(null, state.flush));\n\n      var _update2 = propsFn ? propsFn(i, ctrl) : props[i];\n\n      if (_update2) {\n        _update2 = updates[i] = declareUpdate(_update2);\n\n        if (i == 0) {\n          refProp.current = _update2.ref;\n          _update2.ref = undefined;\n        }\n      }\n    }\n  }\n\n  var api = useMemo$1(function () {\n    return SpringHandle.create(function () {\n      return state.ctrls;\n    });\n  }, []); // New springs are created during render so users can pass them to\n  // their animated components, but new springs aren't cached until the\n  // commit phase (see the `useLayoutEffect` callback below).\n\n  var springs = ctrls.map(function (ctrl, i) {\n    return getSprings(ctrl, updates[i]);\n  });\n  var context = useSpringContext();\n  useLayoutEffect(function () {\n    layoutId.current++; // Replace the cached controllers.\n\n    state.ctrls = ctrls; // Update the ref prop.\n\n    if (refProp.current) {\n      refProp.current.current = api;\n    } // Flush the commit queue.\n\n\n    var queue = state.queue;\n\n    if (queue.length) {\n      state.queue = [];\n\n      _each(queue, function (cb) {\n        return cb();\n      });\n    } // Dispose unused controllers.\n\n\n    _each(disposed, function (ctrl) {\n      return ctrl.dispose();\n    }); // Update existing controllers.\n\n\n    _each(ctrls, function (ctrl, i) {\n      var values = springs[i];\n      setSprings(ctrl, values); // Update the default props.\n\n      ctrl.start({\n        default: context\n      }); // Apply updates created during render.\n\n      var update = updates[i];\n\n      if (update) {\n        // Start animating unless a ref exists.\n        if (refProp.current) {\n          ctrl.queue.push(update);\n        } else {\n          ctrl.start(update);\n        }\n      }\n    });\n  }); // Dispose all controllers on unmount.\n\n  useOnce(function () {\n    return function () {\n      _each(state.ctrls, function (ctrl) {\n        return ctrl.dispose();\n      });\n    };\n  }); // Return a deep copy of the `springs` array so the caller can\n  // safely mutate it during render.\n\n  var values = springs.map(function (x) {\n    return _extends({}, x);\n  });\n  return propsFn || arguments.length == 3 ? [values, api.start, api.stop] : values;\n}\n/**\n * The props that `useSpring` recognizes.\n */\n\n/** @internal */\n\n\nfunction useSpring(props, deps) {\n  var isFn = is.fun(props);\n\n  var _useSprings = useSprings(1, isFn ? props : [props], isFn ? deps || [] : deps),\n      _useSprings2 = _slicedToArray(_useSprings, 3),\n      _useSprings2$ = _slicedToArray(_useSprings2[0], 1),\n      values = _useSprings2$[0],\n      update = _useSprings2[1],\n      stop = _useSprings2[2];\n\n  return isFn || arguments.length == 2 ? [values, update, stop] : values;\n}\n\nfunction useTrail(length, propsArg, deps) {\n  var propsFn = is.fun(propsArg) && propsArg;\n  if (propsFn && !deps) deps = [];\n  var ctrls = [];\n  var result = useSprings(length, function (i, ctrl) {\n    ctrls[i] = ctrl;\n    return getProps(propsArg, i, ctrl);\n  }, // Ensure the props function is called when no deps exist.\n  // This works around the 3 argument rule.\n  deps || [{}]);\n  useLayoutEffect(function () {\n    var reverse = is.obj(propsArg) && propsArg.reverse;\n\n    for (var i = 0; i < ctrls.length; i++) {\n      var parent = ctrls[i + (reverse ? 1 : -1)];\n      if (parent) ctrls[i].update({\n        to: parent.springs\n      }).start();\n    }\n  }, deps);\n\n  if (propsFn || arguments.length == 3) {\n    var _update3 = result[1];\n    result[1] = useCallbackOne(function (propsArg) {\n      var reverse = is.obj(propsArg) && propsArg.reverse;\n      return _update3(function (i, ctrl) {\n        var props = getProps(propsArg, i, ctrl);\n        var parent = ctrls[i + (reverse ? 1 : -1)];\n        if (parent) props.to = parent.springs;\n        return props;\n      });\n    }, deps);\n    return result;\n  }\n\n  return result[0];\n} // TODO: convert to \"const enum\" once Babel supports it\n\n/** This transition is being mounted */\n\n\nvar MOUNT = 'mount';\n/** This transition is entering or has entered */\n\nvar ENTER = 'enter';\n/** This transition had its animations updated */\n\nvar UPDATE = 'update';\n/** This transition will expire after animating */\n\nvar LEAVE = 'leave';\n\nfunction useTransition(data, props, deps) {\n  var ref = props.ref,\n      reset = props.reset,\n      sort = props.sort,\n      _props$trail = props.trail,\n      trail = _props$trail === void 0 ? 0 : _props$trail,\n      _props$expires = props.expires,\n      expires = _props$expires === void 0 ? true : _props$expires; // Every item has its own transition.\n\n  var items = toArray(data);\n  var transitions = []; // Keys help with reusing transitions between renders.\n  // The `key` prop can be undefined (which means the items themselves are used\n  // as keys), or a function (which maps each item to its key), or an array of\n  // keys (which are assigned to each item by index).\n\n  var keys = getKeys(items, props); // The \"onRest\" callbacks need a ref to the latest transitions.\n\n  var usedTransitions = useRef(null);\n  var prevTransitions = reset ? null : usedTransitions.current;\n  useLayoutEffect(function () {\n    usedTransitions.current = transitions;\n  }); // Destroy all transitions on dismount.\n\n  useOnce(function () {\n    return function () {\n      return _each(usedTransitions.current, function (t) {\n        if (t.expired) {\n          clearTimeout(t.expirationId);\n        }\n\n        t.ctrl.dispose();\n      });\n    };\n  }); // Map old indices to new indices.\n\n  var reused = [];\n  if (prevTransitions) _each(prevTransitions, function (t, i) {\n    // Expired transitions are not rendered.\n    if (t.expired) {\n      clearTimeout(t.expirationId);\n    } else {\n      i = reused[i] = keys.indexOf(t.key);\n      if (~i) transitions[i] = t;\n    }\n  }); // Mount new items with fresh transitions.\n\n  _each(items, function (item, i) {\n    transitions[i] || (transitions[i] = {\n      key: keys[i],\n      item: item,\n      phase: MOUNT,\n      ctrl: new Controller()\n    });\n  }); // Update the item of any transition whose key still exists,\n  // and ensure leaving transitions are rendered until they finish.\n\n\n  if (reused.length) {\n    var i = -1;\n\n    _each(reused, function (keyIndex, prevIndex) {\n      var t = prevTransitions[prevIndex];\n\n      if (~keyIndex) {\n        i = transitions.indexOf(t);\n        transitions[i] = _extends(_extends({}, t), {}, {\n          item: items[keyIndex]\n        });\n      } else if (props.leave) {\n        transitions.splice(++i, 0, t);\n      }\n    });\n  }\n\n  if (is.fun(sort)) {\n    transitions.sort(function (a, b) {\n      return sort(a.item, b.item);\n    });\n  } // Track cumulative delay for the \"trail\" prop.\n\n\n  var delay = -trail; // Expired transitions use this to dismount.\n\n  var forceUpdate = useForceUpdate(); // These props are inherited by every phase change.\n\n  var defaultProps = getDefaultProps(props); // Generate changes to apply in useEffect.\n\n  var changes = new Map();\n\n  _each(transitions, function (t, i) {\n    var key = t.key;\n    var prevPhase = t.phase;\n    var to;\n    var phase;\n\n    if (prevPhase == MOUNT) {\n      to = props.enter;\n      phase = ENTER;\n    } else {\n      var isLeave = keys.indexOf(key) < 0;\n\n      if (prevPhase != LEAVE) {\n        if (isLeave) {\n          to = props.leave;\n          phase = LEAVE;\n        } else if (to = props.update) {\n          phase = UPDATE;\n        } else return;\n      } else if (!isLeave) {\n        to = props.enter;\n        phase = ENTER;\n      } else return;\n    } // When \"to\" is a function, it can return (1) an array of \"useSpring\" props,\n    // (2) an async function, or (3) an object with any \"useSpring\" props.\n\n\n    to = callProp(to, t.item, i);\n    to = is.obj(to) ? inferTo(to) : {\n      to: to\n    };\n\n    if (!to.config) {\n      var _config2 = props.config || defaultProps.config;\n\n      to.config = callProp(_config2, t.item, i);\n    } // The payload is used to update the spring props once the current render is committed.\n\n\n    var payload = _extends(_extends({}, defaultProps), {}, {\n      delay: delay += trail,\n      // This prevents implied resets.\n      reset: false\n    }, to);\n\n    if (phase == ENTER && is.und(payload.from)) {\n      // The `initial` prop is used on the first render of our parent component,\n      // as well as when `reset: true` is passed. It overrides the `from` prop\n      // when defined, and it makes `enter` instant when null.\n      var from = is.und(props.initial) || prevTransitions ? props.from : props.initial;\n      payload.from = callProp(from, t.item, i);\n    }\n\n    var onRest = payload.onRest;\n\n    payload.onRest = function (result) {\n      var transitions = usedTransitions.current;\n      var t = transitions.find(function (t) {\n        return t.key === key;\n      });\n      if (!t) return;\n\n      if (is.fun(onRest)) {\n        onRest(result, t);\n      } // Reset the phase of a cancelled enter/leave transition, so it can\n      // retry the animation on the next render.\n\n\n      if (result.cancelled && t.phase != UPDATE) {\n        t.phase = prevPhase;\n        return;\n      }\n\n      if (t.ctrl.idle) {\n        var idle = transitions.every(function (t) {\n          return t.ctrl.idle;\n        });\n\n        if (t.phase == LEAVE) {\n          var expiry = callProp(expires, t.item);\n\n          if (expiry !== false) {\n            var expiryMs = expiry === true ? 0 : expiry;\n            t.expired = true; // Force update once the expiration delay ends.\n\n            if (!idle && expiryMs > 0) {\n              // The maximum timeout is 2^31-1\n              if (expiryMs <= 0x7fffffff) t.expirationId = setTimeout(forceUpdate, expiryMs);\n              return;\n            }\n          }\n        } // Force update once idle and expired items exist.\n\n\n        if (idle && transitions.some(function (t) {\n          return t.expired;\n        })) {\n          forceUpdate();\n        }\n      }\n    };\n\n    var springs = getSprings(t.ctrl, payload);\n    changes.set(t, {\n      phase: phase,\n      springs: springs,\n      payload: payload\n    });\n  }); // The prop overrides from an ancestor.\n\n\n  var context = useSpringContext(); // Merge the context into each transition.\n\n  useLayoutEffect(function () {\n    _each(transitions, function (t) {\n      t.ctrl.start({\n        default: context\n      });\n    });\n  }, [context]);\n  var api = useMemo$1(function () {\n    return SpringHandle.create(function () {\n      return usedTransitions.current.map(function (t) {\n        return t.ctrl;\n      });\n    });\n  }, []);\n  useImperativeHandle(ref, function () {\n    return api;\n  });\n  useLayoutEffect(function () {\n    _each(changes, function (_ref11, t) {\n      var phase = _ref11.phase,\n          springs = _ref11.springs,\n          payload = _ref11.payload;\n      setSprings(t.ctrl, springs);\n\n      if (!context.cancel) {\n        t.phase = phase;\n\n        if (phase == ENTER) {\n          t.ctrl.start({\n            default: context\n          });\n        }\n\n        t.ctrl[ref ? 'update' : 'start'](payload);\n      }\n    });\n  }, reset ? void 0 : deps);\n\n  var renderTransitions = function renderTransitions(render) {\n    return (\n      /*#__PURE__*/\n      createElement(Fragment, null, transitions.map(function (t, i) {\n        var _ref12 = changes.get(t) || t.ctrl,\n            springs = _ref12.springs;\n\n        var elem = render(_extends({}, springs), t.item, t, i);\n        return elem && elem.type ?\n        /*#__PURE__*/\n        createElement(elem.type, _extends({}, elem.props, {\n          key: is.str(t.key) || is.num(t.key) ? t.key : t.ctrl.id,\n          ref: elem.ref\n        })) : elem;\n      }))\n    );\n  };\n\n  return arguments.length == 3 ? [renderTransitions, api.start, api.stop] : renderTransitions;\n}\n\nfunction getKeys(items, _ref13) {\n  var key = _ref13.key,\n      _ref13$keys = _ref13.keys,\n      keys = _ref13$keys === void 0 ? key : _ref13$keys;\n  return is.und(keys) ? items : is.fun(keys) ? items.map(keys) : toArray(keys);\n}\n/**\n * The `Spring` component passes `SpringValue` objects to your render prop.\n */\n\n\nfunction Spring(_ref) {\n  var children = _ref.children,\n      props = _objectWithoutPropertiesLoose(_ref, [\"children\"]);\n\n  return children(useSpring(props));\n}\n\nfunction Trail(_ref) {\n  var items = _ref.items,\n      children = _ref.children,\n      props = _objectWithoutPropertiesLoose(_ref, [\"items\", \"children\"]);\n\n  var trails = useTrail(items.length, props);\n  return items.map(function (item, index) {\n    var result = children(item, index);\n    return is.fun(result) ? result(trails[index]) : result;\n  });\n}\n\nfunction Transition(_ref) {\n  var items = _ref.items,\n      children = _ref.children,\n      props = _objectWithoutPropertiesLoose(_ref, [\"items\", \"children\"]);\n\n  return (\n    /*#__PURE__*/\n    createElement(Fragment, null, useTransition(items, props)(children))\n  );\n}\n/**\n * An `Interpolation` is a memoized value that's computed whenever one of its\n * `FluidValue` dependencies has its value changed.\n *\n * Other `FrameValue` objects can depend on this. For example, passing an\n * `Interpolation` as the `to` prop of a `useSpring` call will trigger an\n * animation toward the memoized value.\n */\n\n\nvar Interpolation =\n/*#__PURE__*/\nfunction (_FrameValue2) {\n  _inherits(Interpolation, _FrameValue2);\n\n  /** Useful for debugging. */\n\n  /** Equals false when in the frameloop */\n\n  /** The function that maps inputs values to output */\n  function Interpolation(source, args) {\n    var _this11;\n\n    _classCallCheck(this, Interpolation);\n\n    _this11 = _possibleConstructorReturn(this, _getPrototypeOf(Interpolation).call(this));\n    _this11.source = source;\n    _this11.key = void 0;\n    _this11.idle = true;\n    _this11.calc = void 0;\n    _this11.calc = createInterpolator.apply(void 0, _toConsumableArray(args));\n\n    var value = _this11._get();\n\n    var nodeType = is.arr(value) ? AnimatedArray : AnimatedValue; // Assume the computed value never changes type.\n\n    setAnimated(_assertThisInitialized(_this11), nodeType.create(value));\n    return _this11;\n  }\n\n  _createClass(Interpolation, [{\n    key: \"advance\",\n    value: function advance(_dt) {\n      var value = this._get();\n\n      var oldValue = this.get();\n\n      if (!isEqual(value, oldValue)) {\n        getAnimated(this).setValue(value);\n\n        this._onChange(value, this.idle);\n      }\n    }\n  }, {\n    key: \"_get\",\n    value: function _get() {\n      var inputs = is.arr(this.source) ? this.source.map(function (node) {\n        return node.get();\n      }) : toArray(this.source.get());\n      return this.calc.apply(this, _toConsumableArray(inputs));\n    }\n  }, {\n    key: \"_reset\",\n    value: function _reset() {\n      _each(getPayload(this), function (node) {\n        return node.reset();\n      });\n\n      _get(_getPrototypeOf(Interpolation.prototype), \"_reset\", this).call(this);\n    }\n  }, {\n    key: \"_start\",\n    value: function _start() {\n      this.idle = false;\n\n      _get(_getPrototypeOf(Interpolation.prototype), \"_start\", this).call(this);\n\n      if (skipAnimation) {\n        this.idle = true;\n        this.advance();\n      } else {\n        frameLoop.start(this);\n      }\n    }\n  }, {\n    key: \"_attach\",\n    value: function _attach() {\n      var _this12 = this;\n\n      // Start observing our \"source\" once we have an observer.\n      var idle = true;\n      var priority = 1;\n\n      _each(toArray(this.source), function (source) {\n        if (isFrameValue(source)) {\n          if (!source.idle) idle = false;\n          priority = Math.max(priority, source.priority + 1);\n        }\n\n        source.addChild(_this12);\n      });\n\n      this.priority = priority;\n\n      if (!idle) {\n        this._reset();\n\n        this._start();\n      }\n    }\n  }, {\n    key: \"_detach\",\n    value: function _detach() {\n      var _this13 = this;\n\n      // Stop observing our \"source\" once we have no observers.\n      _each(toArray(this.source), function (source) {\n        source.removeChild(_this13);\n      }); // This removes us from the frameloop.\n\n\n      this.idle = true;\n    }\n    /** @internal */\n\n  }, {\n    key: \"onParentChange\",\n    value: function onParentChange(event) {\n      // Ensure our start value respects our parent values, in case\n      // any of their animations were restarted with the \"reset\" prop.\n      if (event.type == 'start') {\n        this.advance();\n      } // Change events are useful for (1) reacting to non-animated parents\n      // and (2) reacting to the last change in a parent animation.\n      else if (event.type == 'change') {\n          // If we're idle, we know for sure that this change is *not*\n          // caused by an animation.\n          if (this.idle) {\n            this.advance();\n          } // Leave the frameloop when all parents are done animating.\n          else if (event.idle) {\n              this.idle = toArray(this.source).every(function (source) {\n                return source.idle !== false;\n              });\n\n              if (this.idle) {\n                this.advance();\n\n                _each(getPayload(this), function (node) {\n                  node.done = true;\n                });\n              }\n            }\n        } // Ensure our priority is greater than all parents, which means\n        // our value won't be updated until our parents have updated.\n        else if (event.type == 'priority') {\n            this.priority = toArray(this.source).reduce(function (max, source) {\n              return Math.max(max, (source.priority || 0) + 1);\n            }, 0);\n          }\n\n      _get(_getPrototypeOf(Interpolation.prototype), \"onParentChange\", this).call(this, event);\n    }\n  }]);\n\n  return Interpolation;\n}(FrameValue);\n/** Map the value of one or more dependencies */\n\n\nvar to = function to(source) {\n  for (var _len5 = arguments.length, args = new Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {\n    args[_key5 - 1] = arguments[_key5];\n  }\n\n  return new Interpolation(source, args);\n};\n/** @deprecated Use the `to` export instead */\n\n\nvar interpolate = function interpolate(source) {\n  for (var _len6 = arguments.length, args = new Array(_len6 > 1 ? _len6 - 1 : 0), _key6 = 1; _key6 < _len6; _key6++) {\n    args[_key6 - 1] = arguments[_key6];\n  }\n\n  return deprecateInterpolate(), new Interpolation(source, args);\n};\n/** Extract the raw value types that are being interpolated */\n\n\nGlobals.assign({\n  createStringInterpolator: createStringInterpolator$1,\n  to: function to(source, args) {\n    return new Interpolation(source, args);\n  }\n});\n/** Advance all animations forward one frame */\n\nvar update = function update() {\n  return Globals.frameLoop.advance();\n};\n\nexport { BailSignal, Controller, FrameValue, Interpolation, Spring, SpringContext, SpringHandle, SpringValue, Trail, Transition, config, inferTo, interpolate, to, update, useChain, useSpring, useSprings, useTrail, useTransition };","map":null,"metadata":{},"sourceType":"module"}
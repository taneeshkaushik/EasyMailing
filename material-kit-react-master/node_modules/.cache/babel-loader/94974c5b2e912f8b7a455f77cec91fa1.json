{"ast":null,"code":"import _assertThisInitialized from \"/home/abhishek/Projects/Stp-II/Fuse-React-v3.0.0-skeleton/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _get from \"/home/abhishek/Projects/Stp-II/Fuse-React-v3.0.0-skeleton/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/get\";\nimport _possibleConstructorReturn from \"/home/abhishek/Projects/Stp-II/Fuse-React-v3.0.0-skeleton/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/abhishek/Projects/Stp-II/Fuse-React-v3.0.0-skeleton/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/abhishek/Projects/Stp-II/Fuse-React-v3.0.0-skeleton/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _classCallCheck from \"/home/abhishek/Projects/Stp-II/Fuse-React-v3.0.0-skeleton/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/abhishek/Projects/Stp-II/Fuse-React-v3.0.0-skeleton/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport { defineHidden, is, createInterpolator, each, getFluidConfig, isAnimatedString, useForceUpdate } from '@react-spring/shared';\nimport _extends from '@babel/runtime/helpers/esm/extends';\nimport { frameLoop } from '@react-spring/shared/globals';\nimport { forwardRef, useRef, createElement } from 'react';\nimport { useLayoutEffect } from 'react-layout-effect';\nvar $node = Symbol.for('Animated:node');\n\nvar isAnimated = function isAnimated(value) {\n  return !!value && value[$node] === value;\n};\n/** Get the owner's `Animated` node. */\n\n\nvar getAnimated = function getAnimated(owner) {\n  return owner && owner[$node];\n};\n/** Set the owner's `Animated` node. */\n\n\nvar setAnimated = function setAnimated(owner, node) {\n  return defineHidden(owner, $node, node);\n};\n/** Get every `AnimatedValue` in the owner's `Animated` node. */\n\n\nvar getPayload = function getPayload(owner) {\n  return owner && owner[$node] && owner[$node].getPayload();\n};\n\nvar Animated =\n/*#__PURE__*/\nfunction () {\n  /** The cache of animated values */\n  function Animated() {\n    _classCallCheck(this, Animated);\n\n    this.payload = void 0; // This makes \"isAnimated\" return true.\n\n    setAnimated(this, this);\n  }\n  /** Get the current value. Pass `true` for only animated values. */\n\n  /** Get every `AnimatedValue` used by this node. */\n\n\n  _createClass(Animated, [{\n    key: \"getPayload\",\n    value: function getPayload() {\n      return this.payload || [];\n    }\n  }]);\n\n  return Animated;\n}();\n/** An animated number or a native attribute value */\n\n\nvar AnimatedValue =\n/*#__PURE__*/\nfunction (_Animated) {\n  _inherits(AnimatedValue, _Animated);\n\n  function AnimatedValue(_value) {\n    var _this;\n\n    _classCallCheck(this, AnimatedValue);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(AnimatedValue).call(this));\n    _this._value = _value;\n    _this.done = true;\n    _this.elapsedTime = void 0;\n    _this.lastPosition = void 0;\n    _this.lastVelocity = void 0;\n    _this.v0 = void 0;\n\n    if (is.num(_this._value)) {\n      _this.lastPosition = _this._value;\n    }\n\n    return _this;\n  }\n\n  _createClass(AnimatedValue, [{\n    key: \"getPayload\",\n    value: function getPayload() {\n      return [this];\n    }\n  }, {\n    key: \"getValue\",\n    value: function getValue() {\n      return this._value;\n    }\n    /**\n     * Set the current value and optionally round it.\n     *\n     * The `step` argument does nothing whenever it equals `undefined` or `0`.\n     * It works with fractions and whole numbers. The best use case is (probably)\n     * rounding to the pixel grid with a step of:\n     *\n     *      1 / window.devicePixelRatio\n     */\n\n  }, {\n    key: \"setValue\",\n    value: function setValue(value, step) {\n      if (is.num(value)) {\n        this.lastPosition = value;\n\n        if (step) {\n          value = Math.round(value / step) * step;\n\n          if (this.done) {\n            this.lastPosition = value;\n          }\n        }\n      }\n\n      if (this._value === value) {\n        return false;\n      }\n\n      this._value = value;\n      return true;\n    }\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      var done = this.done;\n      this.done = false;\n\n      if (is.num(this._value)) {\n        this.elapsedTime = 0;\n        this.lastPosition = this._value;\n        if (done) this.lastVelocity = null;\n        this.v0 = null;\n      }\n    }\n  }], [{\n    key: \"create\",\n    value: function create(from, _to) {\n      return new AnimatedValue(from);\n    }\n  }]);\n\n  return AnimatedValue;\n}(Animated);\n\nvar AnimatedString =\n/*#__PURE__*/\nfunction (_AnimatedValue) {\n  _inherits(AnimatedString, _AnimatedValue);\n\n  function AnimatedString(from, to) {\n    var _this2;\n\n    _classCallCheck(this, AnimatedString);\n\n    _this2 = _possibleConstructorReturn(this, _getPrototypeOf(AnimatedString).call(this, 0));\n    _this2._value = void 0;\n    _this2._string = null;\n    _this2._toString = void 0;\n    _this2._toString = createInterpolator({\n      output: [from, to]\n    });\n    return _this2;\n  }\n\n  _createClass(AnimatedString, [{\n    key: \"getValue\",\n    value: function getValue() {\n      var value = this._string;\n      return value == null ? this._string = this._toString(this._value) : value;\n    }\n  }, {\n    key: \"setValue\",\n    value: function setValue(value) {\n      if (!is.num(value)) {\n        this._string = value;\n        this._value = 1;\n      } else if (_get(_getPrototypeOf(AnimatedString.prototype), \"setValue\", this).call(this, value)) {\n        this._string = null;\n      } else {\n        return false;\n      }\n\n      return true;\n    }\n  }, {\n    key: \"reset\",\n    value: function reset(goal) {\n      if (goal) {\n        this._toString = createInterpolator({\n          output: [this.getValue(), goal]\n        });\n      }\n\n      this._value = 0;\n\n      _get(_getPrototypeOf(AnimatedString.prototype), \"reset\", this).call(this);\n    }\n  }], [{\n    key: \"create\",\n    value: function create(from) {\n      var to = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : from;\n\n      if (is.str(from) && is.str(to)) {\n        return new AnimatedString(from, to);\n      }\n\n      throw TypeError('Expected \"from\" and \"to\" to be strings');\n    }\n  }]);\n\n  return AnimatedString;\n}(AnimatedValue);\n\nvar TreeContext = {\n  current: null\n};\n/** An object containing `Animated` nodes */\n\nvar AnimatedObject =\n/*#__PURE__*/\nfunction (_Animated2) {\n  _inherits(AnimatedObject, _Animated2);\n\n  function AnimatedObject() {\n    var _this3;\n\n    var source = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n\n    _classCallCheck(this, AnimatedObject);\n\n    _this3 = _possibleConstructorReturn(this, _getPrototypeOf(AnimatedObject).call(this));\n    _this3.source = void 0;\n\n    _this3.setValue(source);\n\n    return _this3;\n  }\n\n  _createClass(AnimatedObject, [{\n    key: \"getValue\",\n    value: function getValue(animated) {\n      if (!this.source) return null;\n      var values = {};\n      each(this.source, function (source, key) {\n        if (isAnimated(source)) {\n          values[key] = source.getValue(animated);\n        } else {\n          var config = getFluidConfig(source);\n\n          if (config) {\n            values[key] = config.get();\n          } else if (!animated) {\n            values[key] = source;\n          }\n        }\n      });\n      return values;\n    }\n    /** Replace the raw object data */\n\n  }, {\n    key: \"setValue\",\n    value: function setValue(source) {\n      this.source = source;\n      this.payload = this._makePayload(source);\n    }\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      if (this.payload) {\n        each(this.payload, function (node) {\n          return node.reset();\n        });\n      }\n    }\n    /** Create a payload set. */\n\n  }, {\n    key: \"_makePayload\",\n    value: function _makePayload(source) {\n      if (source) {\n        var payload = new Set();\n        each(source, this._addToPayload, payload);\n        return Array.from(payload);\n      }\n    }\n    /** Add to a payload set. */\n\n  }, {\n    key: \"_addToPayload\",\n    value: function _addToPayload(source) {\n      var _this4 = this;\n\n      var config = getFluidConfig(source);\n\n      if (config && TreeContext.current) {\n        TreeContext.current.dependencies.add(source);\n      }\n\n      var payload = getPayload(source);\n\n      if (payload) {\n        each(payload, function (node) {\n          return _this4.add(node);\n        });\n      }\n    }\n  }]);\n\n  return AnimatedObject;\n}(Animated);\n/** An array of animated nodes */\n\n\nvar AnimatedArray =\n/*#__PURE__*/\nfunction (_AnimatedObject) {\n  _inherits(AnimatedArray, _AnimatedObject);\n\n  function AnimatedArray(from, to) {\n    var _this5;\n\n    _classCallCheck(this, AnimatedArray);\n\n    _this5 = _possibleConstructorReturn(this, _getPrototypeOf(AnimatedArray).call(this, null));\n    _this5.source = void 0;\n\n    _get(_getPrototypeOf(AnimatedArray.prototype), \"setValue\", _assertThisInitialized(_this5)).call(_assertThisInitialized(_this5), _this5._makeAnimated(from, to));\n\n    return _this5;\n  }\n\n  _createClass(AnimatedArray, [{\n    key: \"getValue\",\n    value: function getValue() {\n      return this.source.map(function (node) {\n        return node.getValue();\n      });\n    }\n  }, {\n    key: \"setValue\",\n    value: function setValue(newValue) {\n      var payload = this.getPayload(); // Reuse the payload when lengths are equal.\n\n      if (newValue && newValue.length == payload.length) {\n        each(payload, function (node, i) {\n          return node.setValue(newValue[i]);\n        });\n      } else {\n        // Remake the payload when length changes.\n        this.source = this._makeAnimated(newValue);\n        this.payload = this._makePayload(this.source);\n      }\n    }\n    /** Convert the `from` and `to` values to an array of `Animated` nodes */\n\n  }, {\n    key: \"_makeAnimated\",\n    value: function _makeAnimated(from) {\n      var to = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : from;\n      return from ? from.map(function (from, i) {\n        return (isAnimatedString(from) ? AnimatedString : AnimatedValue).create(from, to[i]);\n      }) : [];\n    }\n  }], [{\n    key: \"create\",\n    value: function create(from, to) {\n      return new AnimatedArray(from, to);\n    }\n  }]);\n\n  return AnimatedArray;\n}(AnimatedObject);\n\nvar AnimatedProps =\n/*#__PURE__*/\nfunction (_AnimatedObject2) {\n  _inherits(AnimatedProps, _AnimatedObject2);\n\n  /** Equals true when an update is scheduled for \"end of frame\" */\n  function AnimatedProps(update) {\n    var _this6;\n\n    _classCallCheck(this, AnimatedProps);\n\n    _this6 = _possibleConstructorReturn(this, _getPrototypeOf(AnimatedProps).call(this, null));\n    _this6.update = update;\n    _this6.dirty = false;\n    return _this6;\n  }\n\n  _createClass(AnimatedProps, [{\n    key: \"setValue\",\n    value: function setValue(props, context) {\n      if (!props) return; // The constructor passes null.\n\n      if (context) {\n        TreeContext.current = context;\n\n        if (props.style) {\n          var createAnimatedStyle = context.host.createAnimatedStyle;\n          props = _extends(_extends({}, props), {}, {\n            style: createAnimatedStyle(props.style)\n          });\n        }\n      }\n\n      _get(_getPrototypeOf(AnimatedProps.prototype), \"setValue\", this).call(this, props);\n\n      TreeContext.current = null;\n    }\n    /** @internal */\n\n  }, {\n    key: \"onParentChange\",\n    value: function onParentChange(_ref) {\n      var _this7 = this;\n\n      var type = _ref.type;\n\n      if (!this.dirty && type === 'change') {\n        this.dirty = true;\n        frameLoop.onFrame(function () {\n          _this7.dirty = false;\n\n          _this7.update();\n        });\n      }\n    }\n  }]);\n\n  return AnimatedProps;\n}(AnimatedObject);\n\nvar withAnimated = function withAnimated(Component, host) {\n  return forwardRef(function (rawProps, ref) {\n    var instanceRef = useRef(null);\n    var hasInstance = // Function components must use \"forwardRef\" to avoid being\n    // re-rendered on every animation frame.\n    !is.fun(Component) || Component.prototype && Component.prototype.isReactComponent;\n    var forceUpdate = useForceUpdate();\n    var props = new AnimatedProps(function () {\n      var instance = instanceRef.current;\n\n      if (hasInstance && !instance) {\n        return; // The wrapped component forgot to forward its ref.\n      }\n\n      var didUpdate = instance ? host.applyAnimatedValues(instance, props.getValue(true)) : false; // Re-render the component when native updates fail.\n\n      if (didUpdate === false) {\n        forceUpdate();\n      }\n    });\n    var dependencies = new Set();\n    props.setValue(rawProps, {\n      dependencies: dependencies,\n      host: host\n    });\n    useLayoutEffect(function () {\n      each(dependencies, function (dep) {\n        return dep.addChild(props);\n      });\n      return function () {\n        return each(dependencies, function (dep) {\n          return dep.removeChild(props);\n        });\n      };\n    });\n    return (\n      /*#__PURE__*/\n      createElement(Component, _extends({}, host.getComponentProps(props.getValue()), {\n        ref: hasInstance && function (value) {\n          instanceRef.current = updateRef(ref, value);\n        }\n      }))\n    );\n  });\n};\n\nfunction updateRef(ref, value) {\n  if (ref) {\n    if (is.fun(ref)) ref(value);else ref.current = value;\n  }\n\n  return value;\n} // For storing the animated version on the original component\n\n\nvar cacheKey = Symbol.for('AnimatedComponent');\n\nvar createHost = function createHost(components) {\n  var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n      _ref2$applyAnimatedVa = _ref2.applyAnimatedValues,\n      applyAnimatedValues = _ref2$applyAnimatedVa === void 0 ? function () {\n    return false;\n  } : _ref2$applyAnimatedVa,\n      _ref2$createAnimatedS = _ref2.createAnimatedStyle,\n      createAnimatedStyle = _ref2$createAnimatedS === void 0 ? function (style) {\n    return new AnimatedObject(style);\n  } : _ref2$createAnimatedS,\n      _ref2$getComponentPro = _ref2.getComponentProps,\n      getComponentProps = _ref2$getComponentPro === void 0 ? function (props) {\n    return props;\n  } : _ref2$getComponentPro;\n\n  var hostConfig = {\n    applyAnimatedValues: applyAnimatedValues,\n    createAnimatedStyle: createAnimatedStyle,\n    getComponentProps: getComponentProps\n  };\n\n  var animated = function animated(Component) {\n    var displayName = getDisplayName(Component) || 'Anonymous';\n\n    if (is.str(Component)) {\n      Component = withAnimated(Component, hostConfig);\n    } else {\n      Component = Component[cacheKey] || (Component[cacheKey] = withAnimated(Component, hostConfig));\n    }\n\n    Component.displayName = \"Animated(\" + displayName + \")\";\n    return Component;\n  };\n\n  each(components, function (Component, key) {\n    if (!is.str(key)) {\n      key = getDisplayName(Component);\n    }\n\n    animated[key] = animated(Component);\n  });\n  return {\n    animated: animated\n  };\n};\n\nvar getDisplayName = function getDisplayName(arg) {\n  return is.str(arg) ? arg : arg && is.str(arg.displayName) ? arg.displayName : is.fun(arg) && arg.name || null;\n};\n\nexport { Animated, AnimatedArray, AnimatedObject, AnimatedProps, AnimatedString, AnimatedValue, createHost, getAnimated, getPayload, isAnimated, setAnimated };","map":null,"metadata":{},"sourceType":"module"}
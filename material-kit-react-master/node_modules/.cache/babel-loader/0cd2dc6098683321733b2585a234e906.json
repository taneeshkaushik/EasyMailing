{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.propTypes = undefined;\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _utils = require('./utils');\n\nvar _utils2 = _interopRequireDefault(_utils);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n/* eslint-disable react/default-props-match-prop-types */\n\n\nvar convertValidationsToObject = function convertValidationsToObject(validations) {\n  if (typeof validations === 'string') {\n    return validations.split(/,(?![^{[]*[}\\]])/g).reduce(function (validationsAccumulator, validation) {\n      var args = validation.split(':');\n      var validateMethod = args.shift();\n      args = args.map(function (arg) {\n        try {\n          return JSON.parse(arg);\n        } catch (e) {\n          return arg; // It is a string if it can not parse it\n        }\n      });\n\n      if (args.length > 1) {\n        throw new Error('Formsy does not support multiple args on string validations. Use object format of validations instead.');\n      } // Avoid parameter reassignment\n\n\n      var validationsAccumulatorCopy = Object.assign({}, validationsAccumulator);\n      validationsAccumulatorCopy[validateMethod] = args.length ? args[0] : true;\n      return validationsAccumulatorCopy;\n    }, {});\n  }\n\n  return validations || {};\n};\n\nvar propTypes = {\n  innerRef: _propTypes2.default.func,\n  name: _propTypes2.default.string.isRequired,\n  required: _propTypes2.default.oneOfType([_propTypes2.default.bool, _propTypes2.default.object, _propTypes2.default.string]),\n  validations: _propTypes2.default.oneOfType([_propTypes2.default.object, _propTypes2.default.string]),\n  value: _propTypes2.default.any // eslint-disable-line react/forbid-prop-types\n\n};\nexports.propTypes = propTypes;\n\nexports.default = function (Component) {\n  var WrappedComponent = function (_React$Component) {\n    _inherits(WrappedComponent, _React$Component);\n\n    function WrappedComponent(props) {\n      _classCallCheck(this, WrappedComponent);\n\n      var _this = _possibleConstructorReturn(this, (WrappedComponent.__proto__ || Object.getPrototypeOf(WrappedComponent)).call(this, props));\n\n      _this.getErrorMessage = function () {\n        var messages = _this.getErrorMessages();\n\n        return messages.length ? messages[0] : null;\n      };\n\n      _this.getErrorMessages = function () {\n        if (!_this.isValid() || _this.showRequired()) {\n          return _this.state.externalError || _this.state.validationError || [];\n        }\n\n        return [];\n      };\n\n      _this.getValue = function () {\n        return _this.state.value;\n      };\n\n      _this.setValidations = function (validations, required) {\n        // Add validations to the store itself as the props object can not be modified\n        _this.validations = convertValidationsToObject(validations) || {};\n        _this.requiredValidations = required === true ? {\n          isDefaultRequiredValue: true\n        } : convertValidationsToObject(required);\n      };\n\n      _this.setValue = function (value) {\n        var validate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n        if (!validate) {\n          _this.setState({\n            value: value\n          });\n        } else {\n          _this.setState({\n            value: value,\n            isPristine: false\n          }, function () {\n            _this.context.formsy.validate(_this);\n          });\n        }\n      };\n\n      _this.hasValue = function () {\n        return _this.state.value !== '';\n      };\n\n      _this.isFormDisabled = function () {\n        return _this.context.formsy.isFormDisabled();\n      };\n\n      _this.isFormSubmitted = function () {\n        return _this.state.formSubmitted;\n      };\n\n      _this.isPristine = function () {\n        return _this.state.isPristine;\n      };\n\n      _this.isRequired = function () {\n        return !!_this.props.required;\n      };\n\n      _this.isValid = function () {\n        return _this.state.isValid;\n      };\n\n      _this.isValidValue = function (value) {\n        return _this.context.formsy.isValidValue.call(null, _this, value);\n      };\n\n      _this.resetValue = function () {\n        _this.setState({\n          value: _this.state.pristineValue,\n          isPristine: true\n        }, function () {\n          _this.context.formsy.validate(_this);\n        });\n      };\n\n      _this.showError = function () {\n        return !_this.showRequired() && !_this.isValid();\n      };\n\n      _this.showRequired = function () {\n        return _this.state.isRequired;\n      };\n\n      _this.state = {\n        value: props.value,\n        isRequired: false,\n        isValid: true,\n        isPristine: true,\n        pristineValue: props.value,\n        validationError: [],\n        externalError: null,\n        formSubmitted: false\n      };\n      return _this;\n    }\n\n    _createClass(WrappedComponent, [{\n      key: 'componentWillMount',\n      value: function componentWillMount() {\n        var _this2 = this;\n\n        var configure = function configure() {\n          _this2.setValidations(_this2.props.validations, _this2.props.required); // Pass a function instead?\n\n\n          _this2.context.formsy.attachToForm(_this2);\n        };\n\n        if (!this.props.name) {\n          throw new Error('Form Input requires a name property when used');\n        }\n\n        configure();\n      } // We have to make sure the validate method is kept when new props are added\n\n    }, {\n      key: 'componentWillReceiveProps',\n      value: function componentWillReceiveProps(nextProps) {\n        this.setValidations(nextProps.validations, nextProps.required);\n      }\n    }, {\n      key: 'componentDidUpdate',\n      value: function componentDidUpdate(prevProps) {\n        // If the value passed has changed, set it. If value is not passed it will\n        // internally update, and this will never run\n        if (!_utils2.default.isSame(this.props.value, prevProps.value)) {\n          this.setValue(this.props.value);\n        } // If validations or required is changed, run a new validation\n\n\n        if (!_utils2.default.isSame(this.props.validations, prevProps.validations) || !_utils2.default.isSame(this.props.required, prevProps.required)) {\n          this.context.formsy.validate(this);\n        }\n      } // Detach it when component unmounts\n\n    }, {\n      key: 'componentWillUnmount',\n      value: function componentWillUnmount() {\n        this.context.formsy.detachFromForm(this);\n      } // By default, we validate after the value has been set.\n      // A user can override this and pass a second parameter of `false` to skip validation.\n\n    }, {\n      key: 'render',\n      value: function render() {\n        var innerRef = this.props.innerRef;\n\n        var propsForElement = _extends({\n          getErrorMessage: this.getErrorMessage,\n          getErrorMessages: this.getErrorMessages,\n          getValue: this.getValue,\n          hasValue: this.hasValue,\n          isFormDisabled: this.isFormDisabled,\n          isValid: this.isValid,\n          isPristine: this.isPristine,\n          isFormSubmitted: this.isFormSubmitted,\n          isRequired: this.isRequired,\n          isValidValue: this.isValidValue,\n          resetValue: this.resetValue,\n          setValidations: this.setValidations,\n          setValue: this.setValue,\n          showRequired: this.showRequired,\n          showError: this.showError\n        }, this.props);\n\n        if (innerRef) {\n          propsForElement.ref = innerRef;\n        }\n\n        return _react2.default.createElement(Component, propsForElement);\n      }\n    }]);\n\n    return WrappedComponent;\n  }(_react2.default.Component);\n\n  function getDisplayName(component) {\n    return component.displayName || component.name || (typeof component === 'string' ? component : 'Component');\n  }\n\n  WrappedComponent.displayName = 'Formsy(' + getDisplayName(Component) + ')';\n  WrappedComponent.contextTypes = {\n    formsy: _propTypes2.default.object // What about required?\n\n  };\n  WrappedComponent.defaultProps = {\n    required: false,\n    validationError: '',\n    validationErrors: {},\n    validations: null,\n    value: Component.defaultValue\n  };\n  WrappedComponent.propTypes = propTypes;\n  return WrappedComponent;\n};","map":null,"metadata":{},"sourceType":"script"}
{"ast":null,"code":"import _extends from 'babel-runtime/helpers/extends';\nimport _classCallCheck from 'babel-runtime/helpers/classCallCheck';\nimport _possibleConstructorReturn from 'babel-runtime/helpers/possibleConstructorReturn';\nimport _inherits from 'babel-runtime/helpers/inherits';\nimport * as React from 'react';\nimport PopperJS from 'popper.js';\nimport { ManagerContext } from './Manager';\nimport { safeInvoke, unwrapArray } from './utils';\nvar initialStyle = {\n  position: 'absolute',\n  top: 0,\n  left: 0,\n  opacity: 0,\n  pointerEvents: 'none'\n};\nvar initialArrowStyle = {};\nexport var InnerPopper = function (_React$Component) {\n  _inherits(InnerPopper, _React$Component);\n\n  function InnerPopper() {\n    var _temp, _this, _ret;\n\n    _classCallCheck(this, InnerPopper);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.state = {\n      data: undefined,\n      placement: undefined\n    }, _this.popperNode = null, _this.arrowNode = null, _this.setPopperNode = function (popperNode) {\n      if (_this.popperNode === popperNode) return;\n      safeInvoke(_this.props.innerRef, popperNode);\n      _this.popperNode = popperNode;\n      if (!_this.popperInstance) _this.updatePopperInstance();\n    }, _this.setArrowNode = function (arrowNode) {\n      if (_this.arrowNode === arrowNode) return;\n      _this.arrowNode = arrowNode;\n      if (!_this.popperInstance) _this.updatePopperInstance();\n    }, _this.updateStateModifier = {\n      enabled: true,\n      order: 900,\n      fn: function fn(data) {\n        var placement = data.placement;\n\n        _this.setState({\n          data: data,\n          placement: placement\n        }, placement !== _this.state.placement ? _this.scheduleUpdate : undefined);\n\n        return data;\n      }\n    }, _this.getOptions = function () {\n      return {\n        placement: _this.props.placement,\n        eventsEnabled: _this.props.eventsEnabled,\n        positionFixed: _this.props.positionFixed,\n        modifiers: _extends({}, _this.props.modifiers, {\n          arrow: {\n            enabled: !!_this.arrowNode,\n            element: _this.arrowNode\n          },\n          applyStyle: {\n            enabled: false\n          },\n          updateStateModifier: _this.updateStateModifier\n        })\n      };\n    }, _this.getPopperStyle = function () {\n      return !_this.popperNode || !_this.state.data ? initialStyle : _extends({\n        position: _this.state.data.offsets.popper.position\n      }, _this.state.data.styles);\n    }, _this.getPopperPlacement = function () {\n      return !_this.state.data ? undefined : _this.state.placement;\n    }, _this.getArrowStyle = function () {\n      return !_this.arrowNode || !_this.state.data ? initialArrowStyle : _this.state.data.arrowStyles;\n    }, _this.getOutOfBoundariesState = function () {\n      return _this.state.data ? _this.state.data.hide : undefined;\n    }, _this.destroyPopperInstance = function () {\n      if (!_this.popperInstance) return;\n\n      _this.popperInstance.destroy();\n\n      _this.popperInstance = null;\n    }, _this.updatePopperInstance = function () {\n      _this.destroyPopperInstance();\n\n      var _this2 = _this,\n          popperNode = _this2.popperNode;\n      var referenceElement = _this.props.referenceElement;\n      if (!referenceElement || !popperNode) return;\n      _this.popperInstance = new PopperJS(referenceElement, popperNode, _this.getOptions());\n    }, _this.scheduleUpdate = function () {\n      if (_this.popperInstance) {\n        _this.popperInstance.scheduleUpdate();\n      }\n    }, _temp), _possibleConstructorReturn(_this, _ret);\n  }\n\n  InnerPopper.prototype.componentDidUpdate = function componentDidUpdate(prevProps, prevState) {\n    // If the Popper.js options have changed, update the instance (destroy + create)\n    if (this.props.placement !== prevProps.placement || this.props.eventsEnabled !== prevProps.eventsEnabled || this.props.referenceElement !== prevProps.referenceElement || this.props.positionFixed !== prevProps.positionFixed) {\n      this.updatePopperInstance();\n      return;\n    } // A placement difference in state means popper determined a new placement\n    // apart from the props value. By the time the popper element is rendered with\n    // the new position Popper has already measured it, if the place change triggers\n    // a size change it will result in a misaligned popper. So we schedule an update to be sure.\n\n\n    if (prevState.placement !== this.state.placement) {\n      this.scheduleUpdate();\n    }\n  };\n\n  InnerPopper.prototype.componentWillUnmount = function componentWillUnmount() {\n    this.destroyPopperInstance();\n  };\n\n  InnerPopper.prototype.render = function render() {\n    return unwrapArray(this.props.children)({\n      ref: this.setPopperNode,\n      style: this.getPopperStyle(),\n      placement: this.getPopperPlacement(),\n      outOfBoundaries: this.getOutOfBoundariesState(),\n      scheduleUpdate: this.scheduleUpdate,\n      arrowProps: {\n        ref: this.setArrowNode,\n        style: this.getArrowStyle()\n      }\n    });\n  };\n\n  return InnerPopper;\n}(React.Component);\nInnerPopper.defaultProps = {\n  placement: 'bottom',\n  eventsEnabled: true,\n  referenceElement: undefined,\n  positionFixed: false\n};\nvar placements = PopperJS.placements;\nexport { placements };\nexport default function Popper(props) {\n  return React.createElement(ManagerContext.Consumer, null, function (_ref) {\n    var referenceNode = _ref.referenceNode;\n    return React.createElement(InnerPopper, _extends({\n      referenceElement: referenceNode\n    }, props));\n  });\n}","map":null,"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _objectSpread from \"/home/abhishek/Projects/stp/frotend/Fuse-React-v3.0.0-skeleton/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"/home/abhishek/Projects/stp/frotend/Fuse-React-v3.0.0-skeleton/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/abhishek/Projects/stp/frotend/Fuse-React-v3.0.0-skeleton/src/app/main/register/JWTRegisterTab.js\";\nimport React, { useEffect, useRef, useState } from 'react';\nimport Formsy from 'formsy-react';\nimport { TextFieldFormsy, SelectFormsy } from '@fuse';\nimport { Button, InputAdornment, Icon, MenuItem } from '@material-ui/core';\nimport * as authActions from 'app/auth/store/actions';\nimport { useDispatch, useSelector } from 'react-redux';\nimport CancelIcon from '@material-ui/icons/Cancel';\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\nimport axiosInstance from '../axios';\n\nfunction JWTRegisterTab(props) {\n  var dispatch = useDispatch();\n  var register = useSelector(function (_ref) {\n    var auth = _ref.auth;\n    return auth.register;\n  });\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      isFormValid = _useState2[0],\n      setIsFormValid = _useState2[1];\n\n  var formRef = useRef(null);\n  useEffect(function () {\n    if (register.error && (register.error.username || register.error.password || register.error.email)) {\n      formRef.current.updateInputsWithError(_objectSpread({}, register.error));\n      disableButton();\n    }\n  }, [register.error]);\n\n  function disableButton() {\n    setIsFormValid(false);\n  }\n\n  function enableButton() {\n    setIsFormValid(true);\n  }\n\n  function handleSubmit(model) {\n    console.log(model);\n    dispatch(authActions.submitRegister(model));\n  }\n\n  var x;\n\n  function checkUsername(value) {\n    if (value == undefined) return false;\n\n    if (value.length >= 6) {\n      if (x != value) {\n        x = value;\n        return new Promise(function (resolve, reject) {\n          axiosInstance.get('/check-username/' + x + '/').then(function (response) {\n            if (response.data.response) {\n              resolve(true);\n            } else {\n              reject(response.data.error);\n            }\n          });\n        });\n      }\n    }\n\n    x = value;\n  }\n\n  return React.createElement(\"div\", {\n    className: \"w-full\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }, React.createElement(Formsy, {\n    onValidSubmit: handleSubmit,\n    onValid: enableButton,\n    onInvalid: disableButton,\n    ref: formRef,\n    className: \"flex flex-col justify-center w-full\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }, React.createElement(TextFieldFormsy, {\n    className: \"mb-16\",\n    type: \"text\",\n    name: \"username\",\n    label: \"username\",\n    onChange: checkUsername,\n    validations: {\n      minLength: 3\n    },\n    validationErrors: {\n      minLength: 'Min character length is 6' // usernameAvailable: 'Username taken'\n\n    },\n    InputProps: {\n      endAdornment: React.createElement(InputAdornment, {\n        position: \"end\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      }, React.createElement(Icon, {\n        className: \"text-20\",\n        color: \"action\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88\n        },\n        __self: this\n      }, \"person\"))\n    },\n    variant: \"outlined\",\n    required: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }), React.createElement(TextFieldFormsy, {\n    className: \"mb-16\",\n    type: \"text\",\n    name: \"first_name\",\n    label: \"First Name\",\n    validations: 'isAlpha',\n    validationErrors: {\n      isAlpha: 'Only characters are allowed'\n    },\n    InputProps: {\n      endAdornment: React.createElement(InputAdornment, {\n        position: \"end\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103\n        },\n        __self: this\n      }, React.createElement(Icon, {\n        className: \"text-20\",\n        color: \"action\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103\n        },\n        __self: this\n      }, \"person\"))\n    },\n    variant: \"outlined\",\n    required: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93\n    },\n    __self: this\n  }), React.createElement(TextFieldFormsy, {\n    className: \"mb-16\",\n    type: \"text\",\n    name: \"last_name\",\n    label: \"Last Name\",\n    validations: 'isAlpha',\n    validationErrors: {\n      isAlpha: 'Only characters are allowed'\n    },\n    InputProps: {\n      endAdornment: React.createElement(InputAdornment, {\n        position: \"end\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119\n        },\n        __self: this\n      }, React.createElement(Icon, {\n        className: \"text-20\",\n        color: \"action\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119\n        },\n        __self: this\n      }, \"person\"))\n    },\n    variant: \"outlined\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109\n    },\n    __self: this\n  }), React.createElement(SelectFormsy, {\n    className: \"my-16\",\n    name: \"is_staff\",\n    label: \"Role\",\n    value: false,\n    variant: \"outlined\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123\n    },\n    __self: this\n  }, React.createElement(MenuItem, {\n    value: false,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130\n    },\n    __self: this\n  }, \"Student\"), React.createElement(MenuItem, {\n    value: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131\n    },\n    __self: this\n  }, \"Teacher\")), React.createElement(TextFieldFormsy, {\n    className: \"mb-16\",\n    type: \"text\",\n    name: \"email\",\n    label: \"Email\",\n    validations: \"isEmail\",\n    validationErrors: {\n      isEmail: 'Please enter a valid email'\n    },\n    InputProps: {\n      endAdornment: React.createElement(InputAdornment, {\n        position: \"end\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145\n        },\n        __self: this\n      }, React.createElement(Icon, {\n        className: \"text-20\",\n        color: \"action\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145\n        },\n        __self: this\n      }, \"email\"))\n    },\n    variant: \"outlined\",\n    required: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135\n    },\n    __self: this\n  }), React.createElement(TextFieldFormsy, {\n    className: \"mb-16\",\n    type: \"password\",\n    name: \"password\",\n    label: \"Password\",\n    validations: \"equalsField:password-confirm\",\n    validationErrors: {\n      equalsField: 'Passwords do not match'\n    },\n    InputProps: {\n      endAdornment: React.createElement(InputAdornment, {\n        position: \"end\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 161\n        },\n        __self: this\n      }, React.createElement(Icon, {\n        className: \"text-20\",\n        color: \"action\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 161\n        },\n        __self: this\n      }, \"vpn_key\"))\n    },\n    variant: \"outlined\",\n    required: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151\n    },\n    __self: this\n  }), React.createElement(TextFieldFormsy, {\n    className: \"mb-16\",\n    type: \"password\",\n    name: \"password-confirm\",\n    label: \"Confirm Password\",\n    validations: \"equalsField:password\",\n    validationErrors: {\n      equalsField: 'Passwords do not match'\n    },\n    InputProps: {\n      endAdornment: React.createElement(InputAdornment, {\n        position: \"end\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 177\n        },\n        __self: this\n      }, React.createElement(Icon, {\n        className: \"text-20\",\n        color: \"action\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 177\n        },\n        __self: this\n      }, \"vpn_key\"))\n    },\n    variant: \"outlined\",\n    required: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167\n    },\n    __self: this\n  }), React.createElement(Button, {\n    type: \"submit\",\n    variant: \"contained\",\n    color: \"primary\",\n    className: \"w-full mx-auto mt-16 normal-case\",\n    \"aria-label\": \"REGISTER\",\n    disabled: !isFormValid,\n    value: \"legacy\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185\n    },\n    __self: this\n  }, \"Register\")));\n}\n\nexport default JWTRegisterTab;","map":{"version":3,"sources":["/home/abhishek/Projects/stp/frotend/Fuse-React-v3.0.0-skeleton/src/app/main/register/JWTRegisterTab.js"],"names":["React","useEffect","useRef","useState","Formsy","TextFieldFormsy","SelectFormsy","Button","InputAdornment","Icon","MenuItem","authActions","useDispatch","useSelector","CancelIcon","CheckCircleIcon","axiosInstance","JWTRegisterTab","props","dispatch","register","auth","isFormValid","setIsFormValid","formRef","error","username","password","email","current","updateInputsWithError","disableButton","enableButton","handleSubmit","model","console","log","submitRegister","x","checkUsername","value","undefined","length","Promise","resolve","reject","get","then","response","data","minLength","endAdornment","isAlpha","isEmail","equalsField"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,MAA3B,EAAmCC,QAAnC,QAAmD,OAAnD;AACA,OAAOC,MAAP,MAAmB,cAAnB;AACA,SAASC,eAAT,EAA0BC,YAA1B,QAA8C,OAA9C;AACA,SAASC,MAAT,EAAiBC,cAAjB,EAAiCC,IAAjC,EAAuCC,QAAvC,QAAuD,mBAAvD;AACA,OAAO,KAAKC,WAAZ,MAA6B,wBAA7B;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,OAAOC,UAAP,MAAuB,2BAAvB;AACA,OAAOC,eAAP,MAA4B,gCAA5B;AACA,OAAOC,aAAP,MAA0B,UAA1B;;AACA,SAASC,cAAT,CAAwBC,KAAxB,EAA+B;AAC3B,MAAMC,QAAQ,GAAGP,WAAW,EAA5B;AACA,MAAMQ,QAAQ,GAAGP,WAAW,CAAC;AAAA,QAAGQ,IAAH,QAAGA,IAAH;AAAA,WAAcA,IAAI,CAACD,QAAnB;AAAA,GAAD,CAA5B;;AAF2B,kBAIWjB,QAAQ,CAAC,KAAD,CAJnB;AAAA;AAAA,MAIpBmB,WAJoB;AAAA,MAIPC,cAJO;;AAK3B,MAAMC,OAAO,GAAGtB,MAAM,CAAC,IAAD,CAAtB;AAEAD,EAAAA,SAAS,CAAC,YAAM;AACZ,QAAImB,QAAQ,CAACK,KAAT,KAAmBL,QAAQ,CAACK,KAAT,CAAeC,QAAf,IAA2BN,QAAQ,CAACK,KAAT,CAAeE,QAA1C,IAAsDP,QAAQ,CAACK,KAAT,CAAeG,KAAxF,CAAJ,EAAoG;AAChGJ,MAAAA,OAAO,CAACK,OAAR,CAAgBC,qBAAhB,mBACOV,QAAQ,CAACK,KADhB;AAGAM,MAAAA,aAAa;AAChB;AACJ,GAPQ,EAON,CAACX,QAAQ,CAACK,KAAV,CAPM,CAAT;;AASA,WAASM,aAAT,GAAyB;AACrBR,IAAAA,cAAc,CAAC,KAAD,CAAd;AACH;;AAED,WAASS,YAAT,GAAwB;AACpBT,IAAAA,cAAc,CAAC,IAAD,CAAd;AACH;;AAED,WAASU,YAAT,CAAsBC,KAAtB,EAA6B;AACzBC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACAf,IAAAA,QAAQ,CAACR,WAAW,CAAC0B,cAAZ,CAA2BH,KAA3B,CAAD,CAAR;AACH;;AACD,MAAII,CAAJ;;AACA,WAASC,aAAT,CAAuBC,KAAvB,EAA8B;AAC1B,QAAIA,KAAK,IAAIC,SAAb,EACI,OAAO,KAAP;;AACJ,QAAID,KAAK,CAACE,MAAN,IAAgB,CAApB,EAAuB;AACnB,UAAIJ,CAAC,IAAIE,KAAT,EAAgB;AACZF,QAAAA,CAAC,GAAGE,KAAJ;AACA,eAAO,IAAIG,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC7B,UAAAA,aAAa,CAAC8B,GAAd,CAAkB,qBAAqBR,CAArB,GAAyB,GAA3C,EACKS,IADL,CACU,UAAAC,QAAQ,EAAI;AACd,gBAAIA,QAAQ,CAACC,IAAT,CAAcD,QAAlB,EAA4B;AACxBJ,cAAAA,OAAO,CAAC,IAAD,CAAP;AACH,aAFD,MAGK;AACDC,cAAAA,MAAM,CAACG,QAAQ,CAACC,IAAT,CAAcxB,KAAf,CAAN;AACH;AACJ,WARL;AASH,SAVM,CAAP;AAWH;AACJ;;AACDa,IAAAA,CAAC,GAAGE,KAAJ;AACH;;AAED,SAEI;AAAK,IAAA,SAAS,EAAC,QAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,MAAD;AACI,IAAA,aAAa,EAAEP,YADnB;AAEI,IAAA,OAAO,EAAED,YAFb;AAGI,IAAA,SAAS,EAAED,aAHf;AAII,IAAA,GAAG,EAAEP,OAJT;AAKI,IAAA,SAAS,EAAC,qCALd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAQI,oBAAC,eAAD;AAEI,IAAA,SAAS,EAAC,OAFd;AAGI,IAAA,IAAI,EAAC,MAHT;AAII,IAAA,IAAI,EAAC,UAJT;AAKI,IAAA,KAAK,EAAC,UALV;AAOI,IAAA,QAAQ,EAAEe,aAPd;AAQI,IAAA,WAAW,EAAE;AACTW,MAAAA,SAAS,EAAE;AADF,KARjB;AAWI,IAAA,gBAAgB,EAAE;AACdA,MAAAA,SAAS,EAAE,2BADG,CAEd;;AAFc,KAXtB;AAeI,IAAA,UAAU,EAAE;AACRC,MAAAA,YAAY,EAAE,oBAAC,cAAD;AAAgB,QAAA,QAAQ,EAAC,KAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA+B,oBAAC,IAAD;AAAM,QAAA,SAAS,EAAC,SAAhB;AAA0B,QAAA,KAAK,EAAC,QAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAA/B;AADN,KAfhB;AAkBI,IAAA,OAAO,EAAC,UAlBZ;AAmBI,IAAA,QAAQ,MAnBZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IARJ,EA6BI,oBAAC,eAAD;AACI,IAAA,SAAS,EAAC,OADd;AAEI,IAAA,IAAI,EAAC,MAFT;AAGI,IAAA,IAAI,EAAC,YAHT;AAII,IAAA,KAAK,EAAC,YAJV;AAKI,IAAA,WAAW,EAAE,SALjB;AAMI,IAAA,gBAAgB,EAAE;AACdC,MAAAA,OAAO,EAAE;AADK,KANtB;AASI,IAAA,UAAU,EAAE;AACRD,MAAAA,YAAY,EAAE,oBAAC,cAAD;AAAgB,QAAA,QAAQ,EAAC,KAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA+B,oBAAC,IAAD;AAAM,QAAA,SAAS,EAAC,SAAhB;AAA0B,QAAA,KAAK,EAAC,QAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAA/B;AADN,KAThB;AAYI,IAAA,OAAO,EAAC,UAZZ;AAaI,IAAA,QAAQ,MAbZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IA7BJ,EA6CI,oBAAC,eAAD;AACI,IAAA,SAAS,EAAC,OADd;AAEI,IAAA,IAAI,EAAC,MAFT;AAGI,IAAA,IAAI,EAAC,WAHT;AAII,IAAA,KAAK,EAAC,WAJV;AAKI,IAAA,WAAW,EAAE,SALjB;AAMI,IAAA,gBAAgB,EAAE;AACdC,MAAAA,OAAO,EAAE;AADK,KANtB;AASI,IAAA,UAAU,EAAE;AACRD,MAAAA,YAAY,EAAE,oBAAC,cAAD;AAAgB,QAAA,QAAQ,EAAC,KAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA+B,oBAAC,IAAD;AAAM,QAAA,SAAS,EAAC,SAAhB;AAA0B,QAAA,KAAK,EAAC,QAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAA/B;AADN,KAThB;AAYI,IAAA,OAAO,EAAC,UAZZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IA7CJ,EA2DI,oBAAC,YAAD;AACI,IAAA,SAAS,EAAC,OADd;AAEI,IAAA,IAAI,EAAC,UAFT;AAGI,IAAA,KAAK,EAAC,MAHV;AAII,IAAA,KAAK,EAAE,KAJX;AAKI,IAAA,OAAO,EAAC,UALZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAOI,oBAAC,QAAD;AAAU,IAAA,KAAK,EAAE,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAPJ,EAQI,oBAAC,QAAD;AAAU,IAAA,KAAK,EAAE,IAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eARJ,CA3DJ,EAuEI,oBAAC,eAAD;AACI,IAAA,SAAS,EAAC,OADd;AAEI,IAAA,IAAI,EAAC,MAFT;AAGI,IAAA,IAAI,EAAC,OAHT;AAII,IAAA,KAAK,EAAC,OAJV;AAKI,IAAA,WAAW,EAAC,SALhB;AAMI,IAAA,gBAAgB,EAAE;AACdE,MAAAA,OAAO,EAAE;AADK,KANtB;AASI,IAAA,UAAU,EAAE;AACRF,MAAAA,YAAY,EAAE,oBAAC,cAAD;AAAgB,QAAA,QAAQ,EAAC,KAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA+B,oBAAC,IAAD;AAAM,QAAA,SAAS,EAAC,SAAhB;AAA0B,QAAA,KAAK,EAAC,QAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBAA/B;AADN,KAThB;AAYI,IAAA,OAAO,EAAC,UAZZ;AAaI,IAAA,QAAQ,MAbZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAvEJ,EAuFI,oBAAC,eAAD;AACI,IAAA,SAAS,EAAC,OADd;AAEI,IAAA,IAAI,EAAC,UAFT;AAGI,IAAA,IAAI,EAAC,UAHT;AAII,IAAA,KAAK,EAAC,UAJV;AAKI,IAAA,WAAW,EAAC,8BALhB;AAMI,IAAA,gBAAgB,EAAE;AACdG,MAAAA,WAAW,EAAE;AADC,KANtB;AASI,IAAA,UAAU,EAAE;AACRH,MAAAA,YAAY,EAAE,oBAAC,cAAD;AAAgB,QAAA,QAAQ,EAAC,KAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA+B,oBAAC,IAAD;AAAM,QAAA,SAAS,EAAC,SAAhB;AAA0B,QAAA,KAAK,EAAC,QAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAA/B;AADN,KAThB;AAYI,IAAA,OAAO,EAAC,UAZZ;AAaI,IAAA,QAAQ,MAbZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAvFJ,EAuGI,oBAAC,eAAD;AACI,IAAA,SAAS,EAAC,OADd;AAEI,IAAA,IAAI,EAAC,UAFT;AAGI,IAAA,IAAI,EAAC,kBAHT;AAII,IAAA,KAAK,EAAC,kBAJV;AAKI,IAAA,WAAW,EAAC,sBALhB;AAMI,IAAA,gBAAgB,EAAE;AACdG,MAAAA,WAAW,EAAE;AADC,KANtB;AASI,IAAA,UAAU,EAAE;AACRH,MAAAA,YAAY,EAAE,oBAAC,cAAD;AAAgB,QAAA,QAAQ,EAAC,KAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA+B,oBAAC,IAAD;AAAM,QAAA,SAAS,EAAC,SAAhB;AAA0B,QAAA,KAAK,EAAC,QAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAA/B;AADN,KAThB;AAYI,IAAA,OAAO,EAAC,UAZZ;AAaI,IAAA,QAAQ,MAbZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAvGJ,EAyHI,oBAAC,MAAD;AACI,IAAA,IAAI,EAAC,QADT;AAEI,IAAA,OAAO,EAAC,WAFZ;AAGI,IAAA,KAAK,EAAC,SAHV;AAII,IAAA,SAAS,EAAC,kCAJd;AAKI,kBAAW,UALf;AAMI,IAAA,QAAQ,EAAE,CAAC7B,WANf;AAOI,IAAA,KAAK,EAAC,QAPV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAzHJ,CADJ,CAFJ;AA4IH;;AAED,eAAeL,cAAf","sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport Formsy from 'formsy-react';\nimport { TextFieldFormsy, SelectFormsy } from '@fuse';\nimport { Button, InputAdornment, Icon, MenuItem } from '@material-ui/core';\nimport * as authActions from 'app/auth/store/actions';\nimport { useDispatch, useSelector } from 'react-redux';\nimport CancelIcon from '@material-ui/icons/Cancel';\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\nimport axiosInstance from '../axios';\nfunction JWTRegisterTab(props) {\n    const dispatch = useDispatch();\n    const register = useSelector(({ auth }) => auth.register);\n\n    const [isFormValid, setIsFormValid] = useState(false);\n    const formRef = useRef(null);\n\n    useEffect(() => {\n        if (register.error && (register.error.username || register.error.password || register.error.email)) {\n            formRef.current.updateInputsWithError({\n                ...register.error\n            });\n            disableButton();\n        }\n    }, [register.error]);\n\n    function disableButton() {\n        setIsFormValid(false);\n    }\n\n    function enableButton() {\n        setIsFormValid(true);\n    }\n\n    function handleSubmit(model) {\n        console.log(model);\n        dispatch(authActions.submitRegister(model));\n    }\n    var x;\n    function checkUsername(value) {\n        if (value == undefined)\n            return false;\n        if (value.length >= 6) {\n            if (x != value) {\n                x = value;\n                return new Promise((resolve, reject) => {\n                    axiosInstance.get('/check-username/' + x + '/')\n                        .then(response => {\n                            if (response.data.response) {\n                                resolve(true);\n                            }\n                            else {\n                                reject(response.data.error);\n                            }\n                        });\n                });\n            }\n        }\n        x = value;\n    }\n\n    return (\n\n        <div className=\"w-full\">\n            <Formsy\n                onValidSubmit={handleSubmit}\n                onValid={enableButton}\n                onInvalid={disableButton}\n                ref={formRef}\n                className=\"flex flex-col justify-center w-full\"\n            >\n\n                <TextFieldFormsy\n\n                    className=\"mb-16\"\n                    type=\"text\"\n                    name=\"username\"\n                    label=\"username\"\n\n                    onChange={checkUsername}\n                    validations={{\n                        minLength: 3\n                    }}\n                    validationErrors={{\n                        minLength: 'Min character length is 6',\n                        // usernameAvailable: 'Username taken'\n                    }}\n                    InputProps={{\n                        endAdornment: <InputAdornment position=\"end\"><Icon className=\"text-20\" color=\"action\">person</Icon></InputAdornment>\n                    }}\n                    variant=\"outlined\"\n                    required\n                />\n                <TextFieldFormsy\n                    className=\"mb-16\"\n                    type=\"text\"\n                    name=\"first_name\"\n                    label=\"First Name\"\n                    validations={'isAlpha'}\n                    validationErrors={{\n                        isAlpha: 'Only characters are allowed'\n                    }}\n                    InputProps={{\n                        endAdornment: <InputAdornment position=\"end\"><Icon className=\"text-20\" color=\"action\">person</Icon></InputAdornment>\n                    }}\n                    variant=\"outlined\"\n                    required\n                />\n\n                <TextFieldFormsy\n                    className=\"mb-16\"\n                    type=\"text\"\n                    name=\"last_name\"\n                    label=\"Last Name\"\n                    validations={'isAlpha'}\n                    validationErrors={{\n                        isAlpha: 'Only characters are allowed'\n                    }}\n                    InputProps={{\n                        endAdornment: <InputAdornment position=\"end\"><Icon className=\"text-20\" color=\"action\">person</Icon></InputAdornment>\n                    }}\n                    variant=\"outlined\"\n                />\n                <SelectFormsy\n                    className=\"my-16\"\n                    name=\"is_staff\"\n                    label=\"Role\"\n                    value={false}\n                    variant=\"outlined\"\n                >\n                    <MenuItem value={false}>Student</MenuItem>\n                    <MenuItem value={true}>Teacher</MenuItem>\n                </SelectFormsy>\n\n\n                <TextFieldFormsy\n                    className=\"mb-16\"\n                    type=\"text\"\n                    name=\"email\"\n                    label=\"Email\"\n                    validations=\"isEmail\"\n                    validationErrors={{\n                        isEmail: 'Please enter a valid email'\n                    }}\n                    InputProps={{\n                        endAdornment: <InputAdornment position=\"end\"><Icon className=\"text-20\" color=\"action\">email</Icon></InputAdornment>\n                    }}\n                    variant=\"outlined\"\n                    required\n                />\n\n                <TextFieldFormsy\n                    className=\"mb-16\"\n                    type=\"password\"\n                    name=\"password\"\n                    label=\"Password\"\n                    validations=\"equalsField:password-confirm\"\n                    validationErrors={{\n                        equalsField: 'Passwords do not match'\n                    }}\n                    InputProps={{\n                        endAdornment: <InputAdornment position=\"end\"><Icon className=\"text-20\" color=\"action\">vpn_key</Icon></InputAdornment>\n                    }}\n                    variant=\"outlined\"\n                    required\n                />\n\n                <TextFieldFormsy\n                    className=\"mb-16\"\n                    type=\"password\"\n                    name=\"password-confirm\"\n                    label=\"Confirm Password\"\n                    validations=\"equalsField:password\"\n                    validationErrors={{\n                        equalsField: 'Passwords do not match'\n                    }}\n                    InputProps={{\n                        endAdornment: <InputAdornment position=\"end\"><Icon className=\"text-20\" color=\"action\">vpn_key</Icon></InputAdornment>\n                    }}\n                    variant=\"outlined\"\n                    required\n                />\n\n\n\n                <Button\n                    type=\"submit\"\n                    variant=\"contained\"\n                    color=\"primary\"\n                    className=\"w-full mx-auto mt-16 normal-case\"\n                    aria-label=\"REGISTER\"\n                    disabled={!isFormValid}\n                    value=\"legacy\"\n                >\n                    Register\n                </Button>\n\n            </Formsy>\n\n        </div>\n    );\n}\n\nexport default JWTRegisterTab;\n"]},"metadata":{},"sourceType":"module"}
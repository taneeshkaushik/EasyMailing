{"ast":null,"code":"module.exports = LinearLayoutVector;\nLinearLayoutVector.prototype.getLength = getLength;\nLinearLayoutVector.prototype.setLength = setLength;\nLinearLayoutVector.prototype.getDefaultSize = getDefaultSize;\nLinearLayoutVector.prototype.setDefaultSize = setDefaultSize;\nLinearLayoutVector.prototype.getAxisOffset = getAxisOffset;\nLinearLayoutVector.prototype.setAxisOffset = setAxisOffset;\nLinearLayoutVector.prototype.getGap = getGap;\nLinearLayoutVector.prototype.setGap = setGap;\nLinearLayoutVector.prototype.getItemSize = getItemSize;\nLinearLayoutVector.prototype.setItemSize = setItemSize;\nLinearLayoutVector.prototype.insert = insert;\nLinearLayoutVector.prototype.remove = remove;\nLinearLayoutVector.prototype.start = start;\nLinearLayoutVector.prototype.end = end;\nLinearLayoutVector.prototype.indexOf = indexOf;\nLinearLayoutVector.prototype.clear = clear;\nLinearLayoutVector.prototype.toString = toString;\n/**\n * A sparse array of sizes that represent items in a dimension.\n *\n * Provides efficient support for finding the cumulative distance to\n * the start/end of an item along the axis, and similarly for finding the\n * index of the item at a particular distance.\n *\n * Default size is used for items whose size hasn't been specified.\n */\n\nfunction LinearLayoutVector(block_size) {\n  if (block_size === undefined) {\n    block_size = 128;\n  } // Assumption: vector elements (sizes) will typically be set in\n  // small ranges that reflect localized scrolling.  Allocate vector\n  // elements in blocks of block_size, which must be a power of 2.\n  // block_shift is the power of 2 and block_mask masks off as many\n  // low order bits.  The block_table contains all of the allocated\n  // blocks and has length/block_size elements which are allocated lazily.\n\n\n  var pow = Math.log(block_size) / Math.log(2) | 0,\n      size = Math.pow(2, pow),\n      mask = size - 1;\n  this.block_size = size;\n  this.block_shift = pow;\n  this.block_mask = mask;\n  this.block_table = [];\n  this._defaultSize = 0;\n  this._axisOffset = 0;\n  this._gap = 0; // Sorted Vector of intervals for the pending removes, in descending order,\n  // for example [7, 5, 3, 1] for the removes at 7, 6, 5, 3, 2, 1\n\n  this.removes = null; // Sorted Vector of intervals for the pending inserts, in ascending order,\n  // for example [1, 3, 5, 7] for the inserts at 1, 2, 3, 5, 6, 7\n\n  this.inserts = null;\n  this._length = 0; // What the length will be after any pending changes are flushed.\n\n  this._pendingLength = -1;\n}\n/**\n * The number of item size valued elements.\n *\n * @default 0\n */\n\n\nfunction getLength() {\n  return this._pendingLength === -1 ? this._length : this._pendingLength;\n}\n/**\n * @private\n * Grows or truncates the vector to be the specified newLength.\n * When truncating, releases empty blocks and sets to NaN any values\n * in the last block beyond the newLength.\n */\n\n\nfunction setLength(newLength) {\n  flushPendingChanges.call(this);\n\n  if (newLength < this._length) {\n    // Clear any remaining non-NaN values in the last block\n    var blockIndex = newLength >> this.block_shift;\n    var endIndex = Math.min(blockIndex * this.block_size + this.block_size, this._length) - 1;\n    clearInterval.call(this, newLength, endIndex);\n  }\n\n  this._length = newLength; // update the table\n\n  var partialBlock = (this._length & this.block_mask) === 0 ? 0 : 1;\n  this.block_table.length = (this._length >> this.block_shift) + partialBlock;\n} //----------------------------------\n//  defaultSize\n//----------------------------------\n\n/**\n * The size of items whose size was not specified with setItemSize.\n *\n * @default 0\n */\n\n\nfunction getDefaultSize() {\n  return this._defaultSize;\n}\n/**\n * @private\n */\n\n\nfunction setDefaultSize(value) {\n  this._defaultSize = value;\n} //----------------------------------\n//  axisOffset\n//----------------------------------\n\n/**\n * The offset of the first item from the origin in the majorAxis\n * direction. This is useful when implementing padding,\n * in addition to gaps, for virtual layouts.\n *\n * @see #gap\n */\n\n\nfunction getAxisOffset() {\n  return this._axisOffset;\n}\n/**\n * @private\n */\n\n\nfunction setAxisOffset(value) {\n  this._axisOffset = value;\n} //----------------------------------\n//  gap\n//----------------------------------\n\n/**\n * The distance between items.\n *\n * @default 0\n */\n\n\nfunction getGap() {\n  return this._gap;\n}\n/**\n * @private\n */\n\n\nfunction setGap(value) {\n  this._gap = value;\n} //--------------------------------------------------------------------------\n//\n//  Methods\n//\n//--------------------------------------------------------------------------\n\n/**\n * Return the size of the item at index.  If no size was ever\n * specified then then the defaultSize is returned.\n *\n * @param index The item's index.\n * @see defaultSize\n */\n\n\nfunction getItemSize(index) {\n  flushPendingChanges.call(this);\n  var block = this.block_table[index >> this.block_shift];\n\n  if (block) {\n    var value = block.sizes[index & this.block_mask];\n    return value !== value ? this._defaultSize : value;\n  } else {\n    return this._defaultSize;\n  }\n}\n/**\n * Set the size of the item at index. If an index is\n * set to <code>NaN</code> then subsequent calls to get\n * will return the defaultSize.\n *\n * @param index The item's index.\n * @param value The item's size.\n * @see defaultSize\n */\n\n\nfunction setItemSize(index, value) {\n  flushPendingChanges.call(this);\n\n  if (index >= this.getLength()) {\n    throw new Error(\"Invalid index and all that.\");\n  }\n\n  var blockIndex = index >> this.block_shift;\n  var block = this.block_table[blockIndex];\n\n  if (!block) {\n    block = this.block_table[blockIndex] = new Block(this.block_size);\n  }\n\n  var sizesIndex = index & this.block_mask;\n  var sizes = block.sizes;\n  var oldValue = sizes[sizesIndex];\n\n  if (oldValue === value) {\n    return;\n  }\n\n  if (oldValue !== oldValue) {\n    block.defaultCount -= 1;\n    block.sizesSum += value;\n  } else if (value !== value) {\n    block.defaultCount += 1;\n    block.sizesSum -= oldValue;\n  } else {\n    block.sizesSum += value - oldValue;\n  }\n\n  sizes[sizesIndex] = value;\n}\n/**\n * Make room for a new item at index by shifting all of the sizes\n * one position to the right, beginning with startIndex.\n *\n * The value at index will be NaN.\n *\n * This is similar to array.splice(index, 0, NaN).\n *\n * @param index The position of the new NaN size item.\n */\n\n\nfunction insert(index) {\n  // We don't support interleaved pending inserts and removes\n  if (this.removes) {\n    flushPendingChanges.call(this);\n  }\n\n  if (this.inserts) {\n    // Update the last interval or add a new one?\n    var lastIndex = this.inserts.length - 1;\n    var intervalEnd = this.inserts[lastIndex];\n\n    if (index === intervalEnd + 1) {\n      // Extend the end of the interval\n      this.inserts[lastIndex] = index;\n    } else if (index > intervalEnd) {\n      // New interval\n      this.inserts.push(index);\n      this.inserts.push(index);\n    } else {\n      // We can't support pending inserts that are not ascending\n      flushPendingChanges.call(this);\n    }\n  }\n\n  this._pendingLength = Math.max(this._length, index + 1);\n\n  if (!this.inserts) {\n    this.inserts = [];\n    this.inserts.push(index);\n    this.inserts.push(index);\n  }\n}\n/**\n * Remove index by shifting all of the sizes one position to the left,\n * begining with index+1.\n *\n * This is similar to array.splice(index, 1).\n *\n * @param index The position to be removed.\n */\n\n\nfunction remove(index) {\n  // We don't support interleaved pending inserts and removes\n  if (this.inserts) {\n    flushPendingChanges.call(this);\n  } // length getter takes into account pending inserts/removes but doesn't flush\n\n\n  if (index >= this.getLength()) {\n    throw new Error(\"Invalid index and all that.\");\n  }\n\n  if (this.removes) {\n    // Update the last interval or add a new one?\n    var lastIndex = this.removes.length - 1;\n    var intervalStart = this.removes[lastIndex];\n\n    if (index === intervalStart - 1) {\n      // Extend the start of the interval\n      this.removes[lastIndex] = index;\n    } else if (index < intervalStart) {\n      // New interval\n      this.removes.push(index);\n      this.removes.push(index);\n    } else {\n      // We can't support pending removes that are not descending\n      flushPendingChanges.call(this);\n    }\n  }\n\n  this._pendingLength = this._pendingLength === -1 ? length - 1 : this._pendingLength - 1;\n\n  if (!this.removes) {\n    this.removes = [];\n    this.removes.push(index);\n    this.removes.push(index);\n  }\n}\n/**\n * @private\n * Returns true when all sizes in the specified interval for the block are NaN\n */\n\n\nfunction isIntervalClear(block, index, count) {\n  var sizes = block.sizes,\n      size;\n\n  for (count += index; index < count; ++index) {\n    if ((size = sizes[index]) === size) {\n      return false;\n    }\n  }\n\n  return true;\n}\n/**\n * @private\n * Copies elements between blocks. Indices relative to the blocks.\n * If srcBlock is null, then it fills the destination with NaNs.\n * The case of srcBlock === dstBlock is also supported.\n * The caller must ensure that count is within range.\n */\n\n\nfunction inBlockCopy(dstBlock, dstIndexStart, srcBlock, srcIndexStart, count) {\n  var ascending = dstIndexStart < srcIndexStart;\n  var srcIndex = ascending ? srcIndexStart : srcIndexStart + count - 1;\n  var dstIndex = ascending ? dstIndexStart : dstIndexStart + count - 1;\n  var increment = ascending ? +1 : -1;\n  var dstSizes = dstBlock.sizes;\n  var srcSizes = srcBlock ? srcBlock.sizes : null;\n  var dstValue = NaN;\n  var srcValue = NaN;\n  var sizesSumDelta = 0; // How much the destination sizesSum will change\n\n  var defaultCountDelta = 0; // How much the destination defaultCount will change\n\n  while (count > 0) {\n    if (srcSizes) {\n      srcValue = srcSizes[srcIndex];\n    }\n\n    dstValue = dstSizes[dstIndex]; // Are the values different?\n\n    if (srcValue !== dstValue) {\n      // Triple '=' to handle NaN comparison\n      // Are we removing a default size or a chached size?\n      if (dstValue !== dstValue) {\n        defaultCountDelta--;\n      } else {\n        sizesSumDelta -= dstValue;\n      } // Are we adding a default size or a cached size?\n\n\n      if (srcValue !== srcValue) {\n        defaultCountDelta++;\n      } else {\n        sizesSumDelta += srcValue;\n      }\n\n      dstSizes[dstIndex] = srcValue;\n    }\n\n    srcIndex += increment;\n    dstIndex += increment;\n    count--;\n  }\n\n  dstBlock.sizesSum += sizesSumDelta;\n  dstBlock.defaultCount += defaultCountDelta;\n}\n/**\n * @private\n * Copies 'count' elements from dstIndex to srcIndex.\n * Safe for overlapping source and destination intervals.\n * If any blocks are left full of NaNs, they will be deallcated.\n */\n\n\nfunction copyInterval(dstIndex, srcIndex, count) {\n  var ascending = dstIndex < srcIndex;\n\n  if (!ascending) {\n    dstIndex += count - 1;\n    srcIndex += count - 1;\n  }\n\n  while (count > 0) {\n    // Figure out destination block\n    var dstBlockIndex = dstIndex >> this.block_shift;\n    var dstSizesIndex = dstIndex & this.block_mask;\n    var dstBlock = this.block_table[dstBlockIndex]; // Figure out source block\n\n    var srcBlockIndex = srcIndex >> this.block_shift;\n    var srcSizesIndex = srcIndex & this.block_mask;\n    var srcBlock = this.block_table[srcBlockIndex]; // Figure out number of elements to copy\n\n    var copyCount = ascending ? Math.min(this.block_size - dstSizesIndex, this.block_size - srcSizesIndex) : 1 + Math.min(dstSizesIndex, srcSizesIndex);\n    copyCount = Math.min(copyCount, count); // Figure out the start index for each block\n\n    var dstStartIndex = ascending ? dstSizesIndex : dstSizesIndex - copyCount + 1;\n    var srcStartIndex = ascending ? srcSizesIndex : srcSizesIndex - copyCount + 1; // Check whether a destination block needs to be allocated.\n    // Allocate only if there are non-default values to be copied from the source.\n\n    if (srcBlock && !dstBlock && isIntervalClear(srcBlock, srcStartIndex, copyCount)) {\n      dstBlock = new Block(this.block_size);\n      this.block_table[dstBlockIndex] = dstBlock;\n    } // Copy to non-null dstBlock, srcBlock can be null\n\n\n    if (dstBlock) {\n      inBlockCopy(dstBlock, dstStartIndex, srcBlock, srcStartIndex, copyCount); // If this is the last time we're visiting this block, and it contains\n      // only NaNs, then remove it\n\n      if (dstBlock.defaultCount === this.block_size) {\n        var blockEndReached = ascending ? dstStartIndex + copyCount === this.block_size : dstStartIndex === 0;\n        if (blockEndReached || count === copyCount) this.block_table[dstBlockIndex] = null;\n      }\n    }\n\n    dstIndex += ascending ? copyCount : -copyCount;\n    srcIndex += ascending ? copyCount : -copyCount;\n    count -= copyCount;\n  }\n}\n/**\n * @private\n * Sets all elements within the specified interval to NaN (both ends inclusive).\n * Releases empty blocks.\n */\n\n\nfunction clearInterval(start, end) {\n  while (start <= end) {\n    // Figure our destination block\n    var blockIndex = start >> this.block_shift;\n    var sizesIndex = start & this.block_mask;\n    var block = this.block_table[blockIndex]; // Figure out number of elements to clear in this iteration\n    // Make sure we don't clear more items than requested\n\n    var clearCount = this.block_size - sizesIndex;\n    clearCount = Math.min(clearCount, end - start + 1);\n\n    if (block) {\n      if (clearCount === this.block_size) {\n        this.block_table[blockIndex] = null;\n      } else {\n        // Copying from null source block is equivalent of clearing the destination block\n        inBlockCopy(block, sizesIndex, null\n        /*srcBlock*/\n        , 0, clearCount); // If the blockDst contains only default sizes, then remove the block\n\n        if (block.defaultCount === this.block_size) {\n          this.block_table[blockIndex] = null;\n        }\n      }\n    }\n\n    start += clearCount;\n  }\n}\n/**\n * @private\n * Removes the elements designated by the intervals and truncates\n * the LinearLayoutVector to the new length.\n * 'intervals' is a Vector of descending intervals [7, 5, 3, 1]\n */\n\n\nfunction removeIntervals(intervals) {\n  var intervalsCount = intervals.length;\n\n  if (intervalsCount === 0) {\n    return;\n  } // Adding final nextIntervalStart value (see below).\n\n\n  intervals.reverse(); // turn into ascending, for example [7, 5, 3, 1] --> [1, 3, 5, 7]\n\n  intervals.push(this.getLength()); // Move the elements\n\n  var dstStart = intervals[0];\n  var srcStart;\n  var count;\n  var i = 0;\n\n  do {\n    var intervalEnd = intervals[i + 1];\n    var nextIntervalStart = intervals[i + 2];\n    i += 2; // Start copy from after the end of current interval\n\n    srcStart = intervalEnd + 1; // copy all elements up to the start of the next interval.\n\n    count = nextIntervalStart - srcStart;\n    copyInterval.call(this, dstStart, srcStart, count);\n    dstStart += count;\n  } while (i < intervalsCount); // Truncate the excess elements.\n\n\n  this.setLength(dstStart);\n}\n/**\n * @private\n * Increases the length and inserts NaN values for the elements designated by the intervals.\n * 'intervals' is a Vector of ascending intervals [1, 3, 5, 7]\n */\n\n\nfunction insertIntervals(intervals, newLength) {\n  var intervalsCount = intervals.length;\n\n  if (intervalsCount === 0) {\n    return;\n  } // Allocate enough space for the insertions, all the elements\n  // allocated are NaN by default.\n\n\n  var oldLength = this.getLength();\n  this.setLength(newLength);\n  var srcEnd = oldLength - 1;\n  var dstEnd = newLength - 1;\n  var i = intervalsCount - 2;\n\n  while (i >= 0) {\n    // Find current interval\n    var intervalStart = intervals[i];\n    var intervalEnd = intervals[i + 1];\n    i -= 2; // Start after the current interval\n\n    var dstStart = intervalEnd + 1;\n    var copyCount = dstEnd - dstStart + 1;\n    var srcStart = srcEnd - copyCount + 1;\n    copyInterval.call(this, dstStart, srcStart, copyCount);\n    dstStart -= copyCount;\n    dstEnd = intervalStart - 1; // Fill in with default NaN values after the copy\n\n    clearInterval.call(this, intervalStart, intervalEnd);\n  }\n}\n/**\n * @private\n * Processes any pending removes or pending inserts.\n */\n\n\nfunction flushPendingChanges() {\n  var intervals;\n\n  if (this.removes) {\n    intervals = this.removes;\n    this.removes = null;\n    this._pendingLength = -1;\n    removeIntervals.call(this, intervals);\n  } else if (this.inserts) {\n    intervals = this.inserts;\n    var newLength = this._pendingLength;\n    this.inserts = null;\n    this._pendingLength = -1;\n    insertIntervals.call(this, intervals, newLength);\n  }\n}\n/**\n * The cumulative distance to the start of the item at index, including\n * the gaps between items and the axisOffset.\n *\n * The value of start(0) is axisOffset.\n *\n * Equivalent to:\n * <pre>\n * var distance = this.getAxisOffset();\n * for (var i = 0; i &lt; index; i++)\n *     distance += get(i);\n * return distance + (gap * index);\n * </pre>\n *\n * The actual implementation is relatively efficient.\n *\n * @param index The item's index.\n * @see #end\n */\n\n\nfunction start(index) {\n  flushPendingChanges.call(this);\n\n  if (this._length === 0 || index === 0) {\n    return this.getAxisOffset();\n  }\n\n  if (index >= this._length) {\n    throw new Error(\"Invalid index and all that.\");\n  }\n\n  var distance = this.getAxisOffset();\n  var blockIndex = index >> this.block_shift;\n\n  for (var i = 0; i < blockIndex; i++) {\n    var block = this.block_table[i];\n    distance += block ? block.sizesSum + block.defaultCount * this._defaultSize : this.block_size * this._defaultSize;\n  }\n\n  var lastBlock = this.block_table[blockIndex];\n  var lastBlockOffset = index & ~this.block_mask;\n  var lastBlockLength = index - lastBlockOffset;\n\n  if (lastBlock) {\n    var sizes = lastBlock.sizes;\n\n    for (i = 0; i < lastBlockLength; i++) {\n      var size = sizes[i];\n      distance += size !== size ? this._defaultSize : size;\n    }\n  } else {\n    distance += this._defaultSize * lastBlockLength;\n  }\n\n  distance += index * this.getGap();\n  return distance;\n}\n/**\n * The cumulative distance to the end of the item at index, including\n * the gaps between items.\n *\n * If <code>index &lt;(length-1)</code> then the value of this\n * function is defined as:\n * <code>start(index) + get(index)</code>.\n *\n * @param index The item's index.\n * @see #start\n */\n\n\nfunction end(index) {\n  flushPendingChanges.call(this);\n  return this.start(index) + this.getItemSize(index);\n}\n/**\n * Returns the index of the item that overlaps the specified distance.\n *\n * The item at index <code>i</code> overlaps a distance value\n * if <code>start(i) &lt;= distance &lt; end(i)</code>.\n *\n * If no such item exists, -1 is returned.\n */\n\n\nfunction indexOf(distance) {\n  flushPendingChanges.call(this);\n  var index = indexOfInternal.call(this, distance);\n  return index >= this._length ? -1 : index;\n}\n\nfunction indexOfInternal(distance) {\n  if (this._length === 0 || distance < 0) {\n    return -1;\n  } // The area of the first item includes the axisOffset\n\n\n  var curDistance = this.getAxisOffset();\n\n  if (distance < curDistance) {\n    return 0;\n  }\n\n  var index = -1,\n      block = null,\n      blockSize = this.block_size,\n      defaultSize = this._defaultSize,\n      gap = this.getGap(),\n      blockGap = gap * blockSize; // Find the block that contains distance and the index of its\n  // first element\n\n  var blockIndex = -1,\n      blockTable = this.block_table,\n      blockTableLength = blockTable.length;\n\n  for (; ++blockIndex < blockTableLength;) {\n    block = blockTable[blockIndex];\n    var blockDistance = blockGap + (block ? block.sizesSum + block.defaultCount * defaultSize : blockSize * defaultSize);\n\n    if (distance === curDistance || distance >= curDistance && distance < curDistance + blockDistance) {\n      index = blockIndex << this.block_shift;\n      break;\n    }\n\n    curDistance += blockDistance;\n  }\n\n  if (index === -1 || distance === curDistance) {\n    return index;\n  } // At this point index corresponds to the first item in this block\n\n\n  if (block) {\n    // Find the item that contains distance and return its index\n    var sizes = block.sizes,\n        n = this.block_size - 1;\n\n    for (var i = 0; i < n; i++) {\n      var size = sizes[i];\n      curDistance += gap + (size !== size ? this._defaultSize : size);\n\n      if (curDistance > distance) {\n        return index + i;\n      }\n    } // TBD special-case for the very last index\n\n\n    return index + this.block_size - 1;\n  } else {\n    return index + Math.floor(Number(distance - curDistance) / Number(this._defaultSize + gap));\n  }\n}\n/**\n * Clear all cached state, reset length to zero.\n */\n\n\nfunction clear() {\n  // Discard any pending changes, before setting the length\n  // otherwise the length setter will commit the changes.\n  this.removes = null;\n  this.inserts = null;\n  this._pendingLength = -1;\n  this.setLength(0); // clears the this.block_table as well\n}\n\nfunction toString() {\n  return \"LinearLayoutVector { \" + \"length: \" + this._length + \", \" + \"size: \" + this.end(this.getLength() - 1) + \", \" + \"[blocks: \" + this.block_table.length + \"]\" + \", \" + \"gap: \" + this._gap + \", \" + \"defaultSize: \" + this._defaultSize + \", \" + \"pendingRemoves: \" + (this.removes ? this.removes.length : 0) + \", \" + \"pendingInserts: \" + (this.inserts ? this.inserts.length : 0) + \" }\";\n}\n/**\n * @private\n * A LinearLayoutVector block of layout element heights or widths.\n *\n * Total \"distance\" for a Block is: sizesSum + (defaultCount * distanceVector.default).\n */\n\n\nfunction Block(block_size) {\n  this.sizes = new Array(block_size);\n  this.sizesSum = 0;\n  this.defaultCount = block_size;\n\n  for (var i = -1; ++i < block_size;) {\n    this.sizes[i] = NaN;\n  }\n}","map":null,"metadata":{},"sourceType":"script"}
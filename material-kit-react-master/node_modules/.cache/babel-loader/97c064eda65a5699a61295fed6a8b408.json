{"ast":null,"code":"import { Chart } from 'react-chartjs-2';\nChart.pluginService.register({\n  afterDatasetsDraw: function afterDatasetsDraw(chart, easing) {\n    // Only activate the plugin if it's made available\n    // in the options\n    if (!chart.options.plugins.xLabelsOnTop || chart.options.plugins.xLabelsOnTop && chart.options.plugins.xLabelsOnTop.active === false) {\n      return;\n    } // To only draw at the end of animation, check for easing === 1\n\n\n    var ctx = chart.ctx;\n    chart.data.datasets.forEach(function (dataset, i) {\n      var meta = chart.getDatasetMeta(i);\n\n      if (!meta.hidden) {\n        meta.data.forEach(function (element, index) {\n          // Draw the text in black, with the specified font\n          ctx.fillStyle = 'rgba(255, 255, 255, 0.7)';\n          var fontSize = 13;\n          var fontStyle = 'normal';\n          var fontFamily = 'Muli, Roboto, Helvetica Neue, Arial, sans-serif';\n          ctx.font = Chart.helpers.fontString(fontSize, fontStyle, fontFamily); // Just naively convert to string for now\n\n          var dataString = dataset.data[index].toString() + 'k'; // Make sure alignment settings are correct\n\n          ctx.textAlign = 'center';\n          ctx.textBaseline = 'middle';\n          var padding = 15;\n          var startY = 24;\n          var position = element.tooltipPosition();\n          ctx.fillText(dataString, position.x, startY);\n          ctx.save();\n          ctx.beginPath();\n          ctx.setLineDash([5, 3]);\n          ctx.moveTo(position.x, startY + padding);\n          ctx.lineTo(position.x, position.y - padding);\n          ctx.strokeStyle = 'rgba(255,255,255,0.54)';\n          ctx.stroke();\n          ctx.restore();\n        });\n      }\n    });\n  }\n});","map":{"version":3,"sources":["/home/taneesh/Projects/EasyMailing/material-kit-react-master/src/react-chartjs-2-defaults.js"],"names":["Chart","pluginService","register","afterDatasetsDraw","chart","easing","options","plugins","xLabelsOnTop","active","ctx","data","datasets","forEach","dataset","i","meta","getDatasetMeta","hidden","element","index","fillStyle","fontSize","fontStyle","fontFamily","font","helpers","fontString","dataString","toString","textAlign","textBaseline","padding","startY","position","tooltipPosition","fillText","x","save","beginPath","setLineDash","moveTo","lineTo","y","strokeStyle","stroke","restore"],"mappings":"AAAA,SAAQA,KAAR,QAAoB,iBAApB;AAEAA,KAAK,CAACC,aAAN,CAAoBC,QAApB,CAA6B;AACzBC,EAAAA,iBAAiB,EAAE,2BAAUC,KAAV,EAAiBC,MAAjB,EAAyB;AACxC;AACA;AACA,QACI,CAACD,KAAK,CAACE,OAAN,CAAcC,OAAd,CAAsBC,YAAvB,IACCJ,KAAK,CAACE,OAAN,CAAcC,OAAd,CAAsBC,YAAtB,IAAsCJ,KAAK,CAACE,OAAN,CAAcC,OAAd,CAAsBC,YAAtB,CAAmCC,MAAnC,KAA8C,KAFzF,EAIA;AACI;AACH,KATuC,CAWxC;;;AACA,QAAMC,GAAG,GAAGN,KAAK,CAACM,GAAlB;AAEAN,IAAAA,KAAK,CAACO,IAAN,CAAWC,QAAX,CAAoBC,OAApB,CAA4B,UAAUC,OAAV,EAAmBC,CAAnB,EAAsB;AAC9C,UAAMC,IAAI,GAAGZ,KAAK,CAACa,cAAN,CAAqBF,CAArB,CAAb;;AAEA,UAAK,CAACC,IAAI,CAACE,MAAX,EACA;AAEIF,QAAAA,IAAI,CAACL,IAAL,CAAUE,OAAV,CAAkB,UAAUM,OAAV,EAAmBC,KAAnB,EAA0B;AAExC;AACAV,UAAAA,GAAG,CAACW,SAAJ,GAAgB,0BAAhB;AACA,cAAMC,QAAQ,GAAG,EAAjB;AACA,cAAMC,SAAS,GAAG,QAAlB;AACA,cAAMC,UAAU,GAAG,iDAAnB;AACAd,UAAAA,GAAG,CAACe,IAAJ,GAAWzB,KAAK,CAAC0B,OAAN,CAAcC,UAAd,CAAyBL,QAAzB,EAAmCC,SAAnC,EAA8CC,UAA9C,CAAX,CAPwC,CASxC;;AACA,cAAMI,UAAU,GAAGd,OAAO,CAACH,IAAR,CAAaS,KAAb,EAAoBS,QAApB,KAAiC,GAApD,CAVwC,CAYxC;;AACAnB,UAAAA,GAAG,CAACoB,SAAJ,GAAgB,QAAhB;AACApB,UAAAA,GAAG,CAACqB,YAAJ,GAAmB,QAAnB;AACA,cAAMC,OAAO,GAAG,EAAhB;AACA,cAAMC,MAAM,GAAG,EAAf;AACA,cAAMC,QAAQ,GAAGf,OAAO,CAACgB,eAAR,EAAjB;AACAzB,UAAAA,GAAG,CAAC0B,QAAJ,CAAaR,UAAb,EAAyBM,QAAQ,CAACG,CAAlC,EAAqCJ,MAArC;AAEAvB,UAAAA,GAAG,CAAC4B,IAAJ;AAEA5B,UAAAA,GAAG,CAAC6B,SAAJ;AACA7B,UAAAA,GAAG,CAAC8B,WAAJ,CAAgB,CAAC,CAAD,EAAI,CAAJ,CAAhB;AACA9B,UAAAA,GAAG,CAAC+B,MAAJ,CAAWP,QAAQ,CAACG,CAApB,EAAuBJ,MAAM,GAAGD,OAAhC;AACAtB,UAAAA,GAAG,CAACgC,MAAJ,CAAWR,QAAQ,CAACG,CAApB,EAAuBH,QAAQ,CAACS,CAAT,GAAaX,OAApC;AACAtB,UAAAA,GAAG,CAACkC,WAAJ,GAAkB,wBAAlB;AACAlC,UAAAA,GAAG,CAACmC,MAAJ;AAEAnC,UAAAA,GAAG,CAACoC,OAAJ;AACH,SA9BD;AA+BH;AACJ,KAtCD;AAuCH;AAtDwB,CAA7B","sourcesContent":["import {Chart} from 'react-chartjs-2';\n\nChart.pluginService.register({\n    afterDatasetsDraw: function (chart, easing) {\n        // Only activate the plugin if it's made available\n        // in the options\n        if (\n            !chart.options.plugins.xLabelsOnTop ||\n            (chart.options.plugins.xLabelsOnTop && chart.options.plugins.xLabelsOnTop.active === false)\n        )\n        {\n            return;\n        }\n\n        // To only draw at the end of animation, check for easing === 1\n        const ctx = chart.ctx;\n\n        chart.data.datasets.forEach(function (dataset, i) {\n            const meta = chart.getDatasetMeta(i);\n\n            if ( !meta.hidden )\n            {\n\n                meta.data.forEach(function (element, index) {\n\n                    // Draw the text in black, with the specified font\n                    ctx.fillStyle = 'rgba(255, 255, 255, 0.7)';\n                    const fontSize = 13;\n                    const fontStyle = 'normal';\n                    const fontFamily = 'Muli, Roboto, Helvetica Neue, Arial, sans-serif';\n                    ctx.font = Chart.helpers.fontString(fontSize, fontStyle, fontFamily);\n\n                    // Just naively convert to string for now\n                    const dataString = dataset.data[index].toString() + 'k';\n\n                    // Make sure alignment settings are correct\n                    ctx.textAlign = 'center';\n                    ctx.textBaseline = 'middle';\n                    const padding = 15;\n                    const startY = 24;\n                    const position = element.tooltipPosition();\n                    ctx.fillText(dataString, position.x, startY);\n\n                    ctx.save();\n\n                    ctx.beginPath();\n                    ctx.setLineDash([5, 3]);\n                    ctx.moveTo(position.x, startY + padding);\n                    ctx.lineTo(position.x, position.y - padding);\n                    ctx.strokeStyle = 'rgba(255,255,255,0.54)';\n                    ctx.stroke();\n\n                    ctx.restore();\n                });\n            }\n        });\n    }\n});\n"]},"metadata":{},"sourceType":"module"}
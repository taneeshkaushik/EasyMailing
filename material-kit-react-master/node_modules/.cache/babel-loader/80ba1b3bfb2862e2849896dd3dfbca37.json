{"ast":null,"code":"import * as G from './globals'; // The global `requestAnimationFrame` must be dereferenced to avoid \"Illegal invocation\" errors\n\nvar requestAnimationFrame = function requestAnimationFrame(fn) {\n  return (void 0, G.requestAnimationFrame)(fn);\n};\n/**\n * FrameLoop executes its animations in order of lowest priority first.\n * Animations are retained until idle.\n */\n\n\nvar FrameLoop =\n/** @class */\nfunction () {\n  function FrameLoop(raf) {\n    if (raf === void 0) {\n      raf = requestAnimationFrame;\n    }\n\n    var idle = true;\n    var writing = false; // The most recent framestamp\n\n    var lastTime = 0; // The active animations for the current frame, sorted by lowest priority first\n\n    var animations = []; // The priority of the currently advancing animation.\n    // To protect against a race condition whenever a frame is being processed,\n    // where the filtering of `animations` is corrupted with a shifting index,\n    // causing animations to potentially advance 2x faster than intended.\n\n    var priority = 0; // Animations starting on the next frame\n\n    var startQueue = new Set(); // Flushed after all animations are updated.\n    // Used to dispatch events to an \"onFrame\" prop, for example.\n\n    var frameQueue = new Set(); // Flushed at the very end of each frame.\n    // Used to avoid layout thrashing in @react-spring/web, for example.\n\n    var writeQueue = new Set(); // Add an animation to the frameloop\n\n    var start = function start(animation) {\n      var index = animations.indexOf(animation);\n\n      if (index < 0) {\n        index = animations.findIndex(function (other) {\n          return other.priority > animation.priority;\n        });\n        animations.splice(~index ? index : animations.length, 0, animation);\n      }\n    };\n\n    var loop = function loop() {\n      if (idle) return;\n\n      try {\n        advance();\n        raf(loop);\n      } catch (e) {\n        console.error(e);\n      }\n    }; // Start the frameloop\n\n\n    var kickoff = function kickoff() {\n      if (idle) {\n        idle = false; // To minimize frame skips, the frameloop never stops.\n\n        if (lastTime == 0) {\n          lastTime = G.now();\n          raf(loop);\n        }\n      }\n    };\n\n    var timeoutQueue = [];\n\n    this.setTimeout = function (handler, ms) {\n      var time = G.now() + ms;\n\n      var cancel = function cancel() {\n        var index = timeoutQueue.findIndex(function (t) {\n          return t.cancel == cancel;\n        });\n\n        if (index >= 0) {\n          timeoutQueue.splice(index, 1);\n        }\n      };\n\n      var index = findIndex(timeoutQueue, function (t) {\n        return t.time > time;\n      });\n      var timeout = {\n        time: time,\n        handler: handler,\n        cancel: cancel\n      };\n      timeoutQueue.splice(index, 0, timeout);\n      kickoff();\n      return timeout;\n    }; // Process the current frame.\n\n\n    var advance = this.advance = function () {\n      var time = G.now(); // Start animations that were added during last frame.\n\n      if (startQueue.size) {\n        startQueue.forEach(start);\n        startQueue.clear();\n      } // Flush the timeout queue.\n\n\n      if (timeoutQueue.length) {\n        G.batchedUpdates(function () {\n          var count = findIndex(timeoutQueue, function (t) {\n            return t.time > time;\n          });\n          timeoutQueue.splice(0, count).forEach(function (t) {\n            return t.handler();\n          });\n        });\n      }\n\n      if (time > lastTime) {\n        // http://gafferongames.com/game-physics/fix-your-timestep/\n        var dt_1 = Math.min(64, time - lastTime);\n        lastTime = time;\n        G.batchedUpdates(function () {\n          // Animations can be added while the frameloop is updating,\n          // but they need a higher priority to be started on this frame.\n          if (animations.length) {\n            G.willAdvance(animations);\n            animations = animations.filter(function (animation) {\n              priority = animation.priority; // Animations may go idle before the next frame.\n\n              if (!animation.idle) {\n                animation.advance(dt_1);\n              } // Remove idle animations.\n\n\n              return !animation.idle;\n            });\n            priority = 0;\n          }\n\n          if (frameQueue.size) {\n            frameQueue.forEach(function (onFrame) {\n              return onFrame(time);\n            });\n            frameQueue.clear();\n          }\n\n          if (writeQueue.size) {\n            writing = true;\n            writeQueue.forEach(function (write) {\n              return write(time);\n            });\n            writeQueue.clear();\n            writing = false;\n          }\n        });\n      }\n    };\n\n    this.start = function (animation) {\n      if (priority > animation.priority) {\n        startQueue.add(animation);\n      } else {\n        start(animation);\n        kickoff();\n      }\n    };\n\n    this.onFrame = function (cb) {\n      frameQueue.add(cb);\n      kickoff();\n    };\n\n    this.onWrite = function (cb) {\n      if (writing) cb(lastTime);else writeQueue.add(cb);\n    }; // Expose internals for testing.\n\n\n    if (typeof process !== 'undefined' && process.env.NODE_ENV !== 'production') {\n      var dispose_1 = function dispose_1() {\n        idle = true;\n        startQueue.clear();\n        timeoutQueue.length = 0;\n      };\n\n      Object.defineProperties(this, {\n        _animations: {\n          get: function get() {\n            return animations;\n          }\n        },\n        _dispose: {\n          get: function get() {\n            return dispose_1;\n          }\n        }\n      });\n    }\n  }\n\n  return FrameLoop;\n}();\n\nexport { FrameLoop };\n/** Like `Array.prototype.findIndex` but returns `arr.length` instead of `-1` */\n\nfunction findIndex(arr, test) {\n  var index = arr.findIndex(test);\n  return index < 0 ? arr.length : index;\n}","map":null,"metadata":{},"sourceType":"module"}
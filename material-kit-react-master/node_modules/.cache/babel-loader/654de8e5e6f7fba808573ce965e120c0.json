{"ast":null,"code":"export default function createCellPositioner(_ref) {\n  var cellMeasurerCache = _ref.cellMeasurerCache,\n      columnCount = _ref.columnCount,\n      columnWidth = _ref.columnWidth,\n      _ref$spacer = _ref.spacer,\n      spacer = _ref$spacer === undefined ? 0 : _ref$spacer;\n  var columnHeights = void 0;\n  initOrResetDerivedValues();\n\n  function cellPositioner(index) {\n    // Find the shortest column and use it.\n    var columnIndex = 0;\n\n    for (var i = 1; i < columnHeights.length; i++) {\n      if (columnHeights[i] < columnHeights[columnIndex]) {\n        columnIndex = i;\n      }\n    }\n\n    var left = columnIndex * (columnWidth + spacer);\n    var top = columnHeights[columnIndex] || 0;\n    columnHeights[columnIndex] = top + cellMeasurerCache.getHeight(index) + spacer;\n    return {\n      left: left,\n      top: top\n    };\n  }\n\n  function initOrResetDerivedValues() {\n    // Track the height of each column.\n    // Layout algorithm below always inserts into the shortest column.\n    columnHeights = [];\n\n    for (var i = 0; i < columnCount; i++) {\n      columnHeights[i] = 0;\n    }\n  }\n\n  function reset(params) {\n    columnCount = params.columnCount;\n    columnWidth = params.columnWidth;\n    spacer = params.spacer;\n    initOrResetDerivedValues();\n  }\n\n  cellPositioner.reset = reset;\n  return cellPositioner;\n}\nimport { bpfrpt_proptype_CellMeasurerCache } from './Masonry';\nimport { bpfrpt_proptype_Positioner } from './Masonry';","map":null,"metadata":{},"sourceType":"module"}
{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n\nexports.default = {\n  arraysDiffer: function arraysDiffer(a, b) {\n    var _this = this;\n\n    var isDifferent = false;\n\n    if (a.length !== b.length) {\n      isDifferent = true;\n    } else {\n      a.forEach(function (item, index) {\n        if (!_this.isSame(item, b[index])) {\n          isDifferent = true;\n        }\n      }, this);\n    }\n\n    return isDifferent;\n  },\n  objectsDiffer: function objectsDiffer(a, b) {\n    var _this2 = this;\n\n    var isDifferent = false;\n\n    if (Object.keys(a).length !== Object.keys(b).length) {\n      isDifferent = true;\n    } else {\n      Object.keys(a).forEach(function (key) {\n        if (!_this2.isSame(a[key], b[key])) {\n          isDifferent = true;\n        }\n      }, this);\n    }\n\n    return isDifferent;\n  },\n  isSame: function isSame(a, b) {\n    if ((typeof a === 'undefined' ? 'undefined' : _typeof(a)) !== (typeof b === 'undefined' ? 'undefined' : _typeof(b))) {\n      return false;\n    } else if (Array.isArray(a) && Array.isArray(b)) {\n      return !this.arraysDiffer(a, b);\n    } else if (typeof a === 'function') {\n      return a.toString() === b.toString();\n    } else if ((typeof a === 'undefined' ? 'undefined' : _typeof(a)) === 'object' && a !== null && b !== null) {\n      return !this.objectsDiffer(a, b);\n    }\n\n    return a === b;\n  },\n  find: function find(collection, fn) {\n    for (var i = 0, l = collection.length; i < l; i += 1) {\n      var item = collection[i];\n\n      if (fn(item)) {\n        return item;\n      }\n    }\n\n    return null;\n  },\n  runRules: function runRules(value, currentValues, validations, validationRules) {\n    var results = {\n      errors: [],\n      failed: [],\n      success: []\n    };\n\n    if (Object.keys(validations).length) {\n      Object.keys(validations).forEach(function (validationMethod) {\n        if (validationRules[validationMethod] && typeof validations[validationMethod] === 'function') {\n          throw new Error('Formsy does not allow you to override default validations: ' + validationMethod);\n        }\n\n        if (!validationRules[validationMethod] && typeof validations[validationMethod] !== 'function') {\n          throw new Error('Formsy does not have the validation rule: ' + validationMethod);\n        }\n\n        if (typeof validations[validationMethod] === 'function') {\n          var validation = validations[validationMethod](currentValues, value);\n\n          if (typeof validation === 'string') {\n            results.errors.push(validation);\n            results.failed.push(validationMethod);\n          } else if (!validation) {\n            results.failed.push(validationMethod);\n          }\n\n          return;\n        } else if (typeof validations[validationMethod] !== 'function') {\n          var _validation = validationRules[validationMethod](currentValues, value, validations[validationMethod]);\n\n          if (typeof _validation === 'string') {\n            results.errors.push(_validation);\n            results.failed.push(validationMethod);\n          } else if (!_validation) {\n            results.failed.push(validationMethod);\n          } else {\n            results.success.push(validationMethod);\n          }\n\n          return;\n        }\n\n        results.success.push(validationMethod);\n      });\n    }\n\n    return results;\n  }\n};","map":null,"metadata":{},"sourceType":"script"}
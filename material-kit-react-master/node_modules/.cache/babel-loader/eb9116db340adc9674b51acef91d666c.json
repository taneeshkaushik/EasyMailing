{"ast":null,"code":"import _objectSpread from \"/home/abhishek/Projects/stp/frotend/Fuse-React-v3.0.0-skeleton/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport axiosInstance from 'app/main/axios';\nimport { showMessage } from 'app/store/actions/fuse';\nexport var GET_COURSE = '[ACADEMY APP] GET COURSE';\nexport var GET_TAGS = '[ACADEMY APP] GET TAGS';\nexport var ADD_POST = '[ACADEMY APP] ADD POST';\nexport var SAVE_COURSE = '[ACADEMY APP] SAVE COURSE';\nexport var UPDATE_COURSE = '[ACADEMY APP] UPDATE COURSE';\nexport var CREATE_TAG = '[ACADEMY APP] CREATE TAG';\nexport var GET_CLASS_COMMENTS = '[ACADEMY APP] GET COMMENTS';\nexport var POST_CLASS_COMMENT = '[ACADEMY APP] POST CLASS COMMENT';\nexport function getCoursePostList(params) {\n  var request = axiosInstance.get('class-post-list/' + params.courseId + '/');\n  return function (dispatch) {\n    return request.then(function (response) {\n      dispatch({\n        type: GET_COURSE,\n        payload: response.data\n      });\n    });\n  };\n}\nexport function addPost(data) {\n  return function (dispatch) {\n    dispatch({\n      type: ADD_POST,\n      payload: data\n    });\n  };\n}\nexport function createTag(params, tagName) {\n  var request = axiosInstance.post('create-tag/', {\n    courseId: params.courseId,\n    tag: tagName\n  });\n  return function (dispatch) {\n    return request.then(function (response) {\n      dispatch({\n        type: CREATE_TAG,\n        payload: response.data\n      });\n    });\n  };\n}\nexport function getTagList(params) {\n  var request = axiosInstance.get('tag-list/' + params.courseId + '/');\n  return function (dispatch) {\n    return request.then(function (response) {\n      console.log(response.data);\n      dispatch({\n        type: GET_TAGS,\n        payload: response.data\n      });\n    });\n  };\n}\nexport function getClassComments(postId, serialNum) {\n  var request = axiosInstance.get('class-comment/' + 'postId');\n  return function (dispatch) {\n    return request.then(function (response) {\n      dispatch({\n        type: GET_CLASS_COMMENTS,\n        payload: {\n          'comments': response.data,\n          'serialNum': serialNum\n        }\n      });\n    });\n  };\n}\nexport function postClassComment(data) {\n  var request = axiosInstance.post('post-class-comment/', data);\n  return function (dispatch) {\n    return request.then(function (response) {\n      dispatch({\n        type: POST_CLASS_COMMENT,\n        payload: response.data\n      });\n    });\n  };\n}\nexport function saveCourse(data) {\n  var request = axiosInstance.post('/api/academy-app/course/save', data);\n  return function (dispatch) {\n    return request.then(function (response) {\n      dispatch(showMessage({\n        message: 'Course Saved'\n      }));\n      return dispatch({\n        type: SAVE_COURSE,\n        payload: response.data\n      });\n    });\n  };\n}\nexport function updateCourse(data) {\n  return function (dispatch, getState) {\n    var id = getState().academyApp.course.id;\n    var request = axiosInstance.post('/api/academy-app/course/update', _objectSpread({\n      id: id\n    }, data));\n    request.then(function (response) {\n      dispatch(showMessage({\n        message: 'Course Updated'\n      }));\n      return dispatch({\n        type: UPDATE_COURSE,\n        payload: response.data\n      });\n    });\n  };\n}","map":{"version":3,"sources":["/home/abhishek/Projects/stp/frotend/Fuse-React-v3.0.0-skeleton/src/app/main/academy/store/actions/course.actions.js"],"names":["axiosInstance","showMessage","GET_COURSE","GET_TAGS","ADD_POST","SAVE_COURSE","UPDATE_COURSE","CREATE_TAG","GET_CLASS_COMMENTS","POST_CLASS_COMMENT","getCoursePostList","params","request","get","courseId","dispatch","then","response","type","payload","data","addPost","createTag","tagName","post","tag","getTagList","console","log","getClassComments","postId","serialNum","postClassComment","saveCourse","message","updateCourse","getState","id","academyApp","course"],"mappings":"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","sourcesContent":["import axiosInstance from 'app/main/axios';\nimport {showMessage} from 'app/store/actions/fuse';\n\nexport const GET_COURSE = '[ACADEMY APP] GET COURSE';\nexport const GET_TAGS = '[ACADEMY APP] GET TAGS';\nexport const ADD_POST = '[ACADEMY APP] ADD POST';\nexport const SAVE_COURSE = '[ACADEMY APP] SAVE COURSE';\nexport const UPDATE_COURSE = '[ACADEMY APP] UPDATE COURSE';\nexport const  CREATE_TAG = '[ACADEMY APP] CREATE TAG';\nexport const GET_CLASS_COMMENTS='[ACADEMY APP] GET COMMENTS';\nexport const POST_CLASS_COMMENT='[ACADEMY APP] POST CLASS COMMENT';\n\nexport function getCoursePostList(params)\n{\n    const request = axiosInstance.get('class-post-list/'+params.courseId+'/');\n    return (dispatch) =>\n        request.then((response) => {\n        \n            dispatch({\n                type   : GET_COURSE,\n                payload: response.data\n            });\n        }\n        );\n}\nexport function addPost(data){\n    return (dispatch) => {\n        dispatch({\n            type: ADD_POST,\n            payload:data\n        });\n    }\n}\n\nexport function createTag(params, tagName)\n{\n    \n    const request = axiosInstance.post('create-tag/', {courseId:params.courseId, tag:tagName});\n    return (dispatch) =>\n        request.then((response) => {\n            dispatch({\n                type   : CREATE_TAG,\n                payload: response.data\n            });\n        }\n        );\n}\n\nexport function getTagList(params)\n{\n    const request = axiosInstance.get('tag-list/'+params.courseId+'/');\n    return (dispatch) =>\n        request.then((response) => {\n        console.log(response.data);\n            dispatch({\n                type   : GET_TAGS,\n                payload: response.data\n            });\n        }\n        );\n}\n\n\n\n\nexport function getClassComments(postId, serialNum)\n{\n    const request=axiosInstance.get('class-comment/'+ 'postId');\n    return (dispatch)=>\n    request.then((response)=>\n    {\n        dispatch(\n            {\n                type: GET_CLASS_COMMENTS, \n                payload: {'comments':response.data, 'serialNum': serialNum}\n            }\n        )\n    }\n    );\n}\n\n\nexport function postClassComment(data)\n{\n    \n    const request = axiosInstance.post('post-class-comment/', data);\n    return (dispatch) =>\n        request.then((response) => {\n            dispatch({\n                type   : POST_CLASS_COMMENT,\n                payload: response.data\n            });\n        }\n        );\n}\n\n\n\nexport function saveCourse(data)\n{\n\n    const request = axiosInstance.post('/api/academy-app/course/save', data);\n\n    return (dispatch) =>\n        request.then((response) => {\n\n                dispatch(showMessage({message: 'Course Saved'}));\n\n                return dispatch({\n                    type   : SAVE_COURSE,\n                    payload: response.data\n                })\n            }\n        );\n}\n\nexport function updateCourse(data)\n{\n\n    return (dispatch, getState) => {\n\n        const {id} = getState().academyApp.course;\n        const request = axiosInstance.post('/api/academy-app/course/update', {id, ...data});\n\n        request.then((response) => {\n\n                dispatch(showMessage({message: 'Course Updated'}));\n\n                return dispatch({\n                    type   : UPDATE_COURSE,\n                    payload: response.data\n                })\n            }\n        );\n    }\n}\n"]},"metadata":{},"sourceType":"module"}
{"version":3,"file":"downshift.umd.min.js","sources":["../../node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js","../../node_modules/@babel/runtime/helpers/esm/extends.js","../../node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js","../../node_modules/react-is/cjs/react-is.production.min.js","../../node_modules/react-is/index.js","../../src/set-a11y-status.js","../../src/stateChangeTypes.js","../../node_modules/compute-scroll-into-view/es/index.js","../../src/utils.js","../../src/downshift.js","../../node_modules/@babel/runtime/helpers/esm/inheritsLoose.js"],"sourcesContent":["export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}","export default function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}","export default function _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}","/** @license React v16.8.6\n * react-is.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';Object.defineProperty(exports,\"__esModule\",{value:!0});\nvar b=\"function\"===typeof Symbol&&Symbol.for,c=b?Symbol.for(\"react.element\"):60103,d=b?Symbol.for(\"react.portal\"):60106,e=b?Symbol.for(\"react.fragment\"):60107,f=b?Symbol.for(\"react.strict_mode\"):60108,g=b?Symbol.for(\"react.profiler\"):60114,h=b?Symbol.for(\"react.provider\"):60109,k=b?Symbol.for(\"react.context\"):60110,l=b?Symbol.for(\"react.async_mode\"):60111,m=b?Symbol.for(\"react.concurrent_mode\"):60111,n=b?Symbol.for(\"react.forward_ref\"):60112,p=b?Symbol.for(\"react.suspense\"):60113,q=b?Symbol.for(\"react.memo\"):\n60115,r=b?Symbol.for(\"react.lazy\"):60116;function t(a){if(\"object\"===typeof a&&null!==a){var u=a.$$typeof;switch(u){case c:switch(a=a.type,a){case l:case m:case e:case g:case f:case p:return a;default:switch(a=a&&a.$$typeof,a){case k:case n:case h:return a;default:return u}}case r:case q:case d:return u}}}function v(a){return t(a)===m}exports.typeOf=t;exports.AsyncMode=l;exports.ConcurrentMode=m;exports.ContextConsumer=k;exports.ContextProvider=h;exports.Element=c;exports.ForwardRef=n;\nexports.Fragment=e;exports.Lazy=r;exports.Memo=q;exports.Portal=d;exports.Profiler=g;exports.StrictMode=f;exports.Suspense=p;exports.isValidElementType=function(a){return\"string\"===typeof a||\"function\"===typeof a||a===e||a===m||a===g||a===f||a===p||\"object\"===typeof a&&null!==a&&(a.$$typeof===r||a.$$typeof===q||a.$$typeof===h||a.$$typeof===k||a.$$typeof===n)};exports.isAsyncMode=function(a){return v(a)||t(a)===l};exports.isConcurrentMode=v;exports.isContextConsumer=function(a){return t(a)===k};\nexports.isContextProvider=function(a){return t(a)===h};exports.isElement=function(a){return\"object\"===typeof a&&null!==a&&a.$$typeof===c};exports.isForwardRef=function(a){return t(a)===n};exports.isFragment=function(a){return t(a)===e};exports.isLazy=function(a){return t(a)===r};exports.isMemo=function(a){return t(a)===q};exports.isPortal=function(a){return t(a)===d};exports.isProfiler=function(a){return t(a)===g};exports.isStrictMode=function(a){return t(a)===f};\nexports.isSuspense=function(a){return t(a)===p};\n","'use strict';\n\nif (process.env.NODE_ENV === 'production') {\n  module.exports = require('./cjs/react-is.production.min.js');\n} else {\n  module.exports = require('./cjs/react-is.development.js');\n}\n","// istanbul ignore next\nlet statusDiv =\n  typeof document === 'undefined'\n    ? null\n    : document.getElementById('a11y-status-message')\n\nlet cleanupTimerID\n\n/**\n * @param {String} status the status message\n */\nfunction setStatus(status) {\n  const div = getStatusDiv()\n  if (!status) {\n    return\n  }\n  if (cleanupTimerID) {\n    clearTimeout(cleanupTimerID)\n    cleanupTimerID = null\n  }\n\n  div.textContent = status\n\n  cleanupTimerID = setTimeout(() => {\n    div.textContent = ''\n    cleanupTimerID = null\n  }, 500)\n}\n\n/**\n * Get the status node or create it if it does not already exist\n * @return {HTMLElement} the status node\n */\nfunction getStatusDiv() {\n  if (statusDiv) {\n    return statusDiv\n  }\n  statusDiv = document.createElement('div')\n  statusDiv.setAttribute('id', 'a11y-status-message')\n  statusDiv.setAttribute('role', 'status')\n  statusDiv.setAttribute('aria-live', 'polite')\n  statusDiv.setAttribute('aria-relevant', 'additions text')\n  Object.assign(statusDiv.style, {\n    border: '0',\n    clip: 'rect(0 0 0 0)',\n    height: '1px',\n    margin: '-1px',\n    overflow: 'hidden',\n    padding: '0',\n    position: 'absolute',\n    width: '1px',\n  })\n  document.body.appendChild(statusDiv)\n  return statusDiv\n}\n\nexport default setStatus\n","import productionEnum from './productionEnum.macro'\n\nexport const unknown = productionEnum('__autocomplete_unknown__')\nexport const mouseUp = productionEnum('__autocomplete_mouseup__')\nexport const itemMouseEnter = productionEnum('__autocomplete_item_mouseenter__')\nexport const keyDownArrowUp = productionEnum(\n  '__autocomplete_keydown_arrow_up__',\n)\nexport const keyDownArrowDown = productionEnum(\n  '__autocomplete_keydown_arrow_down__',\n)\nexport const keyDownEscape = productionEnum('__autocomplete_keydown_escape__')\nexport const keyDownEnter = productionEnum('__autocomplete_keydown_enter__')\nexport const keyDownHome = productionEnum('__autocomplete_keydown_home__')\nexport const keyDownEnd = productionEnum('__autocomplete_keydown_end__')\nexport const clickItem = productionEnum('__autocomplete_click_item__')\nexport const blurInput = productionEnum('__autocomplete_blur_input__')\nexport const changeInput = productionEnum('__autocomplete_change_input__')\nexport const keyDownSpaceButton = productionEnum(\n  '__autocomplete_keydown_space_button__',\n)\nexport const clickButton = productionEnum('__autocomplete_click_button__')\nexport const blurButton = productionEnum('__autocomplete_blur_button__')\nexport const controlledPropUpdatedSelectedItem = productionEnum(\n  '__autocomplete_controlled_prop_updated_selected_item__',\n)\nexport const touchEnd = productionEnum('__autocomplete_touchend__')\n","function isElement(el) {\n  return el != null && typeof el === 'object' && el.nodeType === 1;\n}\n\nfunction canOverflow(overflow, skipOverflowHiddenElements) {\n  if (skipOverflowHiddenElements && overflow === 'hidden') {\n    return false;\n  }\n\n  return overflow !== 'visible' && overflow !== 'clip';\n}\n\nfunction isScrollable(el, skipOverflowHiddenElements) {\n  if (el.clientHeight < el.scrollHeight || el.clientWidth < el.scrollWidth) {\n    var style = getComputedStyle(el, null);\n    return canOverflow(style.overflowY, skipOverflowHiddenElements) || canOverflow(style.overflowX, skipOverflowHiddenElements);\n  }\n\n  return false;\n}\n\nfunction alignNearest(scrollingEdgeStart, scrollingEdgeEnd, scrollingSize, scrollingBorderStart, scrollingBorderEnd, elementEdgeStart, elementEdgeEnd, elementSize) {\n  if (elementEdgeStart < scrollingEdgeStart && elementEdgeEnd > scrollingEdgeEnd || elementEdgeStart > scrollingEdgeStart && elementEdgeEnd < scrollingEdgeEnd) {\n    return 0;\n  }\n\n  if (elementEdgeStart <= scrollingEdgeStart && elementSize <= scrollingSize || elementEdgeEnd >= scrollingEdgeEnd && elementSize >= scrollingSize) {\n    return elementEdgeStart - scrollingEdgeStart - scrollingBorderStart;\n  }\n\n  if (elementEdgeEnd > scrollingEdgeEnd && elementSize < scrollingSize || elementEdgeStart < scrollingEdgeStart && elementSize > scrollingSize) {\n    return elementEdgeEnd - scrollingEdgeEnd + scrollingBorderEnd;\n  }\n\n  return 0;\n}\n\nexport default (function (target, options) {\n  var scrollMode = options.scrollMode,\n      block = options.block,\n      inline = options.inline,\n      boundary = options.boundary,\n      skipOverflowHiddenElements = options.skipOverflowHiddenElements;\n  var checkBoundary = typeof boundary === 'function' ? boundary : function (node) {\n    return node !== boundary;\n  };\n\n  if (!isElement(target)) {\n    throw new TypeError('Invalid target');\n  }\n\n  var scrollingElement = document.scrollingElement || document.documentElement;\n  var frames = [];\n  var cursor = target;\n\n  while (isElement(cursor) && checkBoundary(cursor)) {\n    cursor = cursor.parentNode;\n\n    if (cursor === scrollingElement) {\n      frames.push(cursor);\n      break;\n    }\n\n    if (cursor === document.body && isScrollable(cursor) && !isScrollable(document.documentElement)) {\n      continue;\n    }\n\n    if (isScrollable(cursor, skipOverflowHiddenElements)) {\n      frames.push(cursor);\n    }\n  }\n\n  var viewportWidth = window.visualViewport ? visualViewport.width : innerWidth;\n  var viewportHeight = window.visualViewport ? visualViewport.height : innerHeight;\n  var viewportX = window.scrollX || pageXOffset;\n  var viewportY = window.scrollY || pageYOffset;\n\n  var _target$getBoundingCl = target.getBoundingClientRect(),\n      targetHeight = _target$getBoundingCl.height,\n      targetWidth = _target$getBoundingCl.width,\n      targetTop = _target$getBoundingCl.top,\n      targetRight = _target$getBoundingCl.right,\n      targetBottom = _target$getBoundingCl.bottom,\n      targetLeft = _target$getBoundingCl.left;\n\n  var targetBlock = block === 'start' || block === 'nearest' ? targetTop : block === 'end' ? targetBottom : targetTop + targetHeight / 2;\n  var targetInline = inline === 'center' ? targetLeft + targetWidth / 2 : inline === 'end' ? targetRight : targetLeft;\n  var computations = [];\n\n  for (var index = 0; index < frames.length; index++) {\n    var frame = frames[index];\n\n    var _frame$getBoundingCli = frame.getBoundingClientRect(),\n        _height = _frame$getBoundingCli.height,\n        _width = _frame$getBoundingCli.width,\n        _top = _frame$getBoundingCli.top,\n        right = _frame$getBoundingCli.right,\n        bottom = _frame$getBoundingCli.bottom,\n        _left = _frame$getBoundingCli.left;\n\n    if (scrollMode === 'if-needed' && targetTop >= 0 && targetLeft >= 0 && targetBottom <= viewportHeight && targetRight <= viewportWidth && targetTop >= _top && targetBottom <= bottom && targetLeft >= _left && targetRight <= right) {\n      return computations;\n    }\n\n    var frameStyle = getComputedStyle(frame);\n    var borderLeft = parseInt(frameStyle.borderLeftWidth, 10);\n    var borderTop = parseInt(frameStyle.borderTopWidth, 10);\n    var borderRight = parseInt(frameStyle.borderRightWidth, 10);\n    var borderBottom = parseInt(frameStyle.borderBottomWidth, 10);\n    var blockScroll = 0;\n    var inlineScroll = 0;\n    var scrollbarWidth = 'offsetWidth' in frame ? frame.offsetWidth - frame.clientWidth - borderLeft - borderRight : 0;\n    var scrollbarHeight = 'offsetHeight' in frame ? frame.offsetHeight - frame.clientHeight - borderTop - borderBottom : 0;\n\n    if (scrollingElement === frame) {\n      if (block === 'start') {\n        blockScroll = targetBlock;\n      } else if (block === 'end') {\n        blockScroll = targetBlock - viewportHeight;\n      } else if (block === 'nearest') {\n        blockScroll = alignNearest(viewportY, viewportY + viewportHeight, viewportHeight, borderTop, borderBottom, viewportY + targetBlock, viewportY + targetBlock + targetHeight, targetHeight);\n      } else {\n        blockScroll = targetBlock - viewportHeight / 2;\n      }\n\n      if (inline === 'start') {\n        inlineScroll = targetInline;\n      } else if (inline === 'center') {\n        inlineScroll = targetInline - viewportWidth / 2;\n      } else if (inline === 'end') {\n        inlineScroll = targetInline - viewportWidth;\n      } else {\n        inlineScroll = alignNearest(viewportX, viewportX + viewportWidth, viewportWidth, borderLeft, borderRight, viewportX + targetInline, viewportX + targetInline + targetWidth, targetWidth);\n      }\n\n      blockScroll = Math.max(0, blockScroll + viewportY);\n      inlineScroll = Math.max(0, inlineScroll + viewportX);\n    } else {\n      if (block === 'start') {\n        blockScroll = targetBlock - _top - borderTop;\n      } else if (block === 'end') {\n        blockScroll = targetBlock - bottom + borderBottom + scrollbarHeight;\n      } else if (block === 'nearest') {\n        blockScroll = alignNearest(_top, bottom, _height, borderTop, borderBottom + scrollbarHeight, targetBlock, targetBlock + targetHeight, targetHeight);\n      } else {\n        blockScroll = targetBlock - (_top + _height / 2) + scrollbarHeight / 2;\n      }\n\n      if (inline === 'start') {\n        inlineScroll = targetInline - _left - borderLeft;\n      } else if (inline === 'center') {\n        inlineScroll = targetInline - (_left + _width / 2) + scrollbarWidth / 2;\n      } else if (inline === 'end') {\n        inlineScroll = targetInline - right + borderRight + scrollbarWidth;\n      } else {\n        inlineScroll = alignNearest(_left, right, _width, borderLeft, borderRight + scrollbarWidth, targetInline, targetInline + targetWidth, targetWidth);\n      }\n\n      var scrollLeft = frame.scrollLeft,\n          scrollTop = frame.scrollTop;\n      blockScroll = Math.max(0, Math.min(scrollTop + blockScroll, frame.scrollHeight - _height + scrollbarHeight));\n      inlineScroll = Math.max(0, Math.min(scrollLeft + inlineScroll, frame.scrollWidth - _width + scrollbarWidth));\n      targetBlock += scrollTop - blockScroll;\n      targetInline += scrollLeft - inlineScroll;\n    }\n\n    computations.push({\n      el: frame,\n      top: blockScroll,\n      left: inlineScroll\n    });\n  }\n\n  return computations;\n});","import computeScrollIntoView from 'compute-scroll-into-view'\nimport {isPreact} from './is.macro'\n\nlet idCounter = 0\n\n/**\n * Accepts a parameter and returns it if it's a function\n * or a noop function if it's not. This allows us to\n * accept a callback, but not worry about it if it's not\n * passed.\n * @param {Function} cb the callback\n * @return {Function} a function\n */\nfunction cbToCb(cb) {\n  return typeof cb === 'function' ? cb : noop\n}\n\nfunction noop() {}\n\n/**\n * Scroll node into view if necessary\n * @param {HTMLElement} node the element that should scroll into view\n * @param {HTMLElement} menuNode the menu element of the component\n */\nfunction scrollIntoView(node, menuNode) {\n  if (node === null) {\n    return\n  }\n\n  const actions = computeScrollIntoView(node, {\n    boundary: menuNode,\n    block: 'nearest',\n    scrollMode: 'if-needed',\n  })\n  actions.forEach(({el, top, left}) => {\n    el.scrollTop = top\n    el.scrollLeft = left\n  })\n}\n\n/**\n * @param {HTMLElement} parent the parent node\n * @param {HTMLElement} child the child node\n * @return {Boolean} whether the parent is the child or the child is in the parent\n */\nfunction isOrContainsNode(parent, child) {\n  return parent === child || (parent.contains && parent.contains(child))\n}\n\n/**\n * Simple debounce implementation. Will call the given\n * function once after the time given has passed since\n * it was last called.\n * @param {Function} fn the function to call after the time\n * @param {Number} time the time to wait\n * @return {Function} the debounced function\n */\nfunction debounce(fn, time) {\n  let timeoutId\n\n  function cancel() {\n    if (timeoutId) {\n      clearTimeout(timeoutId)\n    }\n  }\n\n  function wrapper(...args) {\n    cancel()\n    timeoutId = setTimeout(() => {\n      timeoutId = null\n      fn(...args)\n    }, time)\n  }\n\n  wrapper.cancel = cancel\n\n  return wrapper\n}\n\n/**\n * This is intended to be used to compose event handlers.\n * They are executed in order until one of them sets\n * `event.preventDownshiftDefault = true`.\n * @param {...Function} fns the event handler functions\n * @return {Function} the event handler to add to an element\n */\nfunction callAllEventHandlers(...fns) {\n  return (event, ...args) =>\n    fns.some(fn => {\n      if (fn) {\n        fn(event, ...args)\n      }\n      return (\n        event.preventDownshiftDefault ||\n        (event.hasOwnProperty('nativeEvent') &&\n          event.nativeEvent.preventDownshiftDefault)\n      )\n    })\n}\n\n/**\n * This return a function that will call all the given functions with\n * the arguments with which it's called. It does a null-check before\n * attempting to call the functions and can take any number of functions.\n * @param {...Function} fns the functions to call\n * @return {Function} the function that calls all the functions\n */\nfunction callAll(...fns) {\n  return (...args) => {\n    fns.forEach(fn => {\n      if (fn) {\n        fn(...args)\n      }\n    })\n  }\n}\n\n/**\n * This generates a unique ID for an instance of Downshift\n * @return {String} the unique ID\n */\nfunction generateId() {\n  return String(idCounter++)\n}\n\n/**\n * This is only used in tests\n * @param {Number} num the number to set the idCounter to\n */\nfunction setIdCounter(num) {\n  idCounter = num\n}\n\n/**\n * Resets idCounter to 0. Used for SSR.\n */\nfunction resetIdCounter() {\n  idCounter = 0\n}\n\n/**\n * @param {Object} param the downshift state and other relevant properties\n * @return {String} the a11y status message\n */\nfunction getA11yStatusMessage({\n  isOpen,\n  selectedItem,\n  resultCount,\n  previousResultCount,\n  itemToString,\n}) {\n  if (!isOpen) {\n    return selectedItem ? itemToString(selectedItem) : ''\n  }\n  if (!resultCount) {\n    return 'No results are available.'\n  }\n  if (resultCount !== previousResultCount) {\n    return `${resultCount} result${\n      resultCount === 1 ? ' is' : 's are'\n    } available, use up and down arrow keys to navigate. Press Enter key to select.`\n  }\n  return ''\n}\n\n/**\n * Takes an argument and if it's an array, returns the first item in the array\n * otherwise returns the argument\n * @param {*} arg the maybe-array\n * @param {*} defaultValue the value if arg is falsey not defined\n * @return {*} the arg or it's first item\n */\nfunction unwrapArray(arg, defaultValue) {\n  arg = Array.isArray(arg) ? /* istanbul ignore next (preact) */ arg[0] : arg\n  if (!arg && defaultValue) {\n    return defaultValue\n  } else {\n    return arg\n  }\n}\n\n/**\n * @param {Object} element (P)react element\n * @return {Boolean} whether it's a DOM element\n */\nfunction isDOMElement(element) {\n  /* istanbul ignore if */\n  if (isPreact) {\n    // then this is preact\n    return typeof element.nodeName === 'string'\n  }\n\n  // then we assume this is react\n  return typeof element.type === 'string'\n}\n\n/**\n * @param {Object} element (P)react element\n * @return {Object} the props\n */\nfunction getElementProps(element) {\n  // props for react, attributes for preact\n\n  /* istanbul ignore if */\n  if (isPreact) {\n    return element.attributes\n  }\n\n  return element.props\n}\n\n/**\n * Throws a helpful error message for required properties. Useful\n * to be used as a default in destructuring or object params.\n * @param {String} fnName the function name\n * @param {String} propName the prop name\n */\nfunction requiredProp(fnName, propName) {\n  // eslint-disable-next-line no-console\n  console.error(`The property \"${propName}\" is required in \"${fnName}\"`)\n}\n\nconst stateKeys = [\n  'highlightedIndex',\n  'inputValue',\n  'isOpen',\n  'selectedItem',\n  'type',\n]\n/**\n * @param {Object} state the state object\n * @return {Object} state that is relevant to downshift\n */\nfunction pickState(state = {}) {\n  const result = {}\n  stateKeys.forEach(k => {\n    if (state.hasOwnProperty(k)) {\n      result[k] = state[k]\n    }\n  })\n  return result\n}\n\n/**\n * Normalizes the 'key' property of a KeyboardEvent in IE/Edge\n * @param {Object} event a keyboardEvent object\n * @return {String} keyboard key\n */\nfunction normalizeArrowKey(event) {\n  const {key, keyCode} = event\n  /* istanbul ignore next (ie) */\n  if (keyCode >= 37 && keyCode <= 40 && key.indexOf('Arrow') !== 0) {\n    return `Arrow${key}`\n  }\n  return key\n}\n\n/**\n * Simple check if the value passed is object literal\n * @param {*} obj any things\n * @return {Boolean} whether it's object literal\n */\nfunction isPlainObject(obj) {\n  return Object.prototype.toString.call(obj) === '[object Object]'\n}\n\n/**\n * Returns the new index in the list, in a circular way. If next value is out of bonds from the total,\n * it will wrap to either 0 or itemCount - 1.\n *\n * @param {number} moveAmount Number of positions to move. Negative to move backwards, positive forwards.\n * @param {number} baseIndex The initial position to move from.\n * @param {number} itemCount The total number of items.\n * @returns {number} The new index after the move.\n */\nfunction getNextWrappingIndex(moveAmount, baseIndex, itemCount) {\n  const itemsLastIndex = itemCount - 1\n\n  if (\n    typeof baseIndex !== 'number' ||\n    baseIndex < 0 ||\n    baseIndex >= itemCount\n  ) {\n    baseIndex = moveAmount > 0 ? -1 : itemsLastIndex + 1\n  }\n  let newIndex = baseIndex + moveAmount\n  if (newIndex < 0) {\n    newIndex = itemsLastIndex\n  } else if (newIndex > itemsLastIndex) {\n    newIndex = 0\n  }\n  return newIndex\n}\n\nexport {\n  cbToCb,\n  callAllEventHandlers,\n  callAll,\n  debounce,\n  scrollIntoView,\n  generateId,\n  getA11yStatusMessage,\n  unwrapArray,\n  isDOMElement,\n  getElementProps,\n  isOrContainsNode,\n  noop,\n  requiredProp,\n  setIdCounter,\n  resetIdCounter,\n  pickState,\n  isPlainObject,\n  normalizeArrowKey,\n  getNextWrappingIndex,\n}\n","/* eslint camelcase:0 */\n\nimport PropTypes from 'prop-types'\nimport React, {Component} from 'react'\nimport {isForwardRef} from 'react-is'\nimport {isPreact, isReactNative} from './is.macro'\nimport setA11yStatus from './set-a11y-status'\nimport * as stateChangeTypes from './stateChangeTypes'\nimport {\n  callAll,\n  callAllEventHandlers,\n  cbToCb,\n  debounce,\n  generateId,\n  getA11yStatusMessage,\n  getElementProps,\n  isDOMElement,\n  isOrContainsNode,\n  isPlainObject,\n  noop,\n  normalizeArrowKey,\n  pickState,\n  requiredProp,\n  scrollIntoView,\n  unwrapArray,\n  getNextWrappingIndex,\n} from './utils'\n\nclass Downshift extends Component {\n  static propTypes = {\n    children: PropTypes.func,\n    defaultHighlightedIndex: PropTypes.number,\n    defaultIsOpen: PropTypes.bool,\n    initialHighlightedIndex: PropTypes.number,\n    initialSelectedItem: PropTypes.any,\n    initialInputValue: PropTypes.string,\n    initialIsOpen: PropTypes.bool,\n    getA11yStatusMessage: PropTypes.func,\n    itemToString: PropTypes.func,\n    onChange: PropTypes.func,\n    onSelect: PropTypes.func,\n    onStateChange: PropTypes.func,\n    onInputValueChange: PropTypes.func,\n    onUserAction: PropTypes.func,\n    onOuterClick: PropTypes.func,\n    selectedItemChanged: PropTypes.func,\n    stateReducer: PropTypes.func,\n    itemCount: PropTypes.number,\n    id: PropTypes.string,\n    environment: PropTypes.shape({\n      addEventListener: PropTypes.func,\n      removeEventListener: PropTypes.func,\n      document: PropTypes.shape({\n        getElementById: PropTypes.func,\n        activeElement: PropTypes.any,\n        body: PropTypes.any,\n      }),\n    }),\n    suppressRefError: PropTypes.bool,\n    scrollIntoView: PropTypes.func,\n    // things we keep in state for uncontrolled components\n    // but can accept as props for controlled components\n    /* eslint-disable react/no-unused-prop-types */\n    selectedItem: PropTypes.any,\n    isOpen: PropTypes.bool,\n    inputValue: PropTypes.string,\n    highlightedIndex: PropTypes.number,\n    labelId: PropTypes.string,\n    inputId: PropTypes.string,\n    menuId: PropTypes.string,\n    getItemId: PropTypes.func,\n    /* eslint-enable react/no-unused-prop-types */\n  }\n\n  static defaultProps = {\n    defaultHighlightedIndex: null,\n    defaultIsOpen: false,\n    getA11yStatusMessage,\n    itemToString: i => {\n      if (i == null) {\n        return ''\n      }\n      if (\n        process.env.NODE_ENV !== 'production' &&\n        isPlainObject(i) &&\n        !i.hasOwnProperty('toString')\n      ) {\n        // eslint-disable-next-line no-console\n        console.warn(\n          'downshift: An object was passed to the default implementation of `itemToString`. You should probably provide your own `itemToString` implementation. Please refer to the `itemToString` API documentation.',\n          'The object that was passed:',\n          i,\n        )\n      }\n      return String(i)\n    },\n    onStateChange: noop,\n    onInputValueChange: noop,\n    onUserAction: noop,\n    onChange: noop,\n    onSelect: noop,\n    onOuterClick: noop,\n    selectedItemChanged: (prevItem, item) => prevItem !== item,\n    environment:\n      typeof window === 'undefined' /* istanbul ignore next (ssr) */\n        ? {}\n        : window,\n    stateReducer: (state, stateToSet) => stateToSet,\n    suppressRefError: false,\n    scrollIntoView,\n  }\n\n  static stateChangeTypes = stateChangeTypes\n\n  constructor(props) {\n    super(props)\n    // fancy destructuring + defaults + aliases\n    // this basically says each value of state should either be set to\n    // the initial value or the default value if the initial value is not provided\n    const {\n      defaultHighlightedIndex,\n      initialHighlightedIndex: highlightedIndex = defaultHighlightedIndex,\n      defaultIsOpen,\n      initialIsOpen: isOpen = defaultIsOpen,\n      initialInputValue: inputValue = '',\n      initialSelectedItem: selectedItem = null,\n    } = this.props\n    const state = this.getState({\n      highlightedIndex,\n      isOpen,\n      inputValue,\n      selectedItem,\n    })\n    if (\n      state.selectedItem != null &&\n      this.props.initialInputValue === undefined\n    ) {\n      state.inputValue = this.props.itemToString(state.selectedItem)\n    }\n    this.state = state\n  }\n\n  id = this.props.id || `downshift-${generateId()}`\n  menuId = this.props.menuId || `${this.id}-menu`\n  labelId = this.props.labelId || `${this.id}-label`\n  inputId = this.props.inputId || `${this.id}-input`\n  getItemId = this.props.getItemId || (index => `${this.id}-item-${index}`)\n\n  input = null\n  items = []\n  // itemCount can be changed asynchronously\n  // from within downshift (so it can't come from a prop)\n  // this is why we store it as an instance and use\n  // getItemCount rather than just use items.length\n  // (to support windowing + async)\n  itemCount = null\n  previousResultCount = 0\n\n  timeoutIds = []\n\n  /**\n   * @param {Function} fn the function to call after the time\n   * @param {Number} time the time to wait\n   */\n  internalSetTimeout = (fn, time) => {\n    const id = setTimeout(() => {\n      this.timeoutIds = this.timeoutIds.filter(i => i !== id)\n      fn()\n    }, time)\n\n    this.timeoutIds.push(id)\n  }\n\n  /**\n   * Clear all running timeouts\n   */\n  internalClearTimeouts() {\n    this.timeoutIds.forEach(id => {\n      clearTimeout(id)\n    })\n\n    this.timeoutIds = []\n  }\n\n  /**\n   * Gets the state based on internal state or props\n   * If a state value is passed via props, then that\n   * is the value given, otherwise it's retrieved from\n   * stateToMerge\n   *\n   * This will perform a shallow merge of the given state object\n   * with the state coming from props\n   * (for the controlled component scenario)\n   * This is used in state updater functions so they're referencing\n   * the right state regardless of where it comes from.\n   *\n   * @param {Object} stateToMerge defaults to this.state\n   * @return {Object} the state\n   */\n  getState(stateToMerge = this.state) {\n    return Object.keys(stateToMerge).reduce((state, key) => {\n      state[key] = this.isControlledProp(key)\n        ? this.props[key]\n        : stateToMerge[key]\n      return state\n    }, {})\n  }\n\n  /**\n   * This determines whether a prop is a \"controlled prop\" meaning it is\n   * state which is controlled by the outside of this component rather\n   * than within this component.\n   * @param {String} key the key to check\n   * @return {Boolean} whether it is a controlled controlled prop\n   */\n  isControlledProp(key) {\n    return this.props[key] !== undefined\n  }\n\n  getItemCount() {\n    // things read better this way. They're in priority order:\n    // 1. `this.itemCount`\n    // 2. `this.props.itemCount`\n    // 3. `this.items.length`\n    let itemCount = this.items.length\n    if (this.itemCount != null) {\n      itemCount = this.itemCount\n    } else if (this.props.itemCount !== undefined) {\n      itemCount = this.props.itemCount\n    }\n    return itemCount\n  }\n\n  setItemCount = count => {\n    this.itemCount = count\n  }\n\n  unsetItemCount = () => {\n    this.itemCount = null\n  }\n\n  getItemNodeFromIndex(index) {\n    return this.props.environment.document.getElementById(this.getItemId(index))\n  }\n\n  setHighlightedIndex = (\n    highlightedIndex = this.props.defaultHighlightedIndex,\n    otherStateToSet = {},\n  ) => {\n    otherStateToSet = pickState(otherStateToSet)\n    this.internalSetState({highlightedIndex, ...otherStateToSet})\n  }\n\n  scrollHighlightedItemIntoView() {\n    /* istanbul ignore else (react-native) */\n    if (!isReactNative) {\n      const node = this.getItemNodeFromIndex(this.getState().highlightedIndex)\n      this.props.scrollIntoView(node, this._menuNode)\n    }\n  }\n\n  moveHighlightedIndex(amount, otherStateToSet) {\n    const itemCount = this.getItemCount()\n    if (itemCount > 0) {\n      const nextHighlightedIndex = getNextWrappingIndex(\n        amount,\n        this.getState().highlightedIndex,\n        itemCount,\n      )\n      this.setHighlightedIndex(nextHighlightedIndex, otherStateToSet)\n    }\n  }\n\n  highlightFirstOrLastIndex(event, first, otherStateToSet) {\n    const itemsLastIndex = this.getItemCount() - 1\n    if (itemsLastIndex < 0 || !this.getState().isOpen) {\n      return\n    }\n    event.preventDefault()\n    this.setHighlightedIndex(first ? 0 : itemsLastIndex, otherStateToSet)\n  }\n\n  clearSelection = cb => {\n    this.internalSetState(\n      {\n        selectedItem: null,\n        inputValue: '',\n        highlightedIndex: this.props.defaultHighlightedIndex,\n        isOpen: this.props.defaultIsOpen,\n      },\n      cb,\n    )\n  }\n\n  selectItem = (item, otherStateToSet, cb) => {\n    otherStateToSet = pickState(otherStateToSet)\n    this.internalSetState(\n      {\n        isOpen: this.props.defaultIsOpen,\n        highlightedIndex: this.props.defaultHighlightedIndex,\n        selectedItem: item,\n        inputValue: this.props.itemToString(item),\n        ...otherStateToSet,\n      },\n      cb,\n    )\n  }\n\n  selectItemAtIndex = (itemIndex, otherStateToSet, cb) => {\n    const item = this.items[itemIndex]\n    if (item == null) {\n      return\n    }\n    this.selectItem(item, otherStateToSet, cb)\n  }\n\n  selectHighlightedItem = (otherStateToSet, cb) => {\n    return this.selectItemAtIndex(\n      this.getState().highlightedIndex,\n      otherStateToSet,\n      cb,\n    )\n  }\n\n  // any piece of our state can live in two places:\n  // 1. Uncontrolled: it's internal (this.state)\n  //    We will call this.setState to update that state\n  // 2. Controlled: it's external (this.props)\n  //    We will call this.props.onStateChange to update that state\n  //\n  // In addition, we'll call this.props.onChange if the\n  // selectedItem is changed.\n  internalSetState = (stateToSet, cb) => {\n    let isItemSelected, onChangeArg\n\n    const onStateChangeArg = {}\n    const isStateToSetFunction = typeof stateToSet === 'function'\n\n    // we want to call `onInputValueChange` before the `setState` call\n    // so someone controlling the `inputValue` state gets notified of\n    // the input change as soon as possible. This avoids issues with\n    // preserving the cursor position.\n    // See https://github.com/downshift-js/downshift/issues/217 for more info.\n    if (!isStateToSetFunction && stateToSet.hasOwnProperty('inputValue')) {\n      this.props.onInputValueChange(stateToSet.inputValue, {\n        ...this.getStateAndHelpers(),\n        ...stateToSet,\n      })\n    }\n    return this.setState(\n      state => {\n        state = this.getState(state)\n        let newStateToSet = isStateToSetFunction\n          ? stateToSet(state)\n          : stateToSet\n\n        // Your own function that could modify the state that will be set.\n        newStateToSet = this.props.stateReducer(state, newStateToSet)\n\n        // checks if an item is selected, regardless of if it's different from\n        // what was selected before\n        // used to determine if onSelect and onChange callbacks should be called\n        isItemSelected = newStateToSet.hasOwnProperty('selectedItem')\n        // this keeps track of the object we want to call with setState\n        const nextState = {}\n        // this is just used to tell whether the state changed\n        const nextFullState = {}\n        // we need to call on change if the outside world is controlling any of our state\n        // and we're trying to update that state. OR if the selection has changed and we're\n        // trying to update the selection\n        if (\n          isItemSelected &&\n          newStateToSet.selectedItem !== state.selectedItem\n        ) {\n          onChangeArg = newStateToSet.selectedItem\n        }\n        newStateToSet.type = newStateToSet.type || stateChangeTypes.unknown\n\n        Object.keys(newStateToSet).forEach(key => {\n          // onStateChangeArg should only have the state that is\n          // actually changing\n          if (state[key] !== newStateToSet[key]) {\n            onStateChangeArg[key] = newStateToSet[key]\n          }\n          // the type is useful for the onStateChangeArg\n          // but we don't actually want to set it in internal state.\n          // this is an undocumented feature for now... Not all internalSetState\n          // calls support it and I'm not certain we want them to yet.\n          // But it enables users controlling the isOpen state to know when\n          // the isOpen state changes due to mouseup events which is quite handy.\n          if (key === 'type') {\n            return\n          }\n          nextFullState[key] = newStateToSet[key]\n          // if it's coming from props, then we don't care to set it internally\n          if (!this.isControlledProp(key)) {\n            nextState[key] = newStateToSet[key]\n          }\n        })\n\n        // if stateToSet is a function, then we weren't able to call onInputValueChange\n        // earlier, so we'll call it now that we know what the inputValue state will be.\n        if (\n          isStateToSetFunction &&\n          newStateToSet.hasOwnProperty('inputValue')\n        ) {\n          this.props.onInputValueChange(newStateToSet.inputValue, {\n            ...this.getStateAndHelpers(),\n            ...newStateToSet,\n          })\n        }\n\n        return nextState\n      },\n      () => {\n        // call the provided callback if it's a function\n        cbToCb(cb)()\n\n        // only call the onStateChange and onChange callbacks if\n        // we have relevant information to pass them.\n        const hasMoreStateThanType = Object.keys(onStateChangeArg).length > 1\n        if (hasMoreStateThanType) {\n          this.props.onStateChange(onStateChangeArg, this.getStateAndHelpers())\n        }\n\n        if (isItemSelected) {\n          this.props.onSelect(\n            stateToSet.selectedItem,\n            this.getStateAndHelpers(),\n          )\n        }\n\n        if (onChangeArg !== undefined) {\n          this.props.onChange(onChangeArg, this.getStateAndHelpers())\n        }\n        // this is currently undocumented and therefore subject to change\n        // We'll try to not break it, but just be warned.\n        this.props.onUserAction(onStateChangeArg, this.getStateAndHelpers())\n      },\n    )\n  }\n\n  getStateAndHelpers() {\n    const {highlightedIndex, inputValue, selectedItem, isOpen} = this.getState()\n    const {itemToString} = this.props\n    const {id} = this\n    const {\n      getRootProps,\n      getToggleButtonProps,\n      getLabelProps,\n      getMenuProps,\n      getInputProps,\n      getItemProps,\n      openMenu,\n      closeMenu,\n      toggleMenu,\n      selectItem,\n      selectItemAtIndex,\n      selectHighlightedItem,\n      setHighlightedIndex,\n      clearSelection,\n      clearItems,\n      reset,\n      setItemCount,\n      unsetItemCount,\n      internalSetState: setState,\n    } = this\n    return {\n      // prop getters\n      getRootProps,\n      getToggleButtonProps,\n      getLabelProps,\n      getMenuProps,\n      getInputProps,\n      getItemProps,\n\n      // actions\n      reset,\n      openMenu,\n      closeMenu,\n      toggleMenu,\n      selectItem,\n      selectItemAtIndex,\n      selectHighlightedItem,\n      setHighlightedIndex,\n      clearSelection,\n      clearItems,\n      setItemCount,\n      unsetItemCount,\n      setState,\n\n      // props\n      itemToString,\n\n      // derived\n      id,\n\n      // state\n      highlightedIndex,\n      inputValue,\n      isOpen,\n      selectedItem,\n    }\n  }\n\n  //////////////////////////// ROOT\n\n  rootRef = node => (this._rootNode = node)\n\n  getRootProps = (\n    {refKey = 'ref', ...rest} = {},\n    {suppressRefError = false} = {},\n  ) => {\n    // this is used in the render to know whether the user has called getRootProps.\n    // It uses that to know whether to apply the props automatically\n    this.getRootProps.called = true\n    this.getRootProps.refKey = refKey\n    this.getRootProps.suppressRefError = suppressRefError\n    const {isOpen} = this.getState()\n    return {\n      [refKey]: this.rootRef,\n      role: 'combobox',\n      'aria-expanded': isOpen,\n      'aria-haspopup': 'listbox',\n      'aria-owns': isOpen ? this.menuId : null,\n      'aria-labelledby': this.labelId,\n      ...rest,\n    }\n  }\n\n  //\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ ROOT\n\n  keyDownHandlers = {\n    ArrowDown(event) {\n      event.preventDefault()\n\n      if (this.getState().isOpen) {\n        const amount = event.shiftKey ? 5 : 1\n        this.moveHighlightedIndex(amount, {\n          type: stateChangeTypes.keyDownArrowDown,\n        })\n      } else {\n        this.internalSetState(\n          {\n            isOpen: true,\n            type: stateChangeTypes.keyDownArrowDown,\n          },\n          () => {\n            const itemCount = this.getItemCount()\n            if (itemCount > 0) {\n              this.setHighlightedIndex(\n                getNextWrappingIndex(\n                  1,\n                  this.getState().highlightedIndex,\n                  itemCount,\n                ),\n                {type: stateChangeTypes.keyDownArrowDown},\n              )\n            }\n          },\n        )\n      }\n    },\n\n    ArrowUp(event) {\n      event.preventDefault()\n\n      if (this.getState().isOpen) {\n        const amount = event.shiftKey ? -5 : -1\n        this.moveHighlightedIndex(amount, {\n          type: stateChangeTypes.keyDownArrowUp,\n        })\n      } else {\n        this.internalSetState(\n          {\n            isOpen: true,\n            type: stateChangeTypes.keyDownArrowUp,\n          },\n          () => {\n            const itemCount = this.getItemCount()\n            if (itemCount > 0) {\n              this.setHighlightedIndex(\n                getNextWrappingIndex(\n                  -1,\n                  this.getState().highlightedIndex,\n                  itemCount,\n                ),\n                {type: stateChangeTypes.keyDownArrowDown},\n              )\n            }\n          },\n        )\n      }\n    },\n\n    Enter(event) {\n      const {isOpen, highlightedIndex} = this.getState()\n      if (isOpen && highlightedIndex != null) {\n        event.preventDefault()\n        const item = this.items[highlightedIndex]\n        const itemNode = this.getItemNodeFromIndex(highlightedIndex)\n        if (item == null || (itemNode && itemNode.hasAttribute('disabled'))) {\n          return\n        }\n        this.selectHighlightedItem({\n          type: stateChangeTypes.keyDownEnter,\n        })\n      }\n    },\n\n    Escape(event) {\n      event.preventDefault()\n      this.reset({\n        type: stateChangeTypes.keyDownEscape,\n        selectedItem: null,\n        inputValue: '',\n      })\n    },\n  }\n\n  //////////////////////////// BUTTON\n\n  buttonKeyDownHandlers = {\n    ...this.keyDownHandlers,\n\n    ' '(event) {\n      event.preventDefault()\n      this.toggleMenu({type: stateChangeTypes.keyDownSpaceButton})\n    },\n  }\n\n  inputKeyDownHandlers = {\n    ...this.keyDownHandlers,\n    Home(event) {\n      this.highlightFirstOrLastIndex(event, true, {\n        type: stateChangeTypes.keyDownHome,\n      })\n    },\n\n    End(event) {\n      this.highlightFirstOrLastIndex(event, false, {\n        type: stateChangeTypes.keyDownEnd,\n      })\n    },\n  }\n\n  getToggleButtonProps = ({\n    onClick,\n    onPress,\n    onKeyDown,\n    onKeyUp,\n    onBlur,\n    ...rest\n  } = {}) => {\n    const {isOpen} = this.getState()\n    const enabledEventHandlers = isReactNative\n      ? /* istanbul ignore next (react-native) */\n        {\n          onPress: callAllEventHandlers(onPress, this.buttonHandleClick),\n        }\n      : {\n          onClick: callAllEventHandlers(onClick, this.buttonHandleClick),\n          onKeyDown: callAllEventHandlers(onKeyDown, this.buttonHandleKeyDown),\n          onKeyUp: callAllEventHandlers(onKeyUp, this.buttonHandleKeyUp),\n          onBlur: callAllEventHandlers(onBlur, this.buttonHandleBlur),\n        }\n    const eventHandlers = rest.disabled ? {} : enabledEventHandlers\n    return {\n      type: 'button',\n      role: 'button',\n      'aria-label': isOpen ? 'close menu' : 'open menu',\n      'aria-haspopup': true,\n      'data-toggle': true,\n      ...eventHandlers,\n      ...rest,\n    }\n  }\n\n  buttonHandleKeyUp = event => {\n    // Prevent click event from emitting in Firefox\n    event.preventDefault()\n  }\n\n  buttonHandleKeyDown = event => {\n    const key = normalizeArrowKey(event)\n    if (this.buttonKeyDownHandlers[key]) {\n      this.buttonKeyDownHandlers[key].call(this, event)\n    }\n  }\n\n  buttonHandleClick = event => {\n    event.preventDefault()\n    // handle odd case for Safari and Firefox which\n    // don't give the button the focus properly.\n    /* istanbul ignore if (can't reasonably test this) */\n    if (\n      !isReactNative &&\n      this.props.environment.document.activeElement ===\n        this.props.environment.document.body\n    ) {\n      event.target.focus()\n    }\n    // to simplify testing components that use downshift, we'll not wrap this in a setTimeout\n    // if the NODE_ENV is test. With the proper build system, this should be dead code eliminated\n    // when building for production and should therefore have no impact on production code.\n    if (process.env.NODE_ENV === 'test') {\n      this.toggleMenu({type: stateChangeTypes.clickButton})\n    } else {\n      // Ensure that toggle of menu occurs after the potential blur event in iOS\n      this.internalSetTimeout(() =>\n        this.toggleMenu({type: stateChangeTypes.clickButton}),\n      )\n    }\n  }\n\n  buttonHandleBlur = event => {\n    const blurTarget = event.target // Save blur target for comparison with activeElement later\n    // Need setTimeout, so that when the user presses Tab, the activeElement is the next focused element, not body element\n    this.internalSetTimeout(() => {\n      if (\n        !this.isMouseDown &&\n        (this.props.environment.document.activeElement == null ||\n          this.props.environment.document.activeElement.id !== this.inputId) &&\n        this.props.environment.document.activeElement !== blurTarget // Do nothing if we refocus the same element again (to solve issue in Safari on iOS)\n      ) {\n        this.reset({type: stateChangeTypes.blurButton})\n      }\n    })\n  }\n\n  //\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ BUTTON\n\n  /////////////////////////////// LABEL\n\n  getLabelProps = props => {\n    return {htmlFor: this.inputId, id: this.labelId, ...props}\n  }\n\n  //\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ LABEL\n\n  /////////////////////////////// INPUT\n\n  getInputProps = ({\n    onKeyDown,\n    onBlur,\n    onChange,\n    onInput,\n    onChangeText,\n    ...rest\n  } = {}) => {\n    let onChangeKey\n    let eventHandlers = {}\n\n    /* istanbul ignore next (preact) */\n    if (isPreact) {\n      onChangeKey = 'onInput'\n    } else {\n      onChangeKey = 'onChange'\n    }\n    const {inputValue, isOpen, highlightedIndex} = this.getState()\n\n    if (!rest.disabled) {\n      eventHandlers = {\n        [onChangeKey]: callAllEventHandlers(\n          onChange,\n          onInput,\n          this.inputHandleChange,\n        ),\n        onKeyDown: callAllEventHandlers(onKeyDown, this.inputHandleKeyDown),\n        onBlur: callAllEventHandlers(onBlur, this.inputHandleBlur),\n      }\n    }\n\n    /* istanbul ignore if (react-native) */\n    if (isReactNative) {\n      eventHandlers = {\n        onChange: callAllEventHandlers(\n          onChange,\n          onInput,\n          this.inputHandleChange,\n        ),\n        onChangeText: callAllEventHandlers(\n          onChangeText,\n          onInput,\n          this.inputHandleTextChange,\n        ),\n        onBlur: callAllEventHandlers(onBlur, this.inputHandleBlur),\n      }\n    }\n\n    return {\n      'aria-autocomplete': 'list',\n      'aria-activedescendant':\n        isOpen && typeof highlightedIndex === 'number' && highlightedIndex >= 0\n          ? this.getItemId(highlightedIndex)\n          : null,\n      'aria-controls': isOpen ? this.menuId : null,\n      'aria-labelledby': this.labelId,\n      // https://developer.mozilla.org/en-US/docs/Web/Security/Securing_your_site/Turning_off_form_autocompletion\n      // revert back since autocomplete=\"nope\" is ignored on latest Chrome and Opera\n      autoComplete: 'off',\n      value: inputValue,\n      id: this.inputId,\n      ...eventHandlers,\n      ...rest,\n    }\n  }\n\n  inputHandleKeyDown = event => {\n    const key = normalizeArrowKey(event)\n    if (key && this.inputKeyDownHandlers[key]) {\n      this.inputKeyDownHandlers[key].call(this, event)\n    }\n  }\n\n  inputHandleChange = event => {\n    this.internalSetState({\n      type: stateChangeTypes.changeInput,\n      isOpen: true,\n      inputValue: isReactNative\n        ? /* istanbul ignore next (react-native) */ event.nativeEvent.text\n        : event.target.value,\n      highlightedIndex: this.props.defaultHighlightedIndex,\n    })\n  }\n\n  inputHandleTextChange /* istanbul ignore next (react-native) */ = text => {\n    this.internalSetState({\n      type: stateChangeTypes.changeInput,\n      isOpen: true,\n      inputValue: text,\n      highlightedIndex: this.props.defaultHighlightedIndex,\n    })\n  }\n\n  inputHandleBlur = () => {\n    // Need setTimeout, so that when the user presses Tab, the activeElement is the next focused element, not the body element\n    this.internalSetTimeout(() => {\n      const downshiftButtonIsActive =\n        this.props.environment.document &&\n        !!this.props.environment.document.activeElement &&\n        !!this.props.environment.document.activeElement.dataset &&\n        this.props.environment.document.activeElement.dataset.toggle &&\n        (this._rootNode &&\n          this._rootNode.contains(\n            this.props.environment.document.activeElement,\n          ))\n      if (!this.isMouseDown && !downshiftButtonIsActive) {\n        this.reset({type: stateChangeTypes.blurInput})\n      }\n    })\n  }\n\n  //\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ INPUT\n\n  /////////////////////////////// MENU\n\n  menuRef = node => {\n    this._menuNode = node\n  }\n\n  getMenuProps = (\n    {refKey = 'ref', ref, ...props} = {},\n    {suppressRefError = false} = {},\n  ) => {\n    this.getMenuProps.called = true\n    this.getMenuProps.refKey = refKey\n    this.getMenuProps.suppressRefError = suppressRefError\n\n    return {\n      [refKey]: callAll(ref, this.menuRef),\n      role: 'listbox',\n      'aria-labelledby': props && props['aria-label'] ? null : this.labelId,\n      id: this.menuId,\n      ...props,\n    }\n  }\n  //\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ MENU\n\n  /////////////////////////////// ITEM\n  getItemProps = ({\n    onMouseMove,\n    onMouseDown,\n    onClick,\n    onPress,\n    index,\n    item = process.env.NODE_ENV === 'production'\n      ? /* istanbul ignore next */ undefined\n      : requiredProp('getItemProps', 'item'),\n    ...rest\n  } = {}) => {\n    if (index === undefined) {\n      this.items.push(item)\n      index = this.items.indexOf(item)\n    } else {\n      this.items[index] = item\n    }\n\n    const onSelectKey = isReactNative\n      ? /* istanbul ignore next (react-native) */ 'onPress'\n      : 'onClick'\n    const customClickHandler = isReactNative\n      ? /* istanbul ignore next (react-native) */ onPress\n      : onClick\n\n    const enabledEventHandlers = {\n      // onMouseMove is used over onMouseEnter here. onMouseMove\n      // is only triggered on actual mouse movement while onMouseEnter\n      // can fire on DOM changes, interrupting keyboard navigation\n      onMouseMove: callAllEventHandlers(onMouseMove, () => {\n        if (index === this.getState().highlightedIndex) {\n          return\n        }\n        this.setHighlightedIndex(index, {\n          type: stateChangeTypes.itemMouseEnter,\n        })\n\n        // We never want to manually scroll when changing state based\n        // on `onMouseMove` because we will be moving the element out\n        // from under the user which is currently scrolling/moving the\n        // cursor\n        this.avoidScrolling = true\n        this.internalSetTimeout(() => (this.avoidScrolling = false), 250)\n      }),\n      onMouseDown: callAllEventHandlers(onMouseDown, event => {\n        // This prevents the activeElement from being changed\n        // to the item so it can remain with the current activeElement\n        // which is a more common use case.\n        event.preventDefault()\n      }),\n      [onSelectKey]: callAllEventHandlers(customClickHandler, () => {\n        this.selectItemAtIndex(index, {\n          type: stateChangeTypes.clickItem,\n        })\n      }),\n    }\n\n    // Passing down the onMouseDown handler to prevent redirect\n    // of the activeElement if clicking on disabled items\n    const eventHandlers = rest.disabled\n      ? {onMouseDown: enabledEventHandlers.onMouseDown}\n      : enabledEventHandlers\n\n    return {\n      id: this.getItemId(index),\n      role: 'option',\n      'aria-selected': this.getState().highlightedIndex === index,\n      ...eventHandlers,\n      ...rest,\n    }\n  }\n  //\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\ ITEM\n\n  clearItems = () => {\n    this.items = []\n  }\n\n  reset = (otherStateToSet = {}, cb) => {\n    otherStateToSet = pickState(otherStateToSet)\n    this.internalSetState(\n      ({selectedItem}) => ({\n        isOpen: this.props.defaultIsOpen,\n        highlightedIndex: this.props.defaultHighlightedIndex,\n        inputValue: this.props.itemToString(selectedItem),\n        ...otherStateToSet,\n      }),\n      cb,\n    )\n  }\n\n  toggleMenu = (otherStateToSet = {}, cb) => {\n    otherStateToSet = pickState(otherStateToSet)\n    this.internalSetState(\n      ({isOpen}) => {\n        return {\n          isOpen: !isOpen,\n          ...(isOpen && {\n            highlightedIndex: this.props.defaultHighlightedIndex,\n          }),\n          ...otherStateToSet,\n        }\n      },\n      () => {\n        const {isOpen, highlightedIndex} = this.getState()\n        if (isOpen) {\n          if (this.getItemCount() > 0 && typeof highlightedIndex === 'number') {\n            this.setHighlightedIndex(highlightedIndex, otherStateToSet)\n          }\n        }\n        cbToCb(cb)()\n      },\n    )\n  }\n\n  openMenu = cb => {\n    this.internalSetState({isOpen: true}, cb)\n  }\n\n  closeMenu = cb => {\n    this.internalSetState({isOpen: false}, cb)\n  }\n\n  updateStatus = debounce(() => {\n    const state = this.getState()\n    const item = this.items[state.highlightedIndex]\n    const resultCount = this.getItemCount()\n    const status = this.props.getA11yStatusMessage({\n      itemToString: this.props.itemToString,\n      previousResultCount: this.previousResultCount,\n      resultCount,\n      highlightedItem: item,\n      ...state,\n    })\n    this.previousResultCount = resultCount\n\n    setA11yStatus(status)\n  }, 200)\n\n  componentDidMount() {\n    /* istanbul ignore if (react-native) */\n    if (\n      process.env.NODE_ENV !== 'production' &&\n      !isReactNative &&\n      this.getMenuProps.called &&\n      !this.getMenuProps.suppressRefError\n    ) {\n      validateGetMenuPropsCalledCorrectly(this._menuNode, this.getMenuProps)\n    }\n\n    /* istanbul ignore if (react-native) */\n    if (isReactNative) {\n      this.cleanup = () => {\n        this.internalClearTimeouts()\n      }\n    } else {\n      const targetWithinDownshift = (target, checkActiveElement = true) => {\n        const {document} = this.props.environment\n        return [this._rootNode, this._menuNode].some(\n          contextNode =>\n            contextNode &&\n            (isOrContainsNode(contextNode, target) ||\n              (checkActiveElement &&\n                isOrContainsNode(contextNode, document.activeElement))),\n        )\n      }\n      // this.isMouseDown helps us track whether the mouse is currently held down.\n      // This is useful when the user clicks on an item in the list, but holds the mouse\n      // down long enough for the list to disappear (because the blur event fires on the input)\n      // this.isMouseDown is used in the blur handler on the input to determine whether the blur event should\n      // trigger hiding the menu.\n      const onMouseDown = () => {\n        this.isMouseDown = true\n      }\n      const onMouseUp = event => {\n        this.isMouseDown = false\n        // if the target element or the activeElement is within a downshift node\n        // then we don't want to reset downshift\n        const contextWithinDownshift = targetWithinDownshift(event.target)\n        if (!contextWithinDownshift && this.getState().isOpen) {\n          this.reset({type: stateChangeTypes.mouseUp}, () =>\n            this.props.onOuterClick(this.getStateAndHelpers()),\n          )\n        }\n      }\n      // Touching an element in iOS gives focus and hover states, but touching out of\n      // the element will remove hover, and persist the focus state, resulting in the\n      // blur event not being triggered.\n      // this.isTouchMove helps us track whether the user is tapping or swiping on a touch screen.\n      // If the user taps outside of Downshift, the component should be reset,\n      // but not if the user is swiping\n      const onTouchStart = () => {\n        this.isTouchMove = false\n      }\n\n      const onTouchMove = () => {\n        this.isTouchMove = true\n      }\n\n      const onTouchEnd = event => {\n        const contextWithinDownshift = targetWithinDownshift(\n          event.target,\n          false,\n        )\n        if (\n          !this.isTouchMove &&\n          !contextWithinDownshift &&\n          this.getState().isOpen\n        ) {\n          this.reset({type: stateChangeTypes.touchEnd}, () =>\n            this.props.onOuterClick(this.getStateAndHelpers()),\n          )\n        }\n      }\n\n      this.props.environment.addEventListener('mousedown', onMouseDown)\n      this.props.environment.addEventListener('mouseup', onMouseUp)\n      this.props.environment.addEventListener('touchstart', onTouchStart)\n      this.props.environment.addEventListener('touchmove', onTouchMove)\n      this.props.environment.addEventListener('touchend', onTouchEnd)\n\n      this.cleanup = () => {\n        this.internalClearTimeouts()\n        this.updateStatus.cancel()\n        this.props.environment.removeEventListener('mousedown', onMouseDown)\n        this.props.environment.removeEventListener('mouseup', onMouseUp)\n        this.props.environment.removeEventListener('touchstart', onTouchStart)\n        this.props.environment.removeEventListener('touchmove', onTouchMove)\n        this.props.environment.removeEventListener('touchend', onTouchEnd)\n      }\n    }\n  }\n\n  shouldScroll(prevState, prevProps) {\n    const {highlightedIndex: currentHighlightedIndex} =\n      this.props.highlightedIndex === undefined ? this.getState() : this.props\n    const {highlightedIndex: prevHighlightedIndex} =\n      prevProps.highlightedIndex === undefined ? prevState : prevProps\n    const scrollWhenOpen =\n      currentHighlightedIndex && this.getState().isOpen && !prevState.isOpen\n    const scrollWhenNavigating =\n      currentHighlightedIndex !== prevHighlightedIndex\n\n    return scrollWhenOpen || scrollWhenNavigating\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (process.env.NODE_ENV !== 'production') {\n      validateControlledUnchanged(prevProps, this.props)\n      /* istanbul ignore if (react-native) */\n      if (\n        !isReactNative &&\n        this.getMenuProps.called &&\n        !this.getMenuProps.suppressRefError\n      ) {\n        validateGetMenuPropsCalledCorrectly(this._menuNode, this.getMenuProps)\n      }\n    }\n\n    if (\n      this.isControlledProp('selectedItem') &&\n      this.props.selectedItemChanged(\n        prevProps.selectedItem,\n        this.props.selectedItem,\n      )\n    ) {\n      this.internalSetState({\n        type: stateChangeTypes.controlledPropUpdatedSelectedItem,\n        inputValue: this.props.itemToString(this.props.selectedItem),\n      })\n    }\n\n    if (!this.avoidScrolling && this.shouldScroll(prevState, prevProps)) {\n      this.scrollHighlightedItemIntoView()\n    }\n\n    /* istanbul ignore else (react-native) */\n    if (!isReactNative) {\n      this.updateStatus()\n    }\n  }\n\n  componentWillUnmount() {\n    this.cleanup() // avoids memory leak\n  }\n\n  render() {\n    const children = unwrapArray(this.props.children, noop)\n    // because the items are rerendered every time we call the children\n    // we clear this out each render and it will be populated again as\n    // getItemProps is called.\n    this.clearItems()\n    // we reset this so we know whether the user calls getRootProps during\n    // this render. If they do then we don't need to do anything,\n    // if they don't then we need to clone the element they return and\n    // apply the props for them.\n    this.getRootProps.called = false\n    this.getRootProps.refKey = undefined\n    this.getRootProps.suppressRefError = undefined\n    // we do something similar for getMenuProps\n    this.getMenuProps.called = false\n    this.getMenuProps.refKey = undefined\n    this.getMenuProps.suppressRefError = undefined\n    // we do something similar for getLabelProps\n    this.getLabelProps.called = false\n    // and something similar for getInputProps\n    this.getInputProps.called = false\n    const element = unwrapArray(children(this.getStateAndHelpers()))\n    if (!element) {\n      return null\n    }\n\n    if (this.getRootProps.called || this.props.suppressRefError) {\n      if (\n        process.env.NODE_ENV !== 'production' &&\n        !this.getRootProps.suppressRefError &&\n        !this.props.suppressRefError\n      ) {\n        validateGetRootPropsCalledCorrectly(element, this.getRootProps)\n      }\n      return element\n    } else if (isDOMElement(element)) {\n      // they didn't apply the root props, but we can clone\n      // this and apply the props ourselves\n      return React.cloneElement(\n        element,\n        this.getRootProps(getElementProps(element)),\n      )\n    }\n\n    /* istanbul ignore else */\n    if (process.env.NODE_ENV !== 'production') {\n      // they didn't apply the root props, but they need to\n      // otherwise we can't query around the autocomplete\n\n      throw new Error(\n        'downshift: If you return a non-DOM element, you must use apply the getRootProps function',\n      )\n    }\n\n    /* istanbul ignore next */\n    return undefined\n  }\n}\n\nexport default Downshift\n\nfunction validateGetMenuPropsCalledCorrectly(node, {refKey}) {\n  if (!node) {\n    // eslint-disable-next-line no-console\n    console.error(\n      `downshift: The ref prop \"${refKey}\" from getMenuProps was not applied correctly on your menu element.`,\n    )\n  }\n}\n\nfunction validateGetRootPropsCalledCorrectly(element, {refKey}) {\n  const refKeySpecified = refKey !== 'ref'\n  const isComposite = !isDOMElement(element)\n  if (isComposite && !refKeySpecified && !isForwardRef(element)) {\n    // eslint-disable-next-line no-console\n    console.error(\n      'downshift: You returned a non-DOM element. You must specify a refKey in getRootProps',\n    )\n  } else if (!isComposite && refKeySpecified) {\n    // eslint-disable-next-line no-console\n    console.error(\n      `downshift: You returned a DOM element. You should not specify a refKey in getRootProps. You specified \"${refKey}\"`,\n    )\n  }\n  if (!isForwardRef(element) && !getElementProps(element)[refKey]) {\n    // eslint-disable-next-line no-console\n    console.error(\n      `downshift: You must apply the ref prop \"${refKey}\" from getRootProps onto your root element.`,\n    )\n  }\n}\n\nfunction validateControlledUnchanged(prevProps, nextProps) {\n  const warningDescription = `This prop should not switch from controlled to uncontrolled (or vice versa). Decide between using a controlled or uncontrolled Downshift element for the lifetime of the component. More info: https://github.com/downshift-js/downshift#control-props`\n  ;['selectedItem', 'isOpen', 'inputValue', 'highlightedIndex'].forEach(\n    propKey => {\n      if (\n        prevProps[propKey] !== undefined &&\n        nextProps[propKey] === undefined\n      ) {\n        // eslint-disable-next-line no-console\n        console.error(\n          `downshift: A component has changed the controlled prop \"${propKey}\" to be uncontrolled. ${warningDescription}`,\n        )\n      } else if (\n        prevProps[propKey] === undefined &&\n        nextProps[propKey] !== undefined\n      ) {\n        // eslint-disable-next-line no-console\n        console.error(\n          `downshift: A component has changed the uncontrolled prop \"${propKey}\" to be controlled. ${warningDescription}`,\n        )\n      }\n    },\n  )\n}\n","export default function _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}"],"names":["_objectWithoutPropertiesLoose","source","excluded","key","i","target","sourceKeys","Object","keys","length","indexOf","_extends","assign","arguments","prototype","hasOwnProperty","call","apply","this","_assertThisInitialized","self","ReferenceError","defineProperty","exports","value","b","Symbol","for","c","d","e","f","g","h","k","l","m","n","p","q","r","t","a","u","$$typeof","type","v","module","require$$0","cleanupTimerID","statusDiv","document","getElementById","setStatus","status","div","createElement","setAttribute","style","border","clip","height","margin","overflow","padding","position","width","body","appendChild","getStatusDiv","clearTimeout","textContent","setTimeout","unknown","itemMouseEnter","keyDownArrowUp","keyDownArrowDown","keyDownEscape","keyDownEnter","keyDownHome","keyDownEnd","clickItem","blurInput","changeInput","keyDownSpaceButton","clickButton","blurButton","isElement","el","nodeType","canOverflow","skipOverflowHiddenElements","isScrollable","clientHeight","scrollHeight","clientWidth","scrollWidth","getComputedStyle","overflowY","overflowX","alignNearest","scrollingEdgeStart","scrollingEdgeEnd","scrollingSize","scrollingBorderStart","scrollingBorderEnd","elementEdgeStart","elementEdgeEnd","elementSize","options","scrollMode","block","inline","boundary","checkBoundary","node","TypeError","scrollingElement","documentElement","frames","cursor","parentNode","push","viewportWidth","window","visualViewport","innerWidth","viewportHeight","innerHeight","viewportX","scrollX","pageXOffset","viewportY","scrollY","pageYOffset","_target$getBoundingCl","getBoundingClientRect","targetHeight","targetWidth","targetTop","top","targetRight","right","targetBottom","bottom","targetLeft","left","targetBlock","targetInline","computations","index","frame","_frame$getBoundingCli","_height","_width","_top","_left","frameStyle","borderLeft","parseInt","borderLeftWidth","borderTop","borderTopWidth","borderRight","borderRightWidth","borderBottom","borderBottomWidth","blockScroll","inlineScroll","scrollbarWidth","offsetWidth","scrollbarHeight","offsetHeight","Math","max","scrollLeft","scrollTop","min","idCounter","cbToCb","cb","noop","isOrContainsNode","parent","child","contains","callAllEventHandlers","fns","event","args","some","fn","preventDownshiftDefault","nativeEvent","unwrapArray","arg","defaultValue","Array","isArray","stateKeys","pickState","state","result","forEach","normalizeArrowKey","keyCode","getNextWrappingIndex","moveAmount","baseIndex","itemCount","itemsLastIndex","newIndex","Downshift","subClass","superClass","props","_Component","id","_this","String","menuId","labelId","inputId","getItemId","input","items","previousResultCount","timeoutIds","internalSetTimeout","time","filter","setItemCount","count","unsetItemCount","setHighlightedIndex","highlightedIndex","otherStateToSet","defaultHighlightedIndex","internalSetState","clearSelection","selectedItem","inputValue","isOpen","defaultIsOpen","selectItem","item","itemToString","selectItemAtIndex","itemIndex","selectHighlightedItem","getState","stateToSet","isItemSelected","onChangeArg","onStateChangeArg","isStateToSetFunction","onInputValueChange","getStateAndHelpers","setState","newStateToSet","stateReducer","nextState","nextFullState","stateChangeTypes","isControlledProp","onStateChange","onSelect","undefined","onChange","onUserAction","rootRef","_rootNode","getRootProps","refKey","rest","suppressRefError","called","role","keyDownHandlers","ArrowDown","preventDefault","amount","shiftKey","moveHighlightedIndex","_this2","getItemCount","ArrowUp","_this3","Enter","itemNode","getItemNodeFromIndex","hasAttribute","Escape","reset","buttonKeyDownHandlers","toggleMenu","inputKeyDownHandlers","Home","highlightFirstOrLastIndex","End","getToggleButtonProps","onClick","onKeyDown","onPress","onKeyUp","onBlur","enabledEventHandlers","buttonHandleClick","buttonHandleKeyDown","buttonHandleKeyUp","buttonHandleBlur","disabled","environment","activeElement","focus","blurTarget","isMouseDown","getLabelProps","htmlFor","getInputProps","onInput","onChangeText","eventHandlers","inputHandleChange","inputHandleKeyDown","inputHandleBlur","autoComplete","inputHandleTextChange","text","downshiftButtonIsActive","dataset","toggle","menuRef","_menuNode","getMenuProps","ref","callAll","getItemProps","onMouseMove","onMouseDown","customClickHandler","avoidScrolling","clearItems","openMenu","closeMenu","updateStatus","timeoutId","cancel","wrapper","debounce","resultCount","getA11yStatusMessage","highlightedItem","setA11yStatus","initialHighlightedIndex","initialIsOpen","initialInputValue","initialSelectedItem","create","constructor","__proto__","internalClearTimeouts","stateToMerge","reduce","_this4","scrollHighlightedItemIntoView","scrollIntoView","nextHighlightedIndex","first","componentDidMount","targetWithinDownshift","checkActiveElement","_this5","contextNode","onMouseUp","onOuterClick","onTouchStart","isTouchMove","onTouchMove","onTouchEnd","contextWithinDownshift","addEventListener","cleanup","removeEventListener","shouldScroll","prevState","prevProps","currentHighlightedIndex","prevHighlightedIndex","componentDidUpdate","selectedItemChanged","componentWillUnmount","render","children","element","nodeName","isDOMElement","React","cloneElement","attributes","getElementProps","Component","defaultProps","prevItem","menuNode","computeScrollIntoView"],"mappings":"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"}
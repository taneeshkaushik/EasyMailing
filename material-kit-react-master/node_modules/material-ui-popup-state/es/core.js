"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.createPopupState = createPopupState;
exports.bindTrigger = bindTrigger;
exports.bindToggle = bindToggle;
exports.bindHover = bindHover;
exports.bindPopover = bindPopover;
exports.bindPopper = bindPopper;
exports.bindMenu = exports.initCoreState = void 0;

var React = _interopRequireWildcard(require("react"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

/* eslint-env browser */
let eventOrAnchorElWarned = false;
const initCoreState = {
  anchorEl: null,
  hovered: false,
  _childPopupState: null
};
exports.initCoreState = initCoreState;

function createPopupState({
  state: {
    anchorEl,
    hovered,
    _childPopupState
  },
  setState,
  parentPopupState,
  popupId,
  variant
}) {
  const toggle = eventOrAnchorEl => {
    if (anchorEl) close();else open(eventOrAnchorEl);
  };

  const open = eventOrAnchorEl => {
    if (!eventOrAnchorElWarned && !eventOrAnchorEl) {
      eventOrAnchorElWarned = true;
      console.error('eventOrAnchorEl should be defined'); // eslint-disable-line no-console
    }

    if (parentPopupState) {
      if (!parentPopupState.isOpen) return;

      parentPopupState._setChildPopupState(popupState);
    }

    if (typeof document === 'object' && document.activeElement) {
      document.activeElement.blur();
    }

    setState({
      anchorEl: eventOrAnchorEl && eventOrAnchorEl.currentTarget ? eventOrAnchorEl.currentTarget : eventOrAnchorEl,
      hovered: eventOrAnchorEl.type === 'mouseenter'
    });
  };

  const close = () => {
    if (_childPopupState) _childPopupState.close();
    if (parentPopupState) parentPopupState._setChildPopupState(null);
    setState({
      anchorEl: null,
      hovered: false
    });
  };

  const setOpen = (nextOpen, eventOrAnchorEl) => {
    if (nextOpen) {
      if (!eventOrAnchorEl) {
        throw new Error('eventOrAnchorEl must be defined when opening');
      }

      open(eventOrAnchorEl);
    } else close();
  };

  const onMouseLeave = event => {
    const relatedTarget = event.relatedTarget;

    if (hovered && !isElementInPopup(relatedTarget, popupState)) {
      close();
    }
  };

  const _setChildPopupState = _childPopupState => setState({
    _childPopupState
  });

  const popupState = {
    anchorEl,
    popupId,
    variant,
    isOpen: anchorEl != null,
    open,
    close,
    toggle,
    setOpen,
    onMouseLeave,
    _childPopupState,
    _setChildPopupState
  };
  return popupState;
}
/**
 * Creates props for a component that opens the popup when clicked.
 *
 * @param {object} popupState the argument passed to the child function of
 * `PopupState`
 */


function bindTrigger({
  isOpen,
  open,
  popupId,
  variant
}) {
  return {
    [variant === 'popover' ? 'aria-owns' : 'aria-describedby']: isOpen ? popupId : null,
    'aria-haspopup': true,
    onClick: open
  };
}
/**
 * Creates props for a component that toggles the popup when clicked.
 *
 * @param {object} popupState the argument passed to the child function of
 * `PopupState`
 */


function bindToggle({
  isOpen,
  toggle,
  popupId,
  variant
}) {
  return {
    [variant === 'popover' ? 'aria-owns' : 'aria-describedby']: isOpen ? popupId : null,
    'aria-haspopup': true,
    onClick: toggle
  };
}
/**
 * Creates props for a component that opens the popup while hovered.
 *
 * @param {object} popupState the argument passed to the child function of
 * `PopupState`
 */


function bindHover({
  isOpen,
  open,
  onMouseLeave,
  popupId,
  variant
}) {
  return {
    [variant === 'popover' ? 'aria-owns' : 'aria-describedby']: isOpen ? popupId : null,
    'aria-haspopup': true,
    onMouseEnter: open,
    onMouseLeave
  };
}
/**
 * Creates props for a `Popover` component.
 *
 * @param {object} popupState the argument passed to the child function of
 * `PopupState`
 */


function bindPopover({
  isOpen,
  anchorEl,
  close,
  popupId,
  onMouseLeave
}) {
  return {
    id: popupId,
    anchorEl,
    open: isOpen,
    onClose: close,
    onMouseLeave
  };
}
/**
 * Creates props for a `Menu` component.
 *
 * @param {object} popupState the argument passed to the child function of
 * `PopupState`
 */


const bindMenu = bindPopover;
/**
 * Creates props for a `Popper` component.
 *
 * @param {object} popupState the argument passed to the child function of
 * `PopupState`
 */

exports.bindMenu = bindMenu;

function bindPopper({
  isOpen,
  anchorEl,
  popupId
}) {
  return {
    id: popupId,
    anchorEl,
    open: isOpen
  };
}

function getPopup({
  popupId
}) {
  return popupId && typeof document !== 'undefined' ? document.getElementById(popupId) // eslint-disable-line no-undef
  : null;
}

function isElementInPopup(element, popupState) {
  const {
    anchorEl,
    _childPopupState
  } = popupState;
  return isAncestor(anchorEl, element) || isAncestor(getPopup(popupState), element) || _childPopupState != null && isElementInPopup(element, _childPopupState);
}

function isAncestor(parent, child) {
  if (!parent) return false;

  while (child) {
    if (child === parent) return true;
    child = child.parentElement;
  }

  return false;
}